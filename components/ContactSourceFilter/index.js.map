{"version":3,"sources":["components/ContactSourceFilter/index.js"],"names":["ContactSourceItem","sourceName","sourceLabel","isSelected","onSelect","styles","contactSourceItem","selected","propTypes","PropTypes","string","isRequired","bool","func","ContactSourceFilter","props","hideList","_mounted","setState","unfold","onUnfoldChange","window","removeEventListener","showList","addEventListener","togglePanel","evt","stopPropagation","state","emitSelect","onSourceSelect","undefined","key","locale","i18n","getString","className","currentLocale","contactSourceNames","selectedSourceName","isAllSource","contactSourceFilter","filterIconContainer","filterIconNode","iconNoneFill","contactSourceList","e","map","Component","arrayOf","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport i18n from './i18n';\nimport styles from './styles.scss';\nimport ContactFilterIcon from '../../assets/images/ContactFilter.svg';\nimport ContactFilterSolidIcon from '../../assets/images/ContactFilterSolid.svg';\n\nexport function ContactSourceItem({\n  sourceName, sourceLabel, isSelected, onSelect\n}) {\n  return (\n    <div\n      onClick={() => onSelect(sourceName)}\n      className={classnames(\n        styles.contactSourceItem,\n        isSelected ? styles.selected : ''\n      )}\n    >\n      {sourceLabel}\n    </div>\n  );\n}\nContactSourceItem.propTypes = {\n  sourceName: PropTypes.string.isRequired,\n  sourceLabel: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default class ContactSourceFilter extends Component {\n  constructor(props) {\n    super(props);\n    const unfold = props.unfold !== undefined ? props.unfold : false;\n    this.state = {\n      unfold,\n    };\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n    if (!this.state.unfold) {\n      window.removeEventListener('click', this.hideList);\n    }\n  }\n\n  getString(key, locale) {\n    return i18n.getString(key, locale);\n  }\n\n  hideList = () => {\n    if (this._mounted) {\n      this.setState({\n        unfold: false,\n      });\n      if (typeof this.props.onUnfoldChange === 'function') {\n        this.props.onUnfoldChange(false);\n      }\n    }\n    window.removeEventListener('click', this.hideList);\n  }\n\n  showList = () => {\n    this.setState({\n      unfold: true,\n    });\n    window.addEventListener('click', this.hideList);\n    if (typeof this.props.onUnfoldChange === 'function') {\n      this.props.onUnfoldChange(true);\n    }\n  }\n\n  togglePanel = (evt) => {\n    evt.stopPropagation();\n    if (!this.state.unfold) {\n      this.showList();\n      return;\n    }\n    this.hideList();\n  }\n\n  emitSelect = (sourceName) => {\n    const { onSourceSelect } = this.props;\n    if (onSourceSelect) {\n      onSourceSelect(sourceName);\n    }\n    this.hideList();\n  }\n\n  render() {\n    const {\n      className,\n      currentLocale,\n      contactSourceNames,\n      selectedSourceName,\n    } = this.props;\n\n    const isAllSource = selectedSourceName === contactSourceNames[0];\n    return (\n      <div\n        className={classnames(styles.contactSourceFilter, className)}\n        onClick={this.togglePanel}\n      >\n        <div\n          className={styles.filterIconContainer}\n          title={this.getString(selectedSourceName, currentLocale)}\n        >\n          {\n            isAllSource\n              ? <ContactFilterIcon\n                className={classnames(styles.filterIconNode, styles.iconNoneFill)} />\n              : <ContactFilterSolidIcon className={styles.filterIconNode} />\n          }\n        </div>\n        {\n          !this.state.unfold ? null : (\n            <div\n              className={styles.contactSourceList}\n              onClick={e => e.stopPropagation()}\n            >\n              {\n                contactSourceNames.map(sourceName => (\n                  <ContactSourceItem\n                    key={sourceName}\n                    sourceName={sourceName}\n                    sourceLabel={this.getString(sourceName, currentLocale)}\n                    isSelected={sourceName === selectedSourceName}\n                    onSelect={this.emitSelect}\n                  />\n                ))\n              }\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nContactSourceFilter.propTypes = {\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  onSourceSelect: PropTypes.func,\n  selectedSourceName: PropTypes.string,\n  contactSourceNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n  unfold: PropTypes.bool,\n  onUnfoldChange: PropTypes.func,\n};\n\nContactSourceFilter.defaultProps = {\n  className: undefined,\n  selectedSourceName: undefined,\n  onSourceSelect: undefined,\n  unfold: undefined,\n  onUnfoldChange: undefined,\n};\n"]}