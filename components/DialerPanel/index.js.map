{"version":3,"sources":["components/DialerPanel/index.js"],"names":["PhoneNumber","formatPhone","usageType","currentLocale","phoneNumber","getString","propTypes","func","isRequired","string","defaultProps","FromNumberSelect","fromNumber","fromNumbers","onChange","hidden","options","select","selectIcon","value","valueItem","find","item","option","arrayOf","shape","bool","DialerPanel","callButtonDisabled","className","keepToNumber","onCall","toNumber","changeFromNumber","isWebphoneMode","onCallFunc","root","event","currentTarget","dialButtons","dialPad","key","callBtnRow","callBtn","btnSvg","btnSvgGroup","disabled","circle","btnValue","__html"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport DialPad from '../DialPad';\nimport DialTextInput from '../DialTextInput';\nimport DropdownSelect from '../DropdownSelect';\nimport styles from './styles.scss';\n\nimport i18n from './i18n';\n\nfunction PhoneNumber({\n  formatPhone,\n  usageType,\n  currentLocale,\n  phoneNumber,\n}) {\n  return (\n    <span className={styles.phoneNumber}>\n      <span>\n        {formatPhone(phoneNumber)}\n      </span>\n      <span className={styles.usageType}>\n        {i18n.getString(usageType, currentLocale)}\n      </span>\n    </span>\n  );\n}\n\nPhoneNumber.propTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  phoneNumber: PropTypes.string,\n  usageType: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nPhoneNumber.defaultProps = {\n  phoneNumber: null,\n  usageType: null,\n};\n\nfunction FromNumberSelect({\n  fromNumber,\n  fromNumbers,\n  onChange,\n  formatPhone,\n  hidden,\n  currentLocale,\n}) {\n  if (hidden) {\n    return null;\n  }\n  const options = [\n    ...fromNumbers,\n    {\n      phoneNumber: 'anonymous',\n    }\n  ];\n  return (\n    <DropdownSelect\n      className={styles.select}\n      iconClassName={styles.selectIcon}\n      value={fromNumber}\n      label={'From:'}\n      onChange={onChange}\n      options={options}\n      renderValue={(value) => {\n        if (value === 'anonymous') {\n          return (\n            <span>{i18n.getString('Blocked', currentLocale)}</span>\n          );\n        }\n        const valueItem = fromNumbers.find(\n          item => item.phoneNumber === value\n        );\n        const usageType = valueItem && valueItem.usageType;\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={value}\n            usageType={usageType}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n      valueFunction={option => option.phoneNumber}\n      renderFunction={(option) => {\n        if (option.phoneNumber === 'anonymous') {\n          return (\n            <span>{i18n.getString('Blocked', currentLocale)}</span>\n          );\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={option.phoneNumber}\n            usageType={option.usageType}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n    />\n  );\n}\n\nFromNumberSelect.propTypes = {\n  fromNumber: PropTypes.string,\n  formatPhone: PropTypes.func.isRequired,\n  fromNumbers: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    usageType: PropTypes.string,\n  })).isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  hidden: PropTypes.bool.isRequired,\n};\n\nFromNumberSelect.defaultProps = {\n  fromNumber: null,\n};\n\nfunction DialerPanel({\n  callButtonDisabled,\n  className,\n  keepToNumber,\n  onCall,\n  toNumber,\n  fromNumber,\n  fromNumbers,\n  changeFromNumber,\n  formatPhone,\n  isWebphoneMode,\n  currentLocale,\n}) {\n  const onCallFunc = () => {\n    if (!callButtonDisabled) {\n      onCall();\n    }\n  };\n  return (\n    <div className={classnames(styles.root, className)}>\n      <FromNumberSelect\n        fromNumber={fromNumber}\n        fromNumbers={fromNumbers}\n        onChange={changeFromNumber}\n        formatPhone={formatPhone}\n        currentLocale={currentLocale}\n        hidden={!isWebphoneMode}\n      />\n      <DialTextInput\n        value={toNumber}\n        onChangeEvent={(event) => {\n          keepToNumber(event.currentTarget.value);\n        }}\n        onDelete={() => {\n          keepToNumber('');\n        }}\n        />\n      <div className={styles.dialButtons}>\n        <DialPad\n          className={styles.dialPad}\n          onButtonOutput={(key) => {\n            keepToNumber(toNumber + key);\n          }}\n          />\n        <div className={classnames(styles.callBtnRow)}>\n          <div className={styles.callBtn}>\n            <svg className={styles.btnSvg} viewBox=\"0 0 500 500\">\n              <g\n                className={classnames(\n                  styles.btnSvgGroup,\n                  callButtonDisabled && styles.disabled,\n                )}\n                onClick={onCallFunc}\n                >\n                <circle\n                  className={styles.circle}\n                  cx=\"250\"\n                  cy=\"250\"\n                  r=\"200\"\n                  />\n                <text\n                  className={styles.btnValue}\n                  x=\"0\"\n                  dx=\"167.5155\"\n                  y=\"0\"\n                  dy=\"300\"\n                  dangerouslySetInnerHTML={{\n                    __html: '&#xe953;',\n                  }} />\n              </g>\n            </svg>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nDialerPanel.propTypes = {\n  className: PropTypes.string,\n  onCall: PropTypes.func.isRequired,\n  callButtonDisabled: PropTypes.bool,\n  isWebphoneMode: PropTypes.bool,\n  toNumber: PropTypes.string,\n  keepToNumber: PropTypes.func,\n  fromNumber: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  fromNumbers: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    usageType: PropTypes.string,\n  })),\n  changeFromNumber: PropTypes.func,\n  formatPhone: PropTypes.func,\n};\n\nDialerPanel.defaultProps = {\n  className: null,\n  fromNumber: null,\n  callButtonDisabled: false,\n  toNumber: '',\n  fromNumbers: [],\n  isWebphoneMode: false,\n  changeFromNumber: () => null,\n  keepToNumber: () => null,\n  formatPhone: phoneNumber => phoneNumber,\n};\n\nexport default DialerPanel;\n"]}