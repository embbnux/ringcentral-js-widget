{"version":3,"sources":["components/MessageItem/index.js"],"names":["ConversationIcon","group","conversationIcon","groupConversation","composeText","propTypes","bool","defaultProps","MessageItem","props","onSelectContact","value","idx","selected","parseInt","_userSelection","setState","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","viewSelectedContact","onViewContact","phoneNumber","getPhoneNumber","contact","createSelectedContact","entityType","onCreateContact","_mounted","isCreating","name","enableContactFallback","getFallbackContactName","onLogConversation","isLogging","correspondentEntity","conversationId","clickToDial","onClickToDial","showConversationDetail","e","captureClick","getInitialContactIndex","nextProps","lastMatchedCorrespondentEntity","index","findIndex","id","correspondents","extensionNumber","undefined","groupNumbers","map","correspondent","areaCode","countryCode","currentLocale","unreadCounts","creationTime","subject","disableLinks","disableClickToDial","dateTimeFormatter","getGroupPhoneNumbers","fallbackName","root","unread","contactDisplay","details","utcTimestamp","shape","string","isRequired","arrayOf","func","isLoggedContact","outboundSmsPermission","internalSmsPermission"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport ContactDisplay from '../ContactDisplay';\nimport ActionMenu from '../ActionMenu';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\n\nfunction ConversationIcon({\n  group,\n}) {\n  return (\n    <div className={styles.conversationIcon}>\n      <span\n        className={classnames(\n          group ? dynamicsFont.groupConversation : dynamicsFont.composeText\n        )} />\n    </div>\n  );\n}\nConversationIcon.propTypes = {\n  group: PropTypes.bool,\n};\nConversationIcon.defaultProps = {\n  group: false,\n};\n\nexport default class MessageItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n      isCreating: false,\n    };\n    this._userSelection = false;\n    /* [RCINT-4301] onSelection would trigger some state changes that would push new\n     * properties before the state has been changed. Which would reset the selected value.\n     */\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onSelectContact = (value, idx) => {\n    const selected = parseInt(idx, 10) - 1;\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n\n  getPhoneNumber() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n  getGroupPhoneNumbers() {\n    const correspondents = this.props.conversation.correspondents;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n  getFallbackContactName() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n  viewSelectedContact = () => {\n    if (typeof this.props.onViewContact === 'function') {\n      this.props.onViewContact({\n        phoneNumber: this.getPhoneNumber(),\n        contact: this.getSelectedContact(),\n      });\n    }\n  }\n  createSelectedContact = async (entityType) => {\n    // console.log('click createSelectedContact!!', entityType);\n    if (typeof this.props.onCreateContact === 'function' &&\n      this._mounted &&\n      !this.state.isCreating) {\n      this.setState({\n        isCreating: true,\n      });\n      // console.log('start to create: isCreating...', this.state.isCreating);\n      const phoneNumber = this.getPhoneNumber();\n      await this.props.onCreateContact({\n        phoneNumber,\n        name: this.props.enableContactFallback ? this.getFallbackContactName() : '',\n        entityType,\n      });\n\n      if (this._mounted) {\n        this.setState({\n          isCreating: false,\n        });\n        // console.log('created: isCreating...', this.state.isCreating);\n      }\n    }\n  }\n\n  logConversation = async ({ redirect = true, selected, prefill = true }) => {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted &&\n      !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n  clickToDial = () => {\n    if (this.props.onClickToDial) {\n      this.props.onClickToDial(this.getPhoneNumber());\n    }\n  }\n  showConversationDetail = (e) => {\n    if (e.captureClick === false) {\n      delete e.captureClick;\n      return;\n    }\n    this.props.showConversationDetail(this.props.conversation.conversationId);\n  }\n\n  render() {\n    const {\n      areaCode,\n      countryCode,\n      currentLocale,\n      conversation: {\n        unreadCounts,\n        correspondents,\n        correspondentMatches,\n        creationTime,\n        subject,\n        isLogging,\n        conversationMatches,\n      },\n      disableLinks,\n      disableClickToDial,\n      onClickToDial,\n      onLogConversation,\n      onViewContact,\n      onCreateContact,\n      dateTimeFormatter,\n      enableContactFallback,\n    } = this.props;\n\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          unreadCounts && styles.unread\n        )}\n        onClick={this.showConversationDetail}\n      >\n        <ConversationIcon group={correspondents.length > 1} />\n        <ContactDisplay\n          className={classnames(\n            styles.contactDisplay,\n            unreadCounts && styles.unread\n          )}\n          contactMatches={correspondentMatches}\n          selected={this.state.selected}\n          onSelectContact={this.onSelectContact}\n          disabled={disableLinks}\n          isLogging={isLogging || this.state.isLogging}\n          fallBackName={fallbackName}\n          areaCode={areaCode}\n          countryCode={countryCode}\n          phoneNumber={phoneNumber}\n          groupNumbers={groupNumbers}\n          currentLocale={currentLocale}\n          enableContactFallback={enableContactFallback}\n        />\n        <div className={styles.details}>\n          {dateTimeFormatter({ utcTimestamp: creationTime })} | {subject}\n        </div>\n        <ActionMenu\n          currentLocale={currentLocale}\n          onLog={onLogConversation && this.logConversation}\n          onViewEntity={onViewContact && this.viewSelectedContact}\n          onCreateEntity={onCreateContact && this.createSelectedContact}\n          hasEntity={correspondents.length === 1 && !!correspondentMatches.length}\n          onClickToDial={onClickToDial && this.clickToDial}\n          phoneNumber={phoneNumber}\n          disableLinks={disableLinks}\n          disableClickToDial={disableClickToDial}\n          isLogging={isLogging || this.state.isLogging}\n          isLogged={conversationMatches.length > 0}\n          isCreating={this.state.isCreating}\n        />\n      </div>\n    );\n  }\n}\n\nMessageItem.propTypes = {\n  conversation: PropTypes.shape({\n    conversationId: PropTypes.string.isRequired,\n    isLogging: PropTypes.bool,\n    correspondents: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      extensionNumber: PropTypes.string,\n    })),\n    correspondentMatches: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      entityType: PropTypes.string,\n    })),\n    conversationMatches: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string,\n    })),\n  }).isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onLogConversation: PropTypes.func,\n  onViewContact: PropTypes.func,\n  onCreateContact: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  isLoggedContact: PropTypes.func,\n  disableLinks: PropTypes.bool,\n  disableClickToDial: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  showConversationDetail: PropTypes.func.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n};\n\nMessageItem.defaultProps = {\n  onLogConversation: undefined,\n  onClickToDial: undefined,\n  onViewContact: undefined,\n  onCreateContact: undefined,\n  isLoggedContact: () => false,\n  disableClickToDial: false,\n  outboundSmsPermission: false,\n  internalSmsPermission: false,\n  disableLinks: false,\n  autoLog: false,\n  enableContactFallback: undefined,\n};\n"]}