{"version":3,"sources":["components/TransferPanel/index.js"],"names":["TransferPanel","props","onButtonOutput","key","state","recipient","setState","preState","value","toNumber","onTransfer","_getTransferNumber","onToNumberChange","clearToNumber","setRecipient","clearRecipient","disablePage","load","setActiveSessionId","sessionId","phoneNumber","activeSession","toggleTransferPanel","styles","root","i18n","getString","currentLocale","dialInput","searchContact","searchContactList","formatPhone","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","autoFocus","padContainer","dialPad","buttonRow","button","isOnTransfer","disabled","undefined","TransferIcon","PureComponent","propTypes","PropTypes","func","isRequired","string","array","bool","object","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { isNil } from 'ramda';\nimport DialPad from '../DialPad';\nimport RecipientsInput from '../RecipientsInput';\nimport BackHeader from '../BackHeader';\nimport CircleButton from '../CircleButton';\nimport TransferIcon from '../../assets/images/Transfer.svg';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nexport default class TransferPanel extends PureComponent {\n  static propTypes = {\n    setActiveSessionId: PropTypes.func,\n    onTransfer: PropTypes.func.isRequired,\n    currentLocale: PropTypes.string.isRequired,\n    toggleTransferPanel: PropTypes.func.isRequired,\n    searchContactList: PropTypes.array.isRequired,\n    searchContact: PropTypes.func.isRequired,\n    formatPhone: PropTypes.func.isRequired,\n    phoneTypeRenderer: PropTypes.func,\n    recipientsContactInfoRenderer: PropTypes.func,\n    recipientsContactPhoneRenderer: PropTypes.func,\n    isOnTransfer: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    sessionId: PropTypes.string.isRequired,\n    activeSession: PropTypes.object,\n    disablePage: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    setActiveSessionId: null,\n    phoneTypeRenderer: undefined,\n    recipientsContactInfoRenderer: undefined,\n    recipientsContactPhoneRenderer: undefined,\n    isOnTransfer: false,\n    autoFocus: true,\n    activeSession: null,\n    disablePage: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      toNumber: '',\n      recipient: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.disablePage) {\n      this.load();\n    }\n  }\n\n  load() {\n    this.props.setActiveSessionId(this.props.sessionId);\n  }\n\n  _getTransferNumber() {\n    return (\n      (this.state.recipient && this.state.recipient.phoneNumber) ||\n      this.state.toNumber\n    );\n  }\n\n  onButtonOutput = (key) => {\n    if (this.state.recipient) {\n      return;\n    }\n    this.setState((preState) => {\n      const value = preState.toNumber + key;\n      return { toNumber: value };\n    });\n  }\n\n  onTransfer = () => {\n    this.props.onTransfer(this._getTransferNumber());\n  }\n\n  onToNumberChange = (toNumber) => {\n    this.setState({\n      toNumber\n    });\n  }\n\n  clearToNumber = () => {\n    this.setState({\n      toNumber: '',\n    });\n  }\n\n  setRecipient = (recipient) => {\n    this.setState({\n      recipient,\n      toNumber: '',\n    });\n  }\n\n  clearRecipient = () => {\n    this.setState({ recipient: null });\n  }\n\n  render() {\n    if (this.props.disablePage && !this.props.activeSession) {\n      this.props.toggleTransferPanel();\n      return null;\n    }\n    return (\n      <div className={styles.root}>\n        <BackHeader\n          onBackClick={this.props.toggleTransferPanel}>\n          {i18n.getString('transferTo', this.props.currentLocale)}\n        </BackHeader>\n        <RecipientsInput\n          className={styles.dialInput}\n          value={this.state.toNumber}\n          onChange={this.onToNumberChange}\n          onClean={this.clearToNumber}\n          recipient={this.state.recipient}\n          addToRecipients={this.setRecipient}\n          removeFromRecipients={this.clearRecipient}\n          searchContact={this.props.searchContact}\n          searchContactList={this.props.searchContactList}\n          formatContactPhone={this.props.formatPhone}\n          currentLocale={this.props.currentLocale}\n          phoneTypeRenderer={this.props.phoneTypeRenderer}\n          contactInfoRenderer={this.props.recipientsContactInfoRenderer}\n          contactPhoneRenderer={this.props.recipientsContactPhoneRenderer}\n          titleEnabled\n          autoFocus={this.props.autoFocus}\n        />\n        <div className={styles.padContainer}>\n          <DialPad\n            className={styles.dialPad}\n            onButtonOutput={this.onButtonOutput}\n          />\n          <div className={styles.buttonRow}>\n            <div className={styles.button}>\n              <CircleButton\n                className={this.props.isOnTransfer ? styles.disabled : undefined}\n                onClick={this.onTransfer}\n                icon={TransferIcon}\n                disabled={this.props.isOnTransfer}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}