{"version":3,"sources":["components/ConversationPanel/index.js"],"names":["ConversationPanel","props","state","textValue","onTextChange","e","setState","currentTarget","value","handleSubmit","replyToReceivers","preventDefault","conversationBody","loading","showSpinner","recipients","spinerContainer","messages","length","root","header","backButton","iconArrowRight","messageForm","textField","getString","currentLocale","submitField","submitButton","sendButtonDisabled","propTypes","func","isRequired","bool","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;IAEMA,iB;;;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,4JACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,iBAAW;AADA,KAAb;AAGA,UAAKC,YAAL,GAAoB,UAACC,CAAD,EAAO;AACzB,YAAKC,QAAL,CAAc;AACZH,mBAAWE,EAAEE,aAAF,CAAgBC;AADf,OAAd;AAGD,KAJD;AAKA,UAAKC,YAAL,GAAoB,UAACJ,CAAD,EAAO;AACzB,YAAKJ,KAAL,CAAWS,gBAAX,CAA4B,MAAKR,KAAL,CAAWC,SAAvC;AACA,YAAKG,QAAL,CAAc;AACZH,mBAAW;AADC,OAAd;AAGAE,QAAEM,cAAF;AACD,KAND;AAViB;AAiBlB;;;;6BAEQ;AACP,UAAIC,mBAAmB,IAAvB;AACA,UAAMC,UAAU,KAAKZ,KAAL,CAAWa,WAA3B;AACA,UAAMC,aAAa,KAAKd,KAAL,CAAWc,UAA9B;AACA,UAAIF,OAAJ,EAAa;AACXD,2BACE;AAAA;AAAA,YAAK,WAAW,iBAAOI,eAAvB;AACE;AADF,SADF;AAKD,OAND,MAMO;AACLJ,2BACE;AACE,oBAAU,KAAKX,KAAL,CAAWgB,QADvB;AAEE,qBAAW,iBAAOL,gBAFpB;AAGE,oBAAUG,cAAcA,WAAWG,MAAX,GAAoB;AAH9C,UADF;AAOD;AACD,aACE;AAAA;AAAA,UAAK,WAAW,iBAAOC,IAAvB;AACE;AAAA;AAAA,YAAK,WAAW,iBAAOC,MAAvB;AACE;AAAA;AAAA;AACE,kBAAI,WADN;AAEE,yBAAW,iBAAOC;AAFpB;AAIE,oDAAM,WAAW,uBAAaC,cAA9B;AAJF,WADF;AAOE;AACE,wBAAYP;AADd;AAPF,SADF;AAYGH,wBAZH;AAaE;AAAA;AAAA,YAAK,WAAW,iBAAOW,WAAvB;AACE;AAAA;AAAA,cAAM,UAAU,KAAKd,YAArB;AACE;AAAA;AAAA,gBAAK,WAAW,iBAAOe,SAAvB;AACE;AACE,6BAAa,eAAKC,SAAL,CAAe,eAAf,EAAgC,KAAKxB,KAAL,CAAWyB,aAA3C,CADf;AAEE,uBAAO,KAAKxB,KAAL,CAAWC,SAFpB;AAGE,2BAAU,MAHZ;AAIE,0BAAU,KAAKC;AAJjB;AADF,aADF;AASE;AAAA;AAAA,gBAAK,WAAW,iBAAOuB,WAAvB;AACE;AACE,sBAAK,QADP;AAEE,uBAAO,eAAKF,SAAL,CAAe,MAAf,EAAuB,KAAKxB,KAAL,CAAWyB,aAAlC,CAFT;AAGE,2BAAW,iBAAOE,YAHpB;AAIE,0BACE,KAAK3B,KAAL,CAAW4B,kBAAX,IACAhB,OADA,IAEA,KAAKX,KAAL,CAAWC,SAAX,CAAqBe,MAArB,KAAgC;AAPpC;AADF;AATF;AADF;AAbF,OADF;AAwCD;;;;;AAGHlB,kBAAkB8B,SAAlB,GAA8B;AAC5BpB,oBAAkB,iBAAUqB,IAAV,CAAeC,UADL;AAE5Bf,YAAU,kCAAwBa,SAAxB,CAAkCb,QAFhB;AAG5BF,cAAY,2BAAiBe,SAAjB,CAA2Bf,UAHX;AAI5Bc,sBAAoB,iBAAUI,IAAV,CAAeD,UAJP;AAK5BN,iBAAe,iBAAUQ,MAAV,CAAiBF,UALJ;AAM5BlB,eAAa,iBAAUmB,IAAV,CAAeD;AANA,CAA9B;;kBASehC,iB","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { Link } from 'react-router';\n\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\n\nimport Spinner from '../Spinner';\nimport RecipientsHeader from '../RecipientsHeader';\nimport ConversationMessageList from '../ConversationMessageList';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nclass ConversationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textValue: '',\n    };\n    this.onTextChange = (e) => {\n      this.setState({\n        textValue: e.currentTarget.value,\n      });\n    };\n    this.handleSubmit = (e) => {\n      this.props.replyToReceivers(this.state.textValue);\n      this.setState({\n        textValue: '',\n      });\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    let conversationBody = null;\n    const loading = this.props.showSpinner;\n    const recipients = this.props.recipients;\n    if (loading) {\n      conversationBody = (\n        <div className={styles.spinerContainer}>\n          <Spinner />\n        </div>\n      );\n    } else {\n      conversationBody = (\n        <ConversationMessageList\n          messages={this.props.messages}\n          className={styles.conversationBody}\n          showFrom={recipients && recipients.length > 1}\n        />\n      );\n    }\n    return (\n      <div className={styles.root}>\n        <div className={styles.header}>\n          <Link\n            to={'/messages'}\n            className={styles.backButton}\n          >\n            <span className={dynamicsFont.iconArrowRight} />\n          </Link>\n          <RecipientsHeader\n            recipients={recipients}\n          />\n        </div>\n        {conversationBody}\n        <div className={styles.messageForm}>\n          <form onSubmit={this.handleSubmit}>\n            <div className={styles.textField}>\n              <textarea\n                placeholder={i18n.getString('typeAnyToSend', this.props.currentLocale)}\n                value={this.state.textValue}\n                maxLength=\"1000\"\n                onChange={this.onTextChange}\n              />\n            </div>\n            <div className={styles.submitField}>\n              <input\n                type=\"submit\"\n                value={i18n.getString('send', this.props.currentLocale)}\n                className={styles.submitButton}\n                disabled={\n                  this.props.sendButtonDisabled ||\n                  loading ||\n                  this.state.textValue.length === 0\n                }\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nConversationPanel.propTypes = {\n  replyToReceivers: PropTypes.func.isRequired,\n  messages: ConversationMessageList.propTypes.messages,\n  recipients: RecipientsHeader.propTypes.recipients,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n};\n\nexport default ConversationPanel;\n"]}