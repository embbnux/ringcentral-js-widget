{"version":3,"sources":["components/ConversationPanel/index.js"],"names":["ConversationPanel","props","onSelectContact","value","idx","selected","parseInt","_userSelection","setState","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","onLogConversation","_mounted","isLogging","correspondentEntity","conversationId","textValue","getInitialContactIndex","onTextChange","e","currentTarget","handleSubmit","replyToReceivers","preventDefault","onTextAreaKeyDown","key","nextProps","lastMatchedCorrespondentEntity","index","findIndex","contact","id","correspondents","phoneNumber","extensionNumber","undefined","groupNumbers","map","correspondent","name","conversationBody","loading","showSpinner","recipients","spinerContainer","messages","dateTimeFormatter","getGroupPhoneNumbers","getPhoneNumber","fallbackName","getFallbackContactName","logButton","disableLinks","currentLocale","root","header","contactDisplay","areaCode","countryCode","enableContactFallback","backButton","arrow","messageForm","textField","getString","submitField","submitButton","sendButtonDisabled","propTypes","func","isRequired","bool","string","object","isLoggedContact","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { Link } from 'react-router';\n\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\n\nimport Spinner from '../Spinner';\nimport RecipientsHeader from '../RecipientsHeader';\nimport ConversationMessageList from '../ConversationMessageList';\nimport LogButton from '../LogButton';\nimport ContactDisplay from '../ContactDisplay';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nclass ConversationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textValue: '',\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n\n    };\n    this._userSelection = false;\n    this.onTextChange = (e) => {\n      this.setState({\n        textValue: e.currentTarget.value,\n      });\n    };\n    this.handleSubmit = (e) => {\n      this.props.replyToReceivers(this.state.textValue);\n      this.setState({\n        textValue: '',\n      });\n      e.preventDefault();\n    };\n    this.onTextAreaKeyDown = (e) => {\n      if (e.key === 'Enter') {\n        this.props.replyToReceivers(this.state.textValue);\n        this.setState({\n          textValue: '',\n        });\n        e.preventDefault();\n      }\n    };\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onSelectContact = (value, idx) => {\n    const selected = parseInt(idx, 10) - 1;\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n  getPhoneNumber() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n  getGroupPhoneNumbers() {\n    const correspondents = this.props.conversation.correspondents;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n  getFallbackContactName() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n  logConversation = async ({ redirect = true, selected, prefill = true }) => {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted &&\n      !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n\n  render() {\n    let conversationBody = null;\n    const loading = this.props.showSpinner;\n    const recipients = this.props.recipients;\n    if (loading) {\n      conversationBody = (\n        <div className={styles.spinerContainer}>\n          <Spinner />\n        </div>\n      );\n    } else {\n      conversationBody = (\n        <ConversationMessageList\n          messages={this.props.messages}\n          className={styles.conversationBody}\n          dateTimeFormatter={this.props.dateTimeFormatter}\n          showFrom={recipients && recipients.length > 1}\n        />\n      );\n    }\n    const {\n      isLogging,\n      conversationMatches,\n      correspondentMatches,\n    } = this.props.conversation;\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    const logButton = this.props.onLogConversation ?\n      (\n        <LogButton\n          className={styles.logButton}\n          onLog={this.logConversation}\n          disableLinks={this.props.disableLinks}\n          isLogged={conversationMatches.length > 0}\n          isLogging={isLogging || this.state.isLogging}\n          currentLocale={this.props.currentLocale}\n        />\n      ) :\n      null;\n    return (\n      <div className={styles.root}>\n        <div className={styles.header}>\n          <ContactDisplay\n            className={styles.contactDisplay}\n            contactMatches={correspondentMatches}\n            selected={this.state.selected}\n            onSelectContact={this.onSelectContact}\n            disabled={this.props.disableLinks}\n            isLogging={isLogging || this.state.isLogging}\n            fallBackName={fallbackName}\n            areaCode={this.props.areaCode}\n            countryCode={this.props.countryCode}\n            phoneNumber={phoneNumber}\n            groupNumbers={groupNumbers}\n            currentLocale={this.props.currentLocale}\n            enableContactFallback={this.props.enableContactFallback}\n          />\n          <Link\n            to={'/messages'}\n            className={styles.backButton}\n          >\n            <span className={dynamicsFont.arrow} />\n          </Link>\n          {logButton}\n        </div>\n        {conversationBody}\n        <div className={styles.messageForm}>\n          <form onSubmit={this.handleSubmit}>\n            <div className={styles.textField}>\n              <textarea\n                placeholder={i18n.getString('typeMessage', this.props.currentLocale)}\n                value={this.state.textValue}\n                maxLength=\"1000\"\n                onChange={this.onTextChange}\n                onKeyDown={this.onTextAreaKeyDown}\n              />\n            </div>\n            <div className={styles.submitField}>\n              <input\n                type=\"submit\"\n                value={i18n.getString('send', this.props.currentLocale)}\n                className={styles.submitButton}\n                disabled={\n                  this.props.disableLinks ||\n                  this.props.sendButtonDisabled ||\n                  loading ||\n                  this.state.textValue.length === 0\n                }\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nConversationPanel.propTypes = {\n  replyToReceivers: PropTypes.func.isRequired,\n  messages: ConversationMessageList.propTypes.messages,\n  recipients: RecipientsHeader.propTypes.recipients,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  disableLinks: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  isLoggedContact: PropTypes.func,\n  onLogConversation: PropTypes.func,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n};\nConversationPanel.defaultProps = {\n  disableLinks: false,\n  isLoggedContact: undefined,\n  onLogConversation: undefined,\n  autoLog: false,\n  enableContactFallback: undefined,\n};\n\nexport default ConversationPanel;\n"]}