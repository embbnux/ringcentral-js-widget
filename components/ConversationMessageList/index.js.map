{"version":3,"sources":["components/ConversationMessageList/index.js"],"names":["Message","subject","time","direction","sender","message","messageBody","outbound","inbound","length","big","clear","propTypes","string","isRequired","defaultProps","undefined","ConversationMessageList","scrollToLastMessage","conversationBody","scrollTop","scrollHeight","previousProps","messages","props","className","dateTimeFormatter","showSender","lastDate","messageList","map","from","name","context","formatPhone","extensionNumber","phoneNumber","date","Date","creationTime","getHours","utcTimestamp","type","id","root","body","PropTypes","arrayOf","shape","number","bool","func","contextTypes"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport classnames from 'classnames';\n\nimport styles from './styles.scss';\n\nfunction Message({\n  subject,\n  time,\n  direction,\n  sender,\n}) {\n  return (\n    <div className={styles.message}>\n      {\n        time ?\n          (\n            <div className={styles.time}>\n              {time}\n            </div>\n          ) :\n          null\n      }\n      {\n        (sender && direction === 'Inbound') ?\n          (\n            <div className={styles.sender}>\n              {sender}\n            </div>\n          ) :\n          null\n      }\n      <div\n        className={classnames(\n          styles.messageBody,\n          direction === 'Outbound' ? styles.outbound : styles.inbound,\n          (subject && subject.length > 500) && styles.big,\n        )}>\n        {subject}\n      </div>\n      <div className={styles.clear} />\n    </div>\n  );\n}\n\nMessage.propTypes = {\n  direction: PropTypes.string.isRequired,\n  subject: PropTypes.string,\n  time: PropTypes.string,\n  sender: PropTypes.string,\n};\n\nMessage.defaultProps = {\n  subject: '',\n  sender: undefined,\n  time: undefined,\n};\n\nclass ConversationMessageList extends Component {\n  componentDidMount() {\n    this.scrollToLastMessage();\n  }\n\n  componentDidUpdate(previousProps) {\n    if (previousProps.messages.length !== this.props.messages.length) {\n      this.scrollToLastMessage();\n    }\n  }\n  scrollToLastMessage = () => {\n    if (this.conversationBody) {\n      this.conversationBody.scrollTop = this.conversationBody.scrollHeight;\n    }\n  }\n  render() {\n    const {\n      className,\n      dateTimeFormatter,\n      messages,\n      showSender,\n    } = this.props;\n\n    let lastDate = 0;\n    const messageList = messages.map((message) => {\n      const sender = showSender ?\n        (\n          messages.from.name ||\n          this.context.formatPhone(message.from.extensionNumber || message.from.phoneNumber)\n        ) :\n        null;\n      const date = new Date(message.creationTime);\n      const time = (date - lastDate < 60 * 60 * 1000 && date.getHours() === lastDate.getHours()) ?\n        null :\n        dateTimeFormatter({ utcTimestamp: message.creationTime, type: 'long' });\n      lastDate = date;\n      return (\n        <Message\n          key={message.id}\n          sender={sender}\n          time={time}\n          direction={message.direction}\n          subject={message.subject}\n        />\n      );\n    });\n    return (\n      <div\n        className={classnames(styles.root, className)}\n        ref={(body) => { this.conversationBody = body; }}\n      >\n        {messageList}\n      </div>\n    );\n  }\n}\n\nConversationMessageList.propTypes = {\n  messages: React.PropTypes.arrayOf(PropTypes.shape({\n    creationTime: PropTypes.string,\n    id: PropTypes.number,\n    direction: PropTypes.string,\n    subject: PropTypes.string,\n  })).isRequired,\n  className: PropTypes.string,\n  showSender: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n};\n\nConversationMessageList.defaultProps = {\n  className: null,\n  showSender: false,\n};\n\nConversationMessageList.contextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n};\n\nexport default ConversationMessageList;\n"]}