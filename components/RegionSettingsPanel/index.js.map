{"version":3,"sources":["components/RegionSettingsPanel/index.js"],"names":["RegionSettings","props","onAreaCodeChange","e","value","currentTarget","replace","state","areaCodeValue","setState","onCountryCodeChange","option","isoCode","countryCodeValue","onResetClick","areaCode","countryCode","onSaveClick","onSave","onBackClick","onBackButtonClick","renderHandler","callingCode","getString","currentLocale","renderValue","selectedOption","availableCountries","find","country","nextProps","buttons","hasChanges","push","label","onClick","placement","hidden","disabled","hasNA","c","messageId","length","showAreaCode","root","className","content","hint","inputField","select","children","propTypes","string","node","func","isRequired","arrayOf","shape"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport 'font-awesome/css/font-awesome.css';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Line from '../Line';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport Select from '../DropdownSelect';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\nimport countryNames from '../../lib/countryNames';\n\nexport default class RegionSettings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countryCodeValue: props.countryCode,\n      areaCodeValue: props.areaCode,\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.areaCode !== this.props.areaCode) {\n      this.setState({\n        areaCodeValue: nextProps.areaCode,\n      });\n    }\n    if (nextProps.countryCode !== this.props.countryCode) {\n      this.setState({\n        countryCodeValue: nextProps.countryCode,\n      });\n    }\n  }\n  onAreaCodeChange = (e) => {\n    const value = e.currentTarget.value.replace(/[^\\d]/g, '');\n    if (value !== this.state.areaCodeValue) {\n      this.setState({\n        areaCodeValue: value,\n      });\n    }\n  }\n  onCountryCodeChange = (option) => {\n    const value = option.isoCode;\n    if (value !== this.state.countryCodeValue) {\n      this.setState({\n        countryCodeValue: value,\n      });\n    }\n  }\n  onResetClick = () => {\n    this.setState({\n      areaCodeValue: this.props.areaCode,\n      countryCodeValue: this.props.countryCode,\n    });\n  }\n  onSaveClick = () => {\n    if (typeof this.props.onSave === 'function') {\n      this.props.onSave({\n        areaCode: this.state.areaCodeValue,\n        countryCode: this.state.countryCodeValue,\n      });\n    }\n  }\n  onBackClick = () => {\n    if (typeof this.props.onBackButtonClick === 'function') {\n      this.props.onBackButtonClick();\n    }\n  }\n  renderHandler = option =>\n    `(+${option.callingCode}) ${countryNames.getString(option.isoCode, this.props.currentLocale)}`\n\n  renderValue = (value) => {\n    // console.debug('renderValue:', value, this.props.availableCountries);\n    const selectedOption = this.props.availableCountries.find(\n      country => country.isoCode === value\n    );\n\n    return `(+${selectedOption.callingCode})\n        ${countryNames.getString(selectedOption.isoCode, this.props.currentLocale)}`;\n  }\n\n  render() {\n    const buttons = [];\n    const hasChanges = this.state.areaCodeValue !== this.props.areaCode ||\n      this.state.countryCodeValue !== this.props.countryCode;\n    if (this.props.onBackButtonClick) {\n      buttons.push({\n        label: <i className=\"fa fa-undo\" />,\n        onClick: this.onResetClick,\n        placement: 'right',\n        hidden: !hasChanges,\n      });\n      buttons.push({\n        label: <i className=\"fa fa-floppy-o\" />,\n        onClick: this.onSaveClick,\n        placement: 'right',\n        disabled: !hasChanges,\n      });\n    }\n    const hasNA = !!this.props.availableCountries.find(c => c.isoCode === 'US') ||\n      !!this.props.availableCountries.find(c => c.isoCode === 'CA');\n    let messageId;\n    if (this.props.availableCountries.length > 1) {\n      if (hasNA) {\n        messageId = 'MultiWithNAMessage';\n      } else {\n        messageId = 'MultiWithoutNAMessage';\n      }\n    } else if (hasNA) {\n      messageId = 'NAOnlyMessage';\n    }\n    const showAreaCode = this.state.countryCodeValue === 'US' ||\n      this.state.countryCodeValue === 'CA';\n\n    return (\n      <div className={classnames(styles.root, this.props.className)}>\n        <BackHeader\n          buttons={buttons}\n          onBackClick={this.onBackClick}\n          >\n          {i18n.getString('title', this.props.currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          <div className={styles.hint}>\n            {i18n.getString(messageId, this.props.currentLocale)}\n          </div>\n          <InputField\n            className={styles.inputField}\n            label={i18n.getString('country', this.props.currentLocale)}>\n            <Select\n              className={styles.select}\n              value={this.state.countryCodeValue}\n              onChange={this.onCountryCodeChange}\n              options={this.props.availableCountries}\n              dropdownAlign=\"left\"\n              valueFunction={option => option.isoCode}\n              renderFunction={this.renderHandler}\n              renderValue={this.renderValue}\n            />\n          </InputField>\n          {showAreaCode && (\n            <InputField\n              className={styles.inputField}\n              label={i18n.getString('areaCode', this.props.currentLocale)}>\n              <TextInput\n                placeholder={i18n.getString('areaCodePlaceholder', this.props.currentLocale)}\n                maxLength={3}\n                value={this.state.areaCodeValue}\n                onChange={this.onAreaCodeChange} />\n            </InputField>\n          )}\n          {this.props.children}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nRegionSettings.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  onBackButtonClick: PropTypes.func,\n  currentLocale: PropTypes.string.isRequired,\n  availableCountries: PropTypes.arrayOf(PropTypes.shape({\n    isoCode: PropTypes.string,\n    callingCode: PropTypes.string,\n  })).isRequired,\n  countryCode: PropTypes.string.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  onSave: PropTypes.func,\n};\n"]}