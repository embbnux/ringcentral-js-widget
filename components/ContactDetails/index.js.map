{"version":3,"sources":["components/ContactDetails/index.js"],"names":["getPresenceStatusName","presence","currentLocale","presenceStatus","dndStatus","DndStatus","doNotAcceptAnyCalls","i18n","getString","AvatarNode","name","avatarUrl","isInactive","avatarStyle","styles","inactiveAvatarNode","avatarNode","propTypes","PropTypes","string","bool","defaultProps","undefined","ContactDetails","onClickToDial","contact","phoneNumber","props","onClickToSMS","onClickMailTo","email","contactType","renderPresence","contactStatus","presenceName","inactiveText","presenceNodeContainer","presenceNode","contactItem","sourceNodeRenderer","profileImageUrl","type","sourceNode","sourceType","contactProfile","avatar","avatarNodeContainer","sourceNodeContainer","info","nameWithoutPresence","color","fontSize","extensionNumber","textBtn","internalSmsPermission","dynamicsFont","composeText","callBtn","call","item","label","number","menu","phoneNumbers","phoneNumberListView","map","index","phoneType","formattedPhoneNumber","formatNumber","outboundSmsPermission","filter","v","length","emails","hasMailToHandler","emailListView","underline","extensionCellView","renderExtensionCell","directNumberCellView","renderDirectNumberCell","root","profile","renderProfile","contacts","renderEmailCell","PureComponent","contactItemPropTypes","id","oneOfType","isRequired","firstName","lastName","arrayOf","shape","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DndStatus from 'ringcentral-integration/modules/Presence/dndStatus';\nimport PresenceStatusIcon from '../PresenceStatusIcon';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport DefaultAvatar from '../../assets/images/DefaultAvatar.svg';\n// import FaxIcon from '../../assets/images/Fax.svg';\nimport i18n from './i18n';\n\nimport styles from './styles.scss';\n\nexport function getPresenceStatusName(presence, currentLocale) {\n  const { presenceStatus, dndStatus } = presence;\n  if (dndStatus === DndStatus.doNotAcceptAnyCalls) {\n    return i18n.getString(dndStatus, currentLocale);\n  }\n  return i18n.getString(presenceStatus, currentLocale);\n}\n\nfunction AvatarNode({ name, avatarUrl, isInactive }) {\n  const avatarStyle = isInactive ? styles.inactiveAvatarNode : styles.avatarNode;\n  return avatarUrl ? (\n    <img className={avatarStyle} alt={name} src={avatarUrl} />\n  ) : (\n    <DefaultAvatar className={avatarStyle} />\n  );\n}\nAvatarNode.propTypes = {\n  name: PropTypes.string,\n  avatarUrl: PropTypes.string,\n  isInactive: PropTypes.bool,\n};\nAvatarNode.defaultProps = {\n  name: undefined,\n  avatarUrl: undefined,\n  isInactive: false,\n};\n\nexport default class ContactDetails extends PureComponent {\n  onClickToDial = (contact, phoneNumber) => {\n    this.props.onClickToDial({\n      ...contact,\n      phoneNumber\n    });\n  };\n\n  onClickToSMS = (contact, phoneNumber) => {\n    this.props.onClickToSMS({\n      ...contact,\n      phoneNumber\n    });\n  };\n\n  onClickMailTo = (email, contactType) => {\n    if (typeof this.props.onClickMailTo === 'function') {\n      this.props.onClickMailTo(email, contactType);\n    }\n  };\n\n  renderPresence = (contactStatus, presence, presenceName, currentLocale) => {\n    if (contactStatus === 'NotActivated') {\n      return (\n        <div className={styles.presence}>\n          <div>\n            <span className={styles.inactiveText}>\n              {i18n.getString('notActivated', currentLocale)}\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    return presence ? (\n      <div className={styles.presence}>\n        <div className={styles.presenceNodeContainer}>\n          <PresenceStatusIcon className={styles.presenceNode} {...presence} />\n        </div>\n        <span className={styles.presenceStatus}>{presenceName}</span>\n      </div>\n    ) : null;\n  };\n\n  renderProfile() {\n    const { contactItem, sourceNodeRenderer, currentLocale } = this.props;\n    const {\n      name,\n      presence,\n      profileImageUrl,\n      type,\n      contactStatus\n    } = contactItem;\n    const sourceNode = sourceNodeRenderer({ sourceType: type });\n    const presenceName = presence\n      ? getPresenceStatusName(presence, currentLocale)\n      : null;\n    return (\n      <div className={styles.contactProfile}>\n        <div className={styles.avatar}>\n          <div className={styles.avatarNodeContainer}>\n            <AvatarNode name={name} avatarUrl={profileImageUrl} isInactive={contactStatus === 'NotActivated'} />\n            {sourceNode ? (\n              <div className={styles.sourceNodeContainer}>{sourceNode}</div>\n            ) : null}\n          </div>\n        </div>\n        <div className={styles.info}>\n          <div\n            className={classnames(\n              styles.name,\n              !presence ? styles.nameWithoutPresence : null\n            )}\n          >\n            <span style={contactStatus === 'NotActivated' ? { color: '#999999', fontSize: '12px' } : null} title={name}>{name}</span>\n          </div>\n          {this.renderPresence(\n            contactStatus,\n            presence,\n            presenceName,\n            currentLocale\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  renderExtensionCell() {\n    const { contactItem, currentLocale } = this.props;\n    const { extensionNumber } = contactItem;\n    if (!extensionNumber) return null;\n    const textBtn = this.props.internalSmsPermission ? (\n      <button\n        title={i18n.getString('text', currentLocale)}\n        onClick={() => this.onClickToSMS(contactItem, extensionNumber)}\n      >\n        <i className={dynamicsFont.composeText} />\n      </button>\n    ) : null;\n    const callBtn = this.props.onClickToDial ? (\n      <button\n        title={i18n.getString('call', currentLocale)}\n        onClick={() => this.onClickToDial(contactItem, extensionNumber)}\n      >\n        <i className={dynamicsFont.call} />\n      </button>\n    ) : null;\n    return (\n      <div className={styles.item}>\n        <div className={styles.label}>\n          <span>{i18n.getString('extensionLabel', currentLocale)}</span>\n        </div>\n        <ul>\n          <li>\n            <div className={styles.number}>\n              <span title={extensionNumber}>{extensionNumber}</span>\n            </div>\n            <div className={styles.menu}>\n              {callBtn}\n              {textBtn}\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  renderDirectNumberCell() {\n    const { contactItem, currentLocale } = this.props;\n    const { phoneNumbers } = contactItem;\n    const phoneNumberListView = phoneNumbers\n      .map(({ phoneType, phoneNumber }, index) => {\n        if (phoneType === 'extension') return null;\n        const formattedPhoneNumber = this.props.formatNumber(phoneNumber);\n        const textBtn = this.props.outboundSmsPermission ? (\n          <button\n            title={i18n.getString('text', currentLocale)}\n            onClick={() => this.onClickToSMS(contactItem, phoneNumber)}\n          >\n            <i className={dynamicsFont.composeText} />\n          </button>\n        ) : null;\n        const callBtn = this.props.onClickToDial ? (\n          <button\n            title={i18n.getString('call', currentLocale)}\n            onClick={() => this.onClickToDial(contactItem, phoneNumber)}\n          >\n            <i className={dynamicsFont.call} />\n          </button>\n        ) : null;\n        return (\n          <li key={index}>\n            <div className={styles.number}>\n              <span title={formattedPhoneNumber}>{formattedPhoneNumber}</span>\n            </div>\n            <div className={styles.menu}>\n              {callBtn}\n              {textBtn}\n            </div>\n          </li>\n        );\n      })\n      .filter(v => !!v);\n    if (phoneNumberListView.length <= 0) return null;\n    return (\n      <div className={styles.item}>\n        <div className={styles.label}>\n          <span>{i18n.getString('directLabel', currentLocale)}</span>\n        </div>\n        <ul>{phoneNumberListView}</ul>\n      </div>\n    );\n  }\n\n  renderEmailCell() {\n    const { onClickMailTo } = this.props;\n    const { emails, type } = this.props.contactItem;\n    if (!emails || emails.length <= 0) return null;\n    const hasMailToHandler = typeof onClickMailTo === 'function';\n    const emailListView = emails.map((email, index) => (\n      <li key={index}>\n        <a\n          title={email}\n          className={hasMailToHandler ? styles.underline : null}\n          onClick={() => this.onClickMailTo(email, type)}\n        >\n          {email}\n        </a>\n      </li>\n    ));\n    return (\n      <div>\n        <div className={styles.label}>\n          <span>{i18n.getString('emailLabel', this.props.currentLocale)}</span>\n        </div>\n        <ul>{emailListView}</ul>\n      </div>\n    );\n  }\n\n  render() {\n    const extensionCellView = this.renderExtensionCell();\n    const directNumberCellView = this.renderDirectNumberCell();\n    return (\n      <div className={styles.root}>\n        <div className={styles.profile}>{this.renderProfile()}</div>\n        {extensionCellView || directNumberCellView ? (\n          <div className={styles.contacts}>\n            {extensionCellView}\n            {directNumberCellView}\n          </div>\n        ) : null}\n        <div className={styles.email}>{this.renderEmailCell()}</div>\n      </div>\n    );\n  }\n}\n\nexport const contactItemPropTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  email: PropTypes.string,\n  profileImageUrl: PropTypes.string,\n  phoneNumbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      phoneNumber: PropTypes.string,\n      phoneType: PropTypes.string\n    })\n  ),\n  contactStatus: PropTypes.string\n};\n\nContactDetails.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactItem: PropTypes.shape(contactItemPropTypes).isRequired,\n  sourceNodeRenderer: PropTypes.func,\n  onClickToSMS: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  onClickMailTo: PropTypes.func,\n  formatNumber: PropTypes.func.isRequired,\n  outboundSmsPermission: PropTypes.bool,\n  internalSmsPermission: PropTypes.bool\n};\n\nContactDetails.defaultProps = {\n  onClickToSMS: undefined,\n  onClickToDial: undefined,\n  onClickMailTo: undefined,\n  sourceNodeRenderer: () => null,\n  outboundSmsPermission: false,\n  internalSmsPermission: false\n};\n"]}