{"version":3,"sources":["components/NavigationBar/index.js"],"names":["NavigationButton","props","path","navigationButton","active","width","iconHolder","icon","noticeCounts","notice","labelHolder","label","propTypes","node","string","bool","number","oneOfType","isRequired","NavigationBar","tabWidth","tabs","length","root","className","map","t","idx","isActive","currentPath","arrayOf","shape","func","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAGA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SACE;AAAA;AAAA;AACE,UAAIA,MAAMC,IADZ;AAEE,iBAAW,0BACT,iBAAOC,gBADE,EAETF,MAAMG,MAAN,IAAgB,iBAAOA,MAFd,CAFb;AAME,aAAO;AACLC,eAAOJ,MAAMI;AADR;AANT;AAUE;AAAA;AAAA,QAAK,WAAW,iBAAOC,UAAvB;AACE;AAAA;AAAA,UAAK,WAAW,iBAAOC,IAAvB;AACGN,cAAMM;AADT,OADF;AAKIN,YAAMO,YAAN,IACAP,MAAMO,YAAN,GAAqB,CADrB,IAEA;AAAA;AAAA,UAAK,WAAW,iBAAOC,MAAvB;AAAgCR,cAAMO;AAAtC;AAPJ,KAVF;AAoBE;AAAA;AAAA,QAAK,WAAW,iBAAOE,WAAvB;AACE;AAAA;AAAA,UAAK,WAAW,iBAAOC,KAAvB;AACGV,cAAMU;AADT;AADF;AApBF,GADF;AA4BD;AACDX,iBAAiBY,SAAjB,GAA6B;AAC3BL,QAAM,iBAAUM,IADW;AAE3BX,QAAM,iBAAUY,MAFW;AAG3BV,UAAQ,iBAAUW,IAHS;AAI3BJ,SAAO,iBAAUG,MAJU;AAK3BN,gBAAc,iBAAUQ,MALG;AAM3BX,SAAO,iBAAUY,SAAV,CAAoB,CACzB,iBAAUD,MADe,EAEzB,iBAAUF,MAFe,CAApB,EAGJI;AATwB,CAA7B;;AAYA,SAASC,aAAT,CAAuBlB,KAAvB,EAA8B;AAC5B,MAAMmB,WAAWnB,MAAMoB,IAAN,CAAWC,MAAX,GAAoB,CAApB,GACX,IAAIrB,MAAMoB,IAAN,CAAWC,MAAhB,GAA0B,GADd,SAEf,CAFF;AAGA,SACE;AAAA;AAAA,MAAK,WAAW,0BAAW,iBAAOC,IAAlB,EAAwBtB,MAAMuB,SAA9B,CAAhB;AAEIvB,UAAMoB,IAAN,CAAWI,GAAX,CAAe,UAACC,CAAD,EAAIC,GAAJ;AAAA,aACb,8BAAC,gBAAD,6BACMD,CADN;AAEE,aAAKC,GAFP;AAGE,gBACGD,EAAEE,QAAF,IAAcF,EAAEE,QAAF,CAAW3B,MAAM4B,WAAjB,CAAf,IACAH,EAAExB,IAAF,KAAWD,MAAM4B,WALrB;AAOE,eAAOT;AAPT,SADa;AAAA,KAAf;AAFJ,GADF;AAiBD;AACDD,cAAcP,SAAd,GAA0B;AACxBY,aAAW,iBAAUV,MADG;AAExBO,QAAM,iBAAUS,OAAV,CAAkB,iBAAUC,KAAV,CAAgB;AACtCxB,UAAM,iBAAUM,IAAV,CAAeK,UADiB;AAEtCP,WAAO,iBAAUG,MAFqB;AAGtCZ,UAAM,iBAAUY,MAAV,CAAiBI,UAHe;AAItCU,cAAU,iBAAUI,IAJkB;AAKtCxB,kBAAc,iBAAUQ;AALc,GAAhB,CAAlB,CAFkB;AASxBa,eAAa,iBAAUf,MAAV,CAAiBI;AATN,CAA1B;AAWAC,cAAcc,YAAd,GAA6B;AAC3BZ,QAAM;AADqB,CAA7B;;kBAIeF,a","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { Link } from 'react-router';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\n\nfunction NavigationButton(props) {\n  return (\n    <Link\n      to={props.path}\n      className={classnames(\n        styles.navigationButton,\n        props.active && styles.active,\n      )}\n      style={{\n        width: props.width,\n      }}\n    >\n      <div className={styles.iconHolder}>\n        <div className={styles.icon}>\n          {props.icon}\n        </div>\n        {\n          props.noticeCounts &&\n          props.noticeCounts > 0 &&\n          <div className={styles.notice}>{props.noticeCounts}</div>\n        }\n      </div>\n      <div className={styles.labelHolder}>\n        <div className={styles.label}>\n          {props.label}\n        </div>\n      </div>\n    </Link>\n  );\n}\nNavigationButton.propTypes = {\n  icon: PropTypes.node,\n  path: PropTypes.string,\n  active: PropTypes.bool,\n  label: PropTypes.string,\n  noticeCounts: PropTypes.number,\n  width: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nfunction NavigationBar(props) {\n  const tabWidth = props.tabs.length > 0 ?\n    `${(1 / props.tabs.length) * 100}%` :\n    0;\n  return (\n    <nav className={classnames(styles.root, props.className)}>\n      {\n        props.tabs.map((t, idx) => (\n          <NavigationButton\n            {...t}\n            key={idx}\n            active={\n              (t.isActive && t.isActive(props.currentPath)) ||\n              t.path === props.currentPath\n            }\n            width={tabWidth}\n          />\n        ))\n      }\n    </nav>\n  );\n}\nNavigationBar.propTypes = {\n  className: PropTypes.string,\n  tabs: PropTypes.arrayOf(PropTypes.shape({\n    icon: PropTypes.node.isRequired,\n    label: PropTypes.string,\n    path: PropTypes.string.isRequired,\n    isActive: PropTypes.func,\n    noticeCounts: PropTypes.number,\n  })),\n  currentPath: PropTypes.string.isRequired,\n};\nNavigationBar.defaultProps = {\n  tabs: [],\n};\n\nexport default NavigationBar;\n"]}