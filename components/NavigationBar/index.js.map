{"version":3,"sources":["components/NavigationBar/index.js"],"names":["NavigationButton","props","notice","noticeCounts","notices","path","navigationButton","active","width","iconHolder","label","icon","activityIcon","propTypes","node","string","bool","number","oneOfType","isRequired","NavigationBar","tabWidth","tabs","length","root","className","map","t","idx","isActive","currentPath","arrayOf","shape","func","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAGA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,MAAIC,SAAS,IAAb;AACA,MAAID,MAAME,YAAN,IAAsBF,MAAME,YAAN,GAAqB,CAA/C,EAAkD;AAChD,QAAIF,MAAME,YAAN,GAAqB,EAAzB,EAA6B;AAC3BD,eAAS;AAAA;AAAA,UAAK,WAAW,iBAAOE,OAAvB;AAAA;AAAA,OAAT;AACD,KAFD,MAEO;AACLF,eAAS;AAAA;AAAA,UAAK,WAAW,iBAAOA,MAAvB;AAAgCD,cAAME;AAAtC,OAAT;AACD;AACF;AACD,SACE;AAAA;AAAA;AACE,UAAIF,MAAMI,IADZ;AAEE,iBAAW,0BACT,iBAAOC,gBADE,EAETL,MAAMM,MAAN,IAAgB,iBAAOA,MAFd,CAFb;AAME,aAAO;AACLC,eAAOP,MAAMO;AADR;AANT;AAUE;AAAA;AAAA,QAAK,WAAW,iBAAOC,UAAvB,EAAmC,OAAOR,MAAMS,KAAhD;AACE;AAAA;AAAA,UAAK,WAAW,iBAAOC,IAAvB;AACGV,cAAMM,MAAN,GAAeN,MAAMW,YAArB,GAAoCX,MAAMU;AAD7C,OADF;AAIGT;AAJH;AAVF,GADF;AAmBD;AACDF,iBAAiBa,SAAjB,GAA6B;AAC3BF,QAAM,iBAAUG,IADW;AAE3BF,gBAAc,iBAAUE,IAFG;AAG3BT,QAAM,iBAAUU,MAHW;AAI3BR,UAAQ,iBAAUS,IAJS;AAK3BN,SAAO,iBAAUK,MALU;AAM3BZ,gBAAc,iBAAUc,MANG;AAO3BT,SAAO,iBAAUU,SAAV,CAAoB,CACzB,iBAAUD,MADe,EAEzB,iBAAUF,MAFe,CAApB,EAGJI;AAVwB,CAA7B;;AAaA,SAASC,aAAT,CAAuBnB,KAAvB,EAA8B;AAC5B,MAAMoB,WAAWpB,MAAMqB,IAAN,CAAWC,MAAX,GAAoB,CAApB,GACX,IAAItB,MAAMqB,IAAN,CAAWC,MAAhB,GAA0B,GADd,SAEf,CAFF;AAGA,SACE;AAAA;AAAA,MAAK,WAAW,0BAAW,iBAAOC,IAAlB,EAAwBvB,MAAMwB,SAA9B,CAAhB;AAEIxB,UAAMqB,IAAN,CAAWI,GAAX,CAAe,UAACC,CAAD,EAAIC,GAAJ;AAAA,aACb,8BAAC,gBAAD,6BACMD,CADN;AAEE,aAAKC,GAFP;AAGE,gBACGD,EAAEE,QAAF,IAAcF,EAAEE,QAAF,CAAW5B,MAAM6B,WAAjB,CAAf,IACAH,EAAEtB,IAAF,KAAWJ,MAAM6B,WALrB;AAOE,eAAOT;AAPT,SADa;AAAA,KAAf;AAFJ,GADF;AAiBD;AACDD,cAAcP,SAAd,GAA0B;AACxBY,aAAW,iBAAUV,MADG;AAExBO,QAAM,iBAAUS,OAAV,CAAkB,iBAAUC,KAAV,CAAgB;AACtCrB,UAAM,iBAAUG,IAAV,CAAeK,UADiB;AAEtCP,kBAAc,iBAAUE,IAAV,CAAeK,UAFS;AAGtCT,WAAO,iBAAUK,MAHqB;AAItCV,UAAM,iBAAUU,MAAV,CAAiBI,UAJe;AAKtCU,cAAU,iBAAUI,IALkB;AAMtC9B,kBAAc,iBAAUc;AANc,GAAhB,CAAlB,CAFkB;AAUxBa,eAAa,iBAAUf,MAAV,CAAiBI;AAVN,CAA1B;AAYAC,cAAcc,YAAd,GAA6B;AAC3BZ,QAAM;AADqB,CAA7B;;kBAIeF,a","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { Link } from 'react-router';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\n\nfunction NavigationButton(props) {\n  let notice = null;\n  if (props.noticeCounts && props.noticeCounts > 0) {\n    if (props.noticeCounts > 99) {\n      notice = <div className={styles.notices}>99+</div>;\n    } else {\n      notice = <div className={styles.notice}>{props.noticeCounts}</div>;\n    }\n  }\n  return (\n    <Link\n      to={props.path}\n      className={classnames(\n        styles.navigationButton,\n        props.active && styles.active,\n      )}\n      style={{\n        width: props.width,\n      }}\n    >\n      <div className={styles.iconHolder} title={props.label}>\n        <div className={styles.icon}>\n          {props.active ? props.activityIcon : props.icon }\n        </div>\n        {notice}\n      </div>\n    </Link>\n  );\n}\nNavigationButton.propTypes = {\n  icon: PropTypes.node,\n  activityIcon: PropTypes.node,\n  path: PropTypes.string,\n  active: PropTypes.bool,\n  label: PropTypes.string,\n  noticeCounts: PropTypes.number,\n  width: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nfunction NavigationBar(props) {\n  const tabWidth = props.tabs.length > 0 ?\n    `${(1 / props.tabs.length) * 100}%` :\n    0;\n  return (\n    <nav className={classnames(styles.root, props.className)}>\n      {\n        props.tabs.map((t, idx) => (\n          <NavigationButton\n            {...t}\n            key={idx}\n            active={\n              (t.isActive && t.isActive(props.currentPath)) ||\n              t.path === props.currentPath\n            }\n            width={tabWidth}\n          />\n        ))\n      }\n    </nav>\n  );\n}\nNavigationBar.propTypes = {\n  className: PropTypes.string,\n  tabs: PropTypes.arrayOf(PropTypes.shape({\n    icon: PropTypes.node.isRequired,\n    activityIcon: PropTypes.node.isRequired,\n    label: PropTypes.string,\n    path: PropTypes.string.isRequired,\n    isActive: PropTypes.func,\n    noticeCounts: PropTypes.number,\n  })),\n  currentPath: PropTypes.string.isRequired,\n};\nNavigationBar.defaultProps = {\n  tabs: [],\n};\n\nexport default NavigationBar;\n"]}