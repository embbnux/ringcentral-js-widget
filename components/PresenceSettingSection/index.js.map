{"version":3,"sources":["components/PresenceSettingSection/index.js"],"names":["PresenceItem","props","className","presenceItem","selected","onClick","icon","statusName","name","propTypes","func","isRequired","node","string","bool","PresenceSettingSection","state","showSelects","showPresenceSettings","toggleShow","setState","preState","onCallQueueChange","dndStatus","doNotAcceptAnyCalls","takeAllCalls","doNotAcceptDepartmentCalls","toggleAcceptCallQueueCalls","currentUserStatus","currentDndStatus","busy","getString","currentLocale","iconClassName","offline","invisible","status","notDisturb","collapse","sectionClass","section","showDropdown","acceptQueueCalls","isCallQueueMember","currentStatus","_getPresenceStatus","userStatus","currentStatusIcon","_getPresenceStatusIcon","dropdownIcon","arrow","title","subTitle","presenceList","available","setAvailable","setBusy","setDoNotDisturb","setInvisible"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport classnames from 'classnames';\n\nimport presenceStatus from 'ringcentral-integration/modules/Presence/presenceStatus';\nimport dndStatus from 'ringcentral-integration/modules/Presence/dndStatus';\n\nimport IconLine from '../IconLine';\nimport Line from '../Line';\nimport Switch from '../Switch';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction PresenceItem(props) {\n  const className = classnames(\n    styles.presenceItem,\n    props.selected ? styles.selected : null\n  );\n  return (\n    <a className={className} onClick={props.onClick}>\n      {props.icon}\n      <span className={styles.statusName}>\n        {props.name}\n      </span>\n    </a>\n  );\n}\n\nPresenceItem.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  icon: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n};\n\nexport default class PresenceSettingSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSelects: props.showPresenceSettings,\n    };\n\n    this.toggleShow = () => {\n      this.setState(preState => ({\n        showSelects: !preState.showSelects,\n      }));\n    };\n\n    this.onCallQueueChange = () => {\n      if (this.state.dndStatus === dndStatus.doNotAcceptAnyCalls) {\n        return;\n      }\n      this.setState(preState => ({\n        dndStatus: (\n          preState.dndStatus === dndStatus.takeAllCalls ?\n            dndStatus.doNotAcceptDepartmentCalls :\n            dndStatus.takeAllCalls\n        ),\n      }));\n      this.props.toggleAcceptCallQueueCalls();\n    };\n  }\n\n  _getPresenceStatus(currentUserStatus, currentDndStatus) {\n    if (currentUserStatus !== presenceStatus.busy) {\n      return i18n.getString(currentUserStatus, this.props.currentLocale);\n    }\n    return i18n.getString(currentUserStatus + currentDndStatus, this.props.currentLocale);\n  }\n\n  _getPresenceStatusIcon(currentUserStatus, currentDndStatus) {\n    let iconClassName;\n    if (currentUserStatus === presenceStatus.offline) {\n      iconClassName = styles.invisible;\n    }\n    if (currentUserStatus === presenceStatus.busy) {\n      if (currentDndStatus === dndStatus.doNotAcceptAnyCalls) {\n        iconClassName = classnames(styles.status, styles.busy, styles.notDisturb);\n      } else {\n        iconClassName = classnames(styles.status, styles.busy);\n      }\n    }\n    return (\n      <span className={classnames(styles.status, iconClassName)}>\n        <i className={dynamicsFont.collapse} />\n      </span>\n    );\n  }\n\n  render() {\n    const sectionClass = classnames(\n      styles.section,\n      this.state.showSelects ? styles.showDropdown : null,\n    );\n    const acceptQueueCalls = this.props.isCallQueueMember ? (\n      <IconLine\n        icon={\n          <Switch\n            checked={this.props.dndStatus === dndStatus.takeAllCalls}\n            onChange={this.onCallQueueChange}\n          />\n        }\n      >\n        {i18n.getString('acceptQueueCalls', this.props.currentLocale)}\n      </IconLine>\n    ) :\n      null;\n    const currentStatus = this._getPresenceStatus(\n      this.props.userStatus,\n      this.props.dndStatus\n    );\n    const currentStatusIcon = this._getPresenceStatusIcon(\n      this.props.userStatus,\n      this.props.dndStatus\n    );\n    return (\n      <section className={sectionClass}>\n        <IconLine\n          icon={\n            <span className={styles.dropdownIcon} >\n              <i className={dynamicsFont.arrow} />\n            </span>\n          }\n          onClick={this.toggleShow}\n        >\n          <div className={styles.title}>\n            {i18n.getString('status', this.props.currentLocale)}\n          </div>\n          <div className={styles.subTitle}>\n            {currentStatusIcon}\n            <span className={styles.statusName}>\n              {currentStatus}\n            </span>\n          </div>\n        </IconLine>\n        <Line className={styles.presenceList}>\n          <PresenceItem\n            icon={this._getPresenceStatusIcon(presenceStatus.available)}\n            name={i18n.getString(presenceStatus.available, this.props.currentLocale)}\n            onClick={this.props.setAvailable}\n            selected={this.props.userStatus === presenceStatus.available}\n          />\n          <PresenceItem\n            icon={this._getPresenceStatusIcon(\n              presenceStatus.busy, dndStatus.takeAllCalls\n            )}\n            name={\n              i18n.getString(\n                presenceStatus.busy + dndStatus.takeAllCalls,\n                this.props.currentLocale\n              )\n            }\n            onClick={this.props.setBusy}\n            selected={\n              this.props.userStatus === presenceStatus.busy &&\n              this.props.dndStatus !== dndStatus.doNotAcceptAnyCalls\n            }\n          />\n          <PresenceItem\n            icon={this._getPresenceStatusIcon(\n              presenceStatus.busy, dndStatus.doNotAcceptAnyCalls\n            )}\n            name={\n              i18n.getString(\n                presenceStatus.busy + dndStatus.doNotAcceptAnyCalls,\n                this.props.currentLocale\n              )\n            }\n            onClick={this.props.setDoNotDisturb}\n            selected={\n              this.props.userStatus === presenceStatus.busy &&\n              this.props.dndStatus === dndStatus.doNotAcceptAnyCalls\n            }\n          />\n          <PresenceItem\n            icon={this._getPresenceStatusIcon(presenceStatus.offline)}\n            name={i18n.getString(presenceStatus.offline, this.props.currentLocale)}\n            onClick={this.props.setInvisible}\n            selected={this.props.userStatus === presenceStatus.offline}\n          />\n        </Line>\n        {acceptQueueCalls}\n      </section>\n    );\n  }\n}\n\nPresenceSettingSection.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  dndStatus: PropTypes.string.isRequired,\n  userStatus: PropTypes.string.isRequired,\n  isCallQueueMember: PropTypes.bool.isRequired,\n  setAvailable: PropTypes.func.isRequired,\n  setBusy: PropTypes.func.isRequired,\n  setDoNotDisturb: PropTypes.func.isRequired,\n  setInvisible: PropTypes.func.isRequired,\n  toggleAcceptCallQueueCalls: PropTypes.func.isRequired,\n  showPresenceSettings: PropTypes.bool.isRequired,\n};\n"]}