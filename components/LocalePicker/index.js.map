{"version":3,"sources":["components/LocalePicker/index.js"],"names":["renderFunction","locale","split","lang","tokens","region","join","i18n","getString","countryNames","LocalePicker","mounted","all","props","options","reduce","promises","l","push","_load","forceUpdate","Component","propTypes","value","PropTypes","string","isRequired","arrayOf","onChange","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AAAA,sBACJA,OAAOC,KAAP,CAAa,MAAb,CADI;AAAA;AAAA,MACvBC,IADuB;AAAA,MACdC,MADc;;AAE9B,MAAMC,SAASD,OAAOE,IAAP,CAAY,GAAZ,CAAf;AACA,SAAUC,eAAKC,SAAL,CAAeL,IAAf,EAAqBF,MAArB,CAAV,UAA2CQ,uBAAaD,SAAb,CAAuBH,MAAvB,EAA+BJ,MAA/B,CAA3C;AACD;;IACoBS,Y;;;;;;;;;;wCACC;AAAA;;AAClB,WAAKC,OAAL,GAAe,IAAf;AACA,+EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACO,kBAAQC,GAAR,CACJ,OAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,CAA0B,UAACC,QAAD,EAAWC,CAAX,EAAiB;AACzCD,2BAASE,IAAT,CAAcX,eAAKY,KAAL,CAAWF,CAAX,CAAd;AACAD,2BAASE,IAAT,CAAcT,uBAAaU,KAAb,CAAmBF,CAAnB,CAAd;AACA,yBAAOD,QAAP;AACD,iBAJD,EAIG,EAJH,CADI,CADP;;AAAA;AAQC,oBAAI,OAAKL,OAAT,EAAkB,OAAKS,WAAL;;AARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AAUD;;;2CACsB;AACrB,WAAKT,OAAL,GAAe,KAAf;AACD;;;6BACQ;AACP,aACE,8BAAC,wBAAD,6BACM,KAAKE,KADX;AAEE,uBAAc,MAFhB;AAGE,qBAAab,cAHf;AAIE,wBAAgBA;AAJlB,SADF;AAQD;;;EA1BuCqB,gB;;kBAArBX,Y;;AA4BrBA,aAAaY,SAAb,GAAyB;AACvBC,SAAOC,oBAAUC,MAAV,CAAiBC,UADD;AAEvBZ,WAASU,oBAAUG,OAAV,CAAkBH,oBAAUC,MAA5B,EAAoCC,UAFtB;AAGvBE,YAAUJ,oBAAUK,IAAV,CAAeH;AAHF,CAAzB","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DropdownSelect from '../DropdownSelect';\nimport i18n from './i18n';\nimport countryNames from '../../lib/countryNames';\n\nfunction renderFunction(locale) {\n  const [lang, ...tokens] = locale.split(/[-_]/);\n  const region = tokens.join('-');\n  return `${i18n.getString(lang, locale)} (${countryNames.getString(region, locale)})`;\n}\nexport default class LocalePicker extends Component {\n  componentDidMount() {\n    this.mounted = true;\n    (async () => {\n      await Promise.all(\n        this.props.options.reduce((promises, l) => {\n          promises.push(i18n._load(l));\n          promises.push(countryNames._load(l));\n          return promises;\n        }, [])\n      );\n      if (this.mounted) this.forceUpdate();\n    })();\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n  render() {\n    return (\n      <DropdownSelect\n        {...this.props}\n        dropdownAlign=\"left\"\n        renderValue={renderFunction}\n        renderFunction={renderFunction}\n      />\n    );\n  }\n}\nLocalePicker.propTypes = {\n  value: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n"]}