{"version":3,"sources":["components/RateExceededAlert/index.js"],"names":["calculateState","duration","timestamp","ttl","Math","max","floor","Date","now","RequestRateExceededAlert","props","state","timer","setInterval","setState","nextProps","clearInterval","getString","currentLocale","propTypes","number","isRequired","string","handleMessage","message","rateLimitReached"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkCC,SAAlC,EAA6C;AAC3C,SAAO;AACLC,SAAKC,KAAKC,GAAL,CAASD,KAAKE,KAAL,CAAW,CAACL,YAAYM,KAAKC,GAAL,KAAaN,SAAzB,CAAD,IAAwC,IAAnD,CAAT,EAAmE,CAAnE;AADA,GAAP;AAGD;;IAEKO,wB;;;AACJ,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA,0KACXA,KADW;;AAEjB,UAAKC,KAAL,GAAaX,eAAeU,MAAMT,QAArB,EAA+BS,MAAMR,SAArC,CAAb;AAFiB;AAGlB;;;;wCAEmB;AAAA;;AAClB,WAAKU,KAAL,GAAaC,YAAY,YAAM;AAC7B,eAAKC,QAAL,CAAcd,eAAe,OAAKU,KAAL,CAAWT,QAA1B,EAAoC,OAAKS,KAAL,CAAWR,SAA/C,CAAd;AACD,OAFY,EAEV,IAFU,CAAb;AAGD;;;8CAEyBa,S,EAAW;AACnC,WAAKD,QAAL,CAAcd,eAAee,UAAUd,QAAzB,EAAmCc,UAAUb,SAA7C,CAAd;AACD;;;2CAEsB;AACrBc,oBAAc,KAAKJ,KAAnB;AACD;;;6BAEQ;AACP,aACE;AACE,iBAAS,eAAKK,SAAL,CAAe,cAAf,EAA+B,KAAKP,KAAL,CAAWQ,aAA1C,CADX;AAEE,gBAAQ,EAAEf,KAAK,KAAKQ,KAAL,CAAWR,GAAlB;AAFV,QADF;AAMD;;;;;AAGHM,yBAAyBU,SAAzB,GAAqC;AACnCjB,aAAW,iBAAUkB,MAAV,CAAiBC,UADO;AAEnCpB,YAAU,iBAAUmB,MAAV,CAAiBC,UAFQ;AAGnCH,iBAAe,iBAAUI,MAAV,CAAiBD;AAHG,CAArC;;AAMAZ,yBAAyBc,aAAzB,GAAyC;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SACvCA,YAAY,wBAAcC,gBADa;AAAA,CAAzC;;kBAIehB,wB","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport errorMessages from 'ringcentral-integration/modules/RateLimiter/errorMessages';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nfunction calculateState(duration, timestamp) {\n  return {\n    ttl: Math.max(Math.floor((duration - (Date.now() - timestamp)) / 1000), 0),\n  };\n}\n\nclass RequestRateExceededAlert extends Component {\n  constructor(props) {\n    super(props);\n    this.state = calculateState(props.duration, props.timestamp);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(calculateState(this.props.duration, this.props.timestamp));\n    }, 1000);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState(calculateState(nextProps.duration, nextProps.timestamp));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    return (\n      <FormattedMessage\n        message={i18n.getString('rateExceeded', this.props.currentLocale)}\n        values={{ ttl: this.state.ttl }}\n      />\n    );\n  }\n}\n\nRequestRateExceededAlert.propTypes = {\n  timestamp: PropTypes.number.isRequired,\n  duration: PropTypes.number.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nRequestRateExceededAlert.handleMessage = ({ message }) => (\n  message === errorMessages.rateLimitReached\n);\n\nexport default RequestRateExceededAlert;\n"]}