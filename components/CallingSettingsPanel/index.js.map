{"version":3,"sources":["components/CallingSettingsPanel/index.js"],"names":["CallingSettingsPanel","props","onSave","state","callWith","myLocation","ringoutPrompt","onReset","setState","onCallWithChange","availableNumbers","defaultRingoutPrompt","onMyLocationChange","onMyLocationTextChange","e","target","value","onRingoutPromptChange","checked","renderHandler","option","brand","callingOptions","myphone","replace","i18n","getString","currentLocale","newProps","contentKeys","browser","softphone","map","contentKey","callWithOptions","onBackButtonClick","className","disabled","hasChanges","ringout","styles","ringoutHint","select","locationSelect","iconField","toolTip","getTooltipContent","root","content","offset","tooltipContainner","infoIcon","Component","propTypes","PropTypes","string","isRequired","arrayOf","bool","object","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqBA,oB;;;AACnB,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA,kKACXA,KADW;;AAAA,UA0BnBC,MA1BmB,GA0BV,YAAM;AACb,UAAI,OAAO,MAAKD,KAAL,CAAWC,MAAlB,KAA6B,UAAjC,EAA6C;AAAA,0BAKvC,MAAKC,KALkC;AAAA,YAEzCC,QAFyC,eAEzCA,QAFyC;AAAA,YAGzCC,UAHyC,eAGzCA,UAHyC;AAAA,YAIzCC,aAJyC,eAIzCA,aAJyC;;AAM3C,cAAKL,KAAL,CAAWC,MAAX,CAAkB;AAChBE,4BADgB;AAEhBC,gCAFgB;AAGhBC;AAHgB,SAAlB;AAKD;AACF,KAvCkB;;AAAA,UAwCnBC,OAxCmB,GAwCT,YAAM;AAAA,wBAKV,MAAKN,KALK;AAAA,UAEZG,QAFY,eAEZA,QAFY;AAAA,UAGZC,UAHY,eAGZA,UAHY;AAAA,UAIZC,aAJY,eAIZA,aAJY;;AAMd,YAAKE,QAAL,CAAc;AACZJ,0BADY;AAEZC,8BAFY;AAGZC;AAHY,OAAd;AAKD,KAnDkB;;AAAA,UAoDnBG,gBApDmB,GAoDA,UAACL,QAAD,EAAc;AAC/B,UAAIA,aAAa,MAAKH,KAAL,CAAWG,QAA5B,EAAsC;AACpC,cAAKI,QAAL,CAAc;AACZJ,4BADY;AAEZC,sBAAY,MAAKJ,KAAL,CAAWI,UAFX;AAGZC,yBAAe,MAAKL,KAAL,CAAWK;AAHd,SAAd;AAKA;AACD;AACD,YAAKE,QAAL,CAAc;AACZJ,0BADY;AAEZC,oBAAa,MAAKJ,KAAL,CAAWS,gBAAX,CAA4BN,QAA5B,KACX,MAAKH,KAAL,CAAWS,gBAAX,CAA4BN,QAA5B,EAAsC,CAAtC,CADU,IAEV,EAJU;AAKZE,uBAAe,MAAKK;AALR,OAAd;AAOD,KApEkB;;AAAA,UAqEnBC,kBArEmB,GAqEE,UAACP,UAAD,EAAgB;AACnC,YAAKG,QAAL,CAAc;AACZH;AADY,OAAd;AAGD,KAzEkB;;AAAA,UA0EnBQ,sBA1EmB,GA0EM,UAACC,CAAD,EAAO;AAC9B,UAAMT,aAAaS,EAAEC,MAAF,CAASC,KAA5B;AACA,YAAKR,QAAL,CAAc;AACZH;AADY,OAAd;AAGD,KA/EkB;;AAAA,UAgFnBY,qBAhFmB,GAgFK,UAACC,OAAD,EAAa;AACnC,YAAKV,QAAL,CAAc;AACZF,uBAAeY;AADH,OAAd;AAGD,KApFkB;;AAAA,UA+GnBC,aA/GmB,GA+GH,UAACC,MAAD,EAAY;AAAA,UACpBC,KADoB,GACV,MAAKpB,KADK,CACpBoB,KADoB;;AAE1B,UAAID,WAAWE,yBAAeC,OAA9B,EAAuC;AACrCF,gBAAQA,MAAMG,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAR;AACD;AACD,aAAO,6BAAcC,eAAKC,SAAL,CAAeN,MAAf,EAAuB,MAAKnB,KAAL,CAAW0B,aAAlC,CAAd,EAAgE,EAAEN,YAAF,EAAhE,CAAP;AACD,KArHkB;;AAEjB,UAAKV,oBAAL,GAA4BV,MAAMK,aAAlC;AACA,UAAKH,KAAL,GAAa;AACXC,gBAAUH,MAAMG,QADL;AAEXE,qBAAeL,MAAMK,aAFV;AAGXD,kBAAYJ,MAAMI;AAHP,KAAb;AAHiB;AAQlB;;;;8CACyBuB,Q,EAAU;AAClC,UAAIA,SAASxB,QAAT,KAAsB,KAAKH,KAAL,CAAWG,QAArC,EAA+C;AAC7C,aAAKI,QAAL,CAAc;AACZJ,oBAAUwB,SAASxB;AADP,SAAd;AAGD;AACD,UAAIwB,SAAStB,aAAT,KAA2B,KAAKL,KAAL,CAAWK,aAA1C,EAAyD;AACvD,aAAKE,QAAL,CAAc;AACZF,yBAAesB,SAAStB;AADZ,SAAd;AAGD;AACD,UAAIsB,SAASvB,UAAT,KAAwB,KAAKJ,KAAL,CAAWI,UAAvC,EAAmD;AACjD,aAAKG,QAAL,CAAc;AACZH,sBAAYuB,SAASvB;AADT,SAAd;AAGD;AACF;;;wCA6DmB;AAAA;;AAClB,UAAIwB,oBAAJ;AACA,UAAI,KAAK1B,KAAL,CAAWC,QAAX,KAAwBkB,yBAAeQ,OAAvC,IACC,KAAK3B,KAAL,CAAWC,QAAX,KAAwBkB,yBAAeS,SAD5C,EAEE;AACAF,sBAAc,CAAI,KAAK1B,KAAL,CAAWC,QAAf,aAAd;AACD,OAJD,MAIO;AACLyB,sBAAc,CAAI,KAAK1B,KAAL,CAAWC,QAAf,cAAqC,KAAKD,KAAL,CAAWC,QAAhD,cAAd;AACD;AACD,aACE;AAAA;AAAA;AAEIyB,oBAAYG,GAAZ,CAAgB;AAAA,iBACd;AAAA;AAAA,cAAK,KAAKC,UAAV;AACG,yCACCR,eAAKC,SAAL,CAAeO,UAAf,EAA2B,OAAKhC,KAAL,CAAW0B,aAAtC,CADD,EAEC,EAAEN,OAAO,OAAKpB,KAAL,CAAWoB,KAApB,EAFD;AADH,WADc;AAAA,SAAhB;AAFJ,OADF;AAcD;;;6BAUQ;AAAA;;AAAA,mBAWH,KAAKpB,KAXF;AAAA,UAEL0B,aAFK,UAELA,aAFK;AAAA,UAGLvB,QAHK,UAGLA,QAHK;AAAA,UAIL8B,eAJK,UAILA,eAJK;AAAA,UAKL7B,UALK,UAKLA,UALK;AAAA,UAMLC,aANK,UAMLA,aANK;AAAA,UAOL6B,iBAPK,UAOLA,iBAPK;AAAA,UAQLzB,gBARK,UAQLA,gBARK;AAAA,UASL0B,SATK,UASLA,SATK;AAAA,UAULC,QAVK,UAULA,QAVK;;AAYP,UAAMC,aAAa,KAAKnC,KAAL,CAAWC,QAAX,KAAwBA,QAAxB,IACjB,KAAKD,KAAL,CAAWE,UAAX,KAA0BA,UADT,IAEjB,KAAKF,KAAL,CAAWG,aAAX,KAA6BA,aAF/B;AAGA,UAAMiC,UAEF,KAAKpC,KAAL,CAAWC,QAAX,KAAwBkB,yBAAeS,SAAvC,IACA,KAAK5B,KAAL,CAAWC,QAAX,KAAwBkB,yBAAeQ,OAFzC,GAIE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAWU,iBAAOC,WAAvB;AACGhB,yBAAKC,SAAL,CAAe,aAAf,EAA8BC,aAA9B;AADH,SADF;AAIE;AAAC,8BAAD;AAAA;AACE,mBAAOF,eAAKC,SAAL,CAAe,iBAAf,EAAkCC,aAAlC,CADT;AAGIjB,2BAAiB,KAAKP,KAAL,CAAWC,QAA5B,IACE,8BAAC,wBAAD;AACE,uBAAW,0BAAWoC,iBAAOE,MAAlB,EAA0BF,iBAAOG,cAAjC,CADb;AAEE,mBAAO,KAAKxC,KAAL,CAAWE,UAFpB;AAGE,sBAAU,KAAKO,kBAHjB;AAIE,qBAASF,iBAAiB,KAAKP,KAAL,CAAWC,QAA5B,CAJX;AAKE,sBAAUiC,QALZ;AAME,2BAAc,MANhB;AAOE;AAPF,YADF,GAWE,8BAAC,mBAAD;AACE,mBAAO,KAAKlC,KAAL,CAAWE,UADpB;AAEE,uBAAW,EAFb;AAGE,sBAAU,KAAKQ,sBAHjB;AAdN,SAJF;AAyBE;AAAC,6BAAD;AAAA;AACE,uBAAW2B,iBAAOI,SADpB;AAEE,kBACE,8BAAC,gBAAD;AACE,uBAAS,KAAKzC,KAAL,CAAWG,aADtB;AAEE,wBAAU,KAAKW;AAFjB;AAHJ;AASGQ,yBAAKC,SAAL,CAAe,wBAAf,EAAyCC,aAAzC;AATH;AAzBF,OAJF,GAyCM,IA1CR;;AA4CA,UAAMkB,UAAU,KAAKC,iBAAL,EAAhB;AACA,aACE;AAAA;AAAA,UAAK,WAAW,0BAAWN,iBAAOO,IAAlB,EAAwBX,SAAxB,CAAhB;AACE;AAAC,8BAAD;AAAA;AACE,yBAAaD;AADf;AAGGV,yBAAKC,SAAL,CAAe,OAAf,EAAwBC,aAAxB;AAHH,SADF;AAME;AAAC,yBAAD;AAAA,YAAO,WAAWa,iBAAOQ,OAAzB;AACE;AAAC,gCAAD;AAAA;AACE,qBACE;AAAA;AAAA;AACGvB,+BAAKC,SAAL,CAAe,eAAf,EAAgCC,aAAhC,CADH;AAEE;AAAC,qCAAD;AAAA;AACE,+BAAU,QADZ;AAEE,6BAAQ,OAFV;AAGE,6BAASkB,OAHX;AAIE,2BAAO;AACLI,8BAAQ,CAAC,CAAD,EAAI,EAAJ;AADH,qBAJT;AAOE,kCAAc,uCAAK,WAAU,wBAAf,GAPhB;AAQE,yCAAqB;AAAA,6BAAM,OAAKC,iBAAX;AAAA;AARvB;AAUE,gDAAC,cAAD,IAAU,OAAO,EAAjB,EAAqB,QAAQ,EAA7B,EAAiC,WAAWV,iBAAOW,QAAnD;AAVF;AAFF,eAFJ;AAkBE;AAlBF;AAoBE,0CAAC,wBAAD;AACE,yBAAWX,iBAAOE,MADpB;AAEE,qBAAO,KAAKvC,KAAL,CAAWC,QAFpB;AAGE,wBAAU,KAAKK,gBAHjB;AAIE,uBAASyB,eAJX;AAKE,6BAAc,MALhB;AAME,8BAAgB,KAAKf,aANvB;AAOE,2BAAa,KAAKA,aAPpB;AAQE,wBAAUkB,QARZ;AASE;AATF,cApBF;AA+BE;AACE,yBAAWG,iBAAOU,iBADpB;AAEE,mBAAK,aAACA,iBAAD,EAAuB;AAC1B,uBAAKA,iBAAL,GAAyBA,iBAAzB;AACD;AAJH;AA/BF,WADF;AAuCGX,iBAvCH;AAwCE,wCAAC,oBAAD;AACE,2BAAeZ,aADjB;AAEE,qBAAS,KAAKzB,MAFhB;AAGE,sBAAU,CAACoC;AAHb;AAxCF;AANF,OADF;AAuDD;;;EA3O+Cc,gB;;kBAA7BpD,oB;;;AA8OrBA,qBAAqBqD,SAArB,GAAiC;AAC/BhC,SAAOiC,oBAAUC,MAAV,CAAiBC,UADO;AAE/BpB,aAAWkB,oBAAUC,MAFU;AAG/B5B,iBAAe2B,oBAAUC,MAAV,CAAiBC,UAHD;AAI/BtB,mBAAiBoB,oBAAUG,OAAV,CAAkBH,oBAAUC,MAA5B,EAAoCC,UAJtB;AAK/BpD,YAAUkD,oBAAUC,MAAV,CAAiBC,UALI;AAM/BnD,cAAYiD,oBAAUC,MAAV,CAAiBC,UANE;AAO/BlD,iBAAegD,oBAAUI,IAAV,CAAeF,UAPC;AAQ/B9C,oBAAkB4C,oBAAUK,MAAV,CAAiBH,UARJ;AAS/BrB,qBAAmBmB,oBAAUM,IAAV,CAAeJ,UATH;AAU/BtD,UAAQoD,oBAAUM,IAAV,CAAeJ,UAVQ;AAW/BnB,YAAUiB,oBAAUI;AAXW,CAAjC;;AAcA1D,qBAAqB6D,YAArB,GAAoC;AAClCzB,aAAW,IADuB;AAElCC,YAAU;AAFwB,CAApC","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport formatMessage from 'format-message';\n\nimport callingOptions from 'ringcentral-integration/modules/CallingSettings/callingOptions';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap_white.css';\nimport InfoIcon from '../../assets/images/Info.svg';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Switch from '../Switch';\nimport IconField from '../IconField';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport Select from '../DropdownSelect';\nimport SaveButton from '../SaveButton';\n\nexport default class CallingSettingsPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.defaultRingoutPrompt = props.ringoutPrompt;\n    this.state = {\n      callWith: props.callWith,\n      ringoutPrompt: props.ringoutPrompt,\n      myLocation: props.myLocation,\n    };\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.callWith !== this.props.callWith) {\n      this.setState({\n        callWith: newProps.callWith,\n      });\n    }\n    if (newProps.ringoutPrompt !== this.props.ringoutPrompt) {\n      this.setState({\n        ringoutPrompt: newProps.ringoutPrompt,\n      });\n    }\n    if (newProps.myLocation !== this.props.myLocation) {\n      this.setState({\n        myLocation: newProps.myLocation,\n      });\n    }\n  }\n  onSave = () => {\n    if (typeof this.props.onSave === 'function') {\n      const {\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      } = this.state;\n      this.props.onSave({\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      });\n    }\n  }\n  onReset = () => {\n    const {\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    } = this.props;\n    this.setState({\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    });\n  }\n  onCallWithChange = (callWith) => {\n    if (callWith === this.props.callWith) {\n      this.setState({\n        callWith,\n        myLocation: this.props.myLocation,\n        ringoutPrompt: this.props.ringoutPrompt,\n      });\n      return;\n    }\n    this.setState({\n      callWith,\n      myLocation: (this.props.availableNumbers[callWith] &&\n        this.props.availableNumbers[callWith][0]) ||\n        '',\n      ringoutPrompt: this.defaultRingoutPrompt,\n    });\n  }\n  onMyLocationChange = (myLocation) => {\n    this.setState({\n      myLocation\n    });\n  }\n  onMyLocationTextChange = (e) => {\n    const myLocation = e.target.value;\n    this.setState({\n      myLocation\n    });\n  }\n  onRingoutPromptChange = (checked) => {\n    this.setState({\n      ringoutPrompt: checked,\n    });\n  }\n\n  getTooltipContent() {\n    let contentKeys;\n    if (this.state.callWith === callingOptions.browser\n      || this.state.callWith === callingOptions.softphone\n    ) {\n      contentKeys = [`${this.state.callWith}Tooltip`];\n    } else {\n      contentKeys = [`${this.state.callWith}Tooltip`, `${this.state.callWith}Tooltip1`];\n    }\n    return (\n      <div>\n        {\n          contentKeys.map(contentKey => (\n            <div key={contentKey}>\n              {formatMessage(\n                i18n.getString(contentKey, this.props.currentLocale),\n                { brand: this.props.brand }\n              )}\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n\n  renderHandler = (option) => {\n    let { brand } = this.props;\n    if (option === callingOptions.myphone) {\n      brand = brand.replace(/\\sPhone$/, '');\n    }\n    return formatMessage(i18n.getString(option, this.props.currentLocale), { brand });\n  }\n\n  render() {\n    const {\n      currentLocale,\n      callWith,\n      callWithOptions,\n      myLocation,\n      ringoutPrompt,\n      onBackButtonClick,\n      availableNumbers,\n      className,\n      disabled,\n    } = this.props;\n    const hasChanges = this.state.callWith !== callWith ||\n      this.state.myLocation !== myLocation ||\n      this.state.ringoutPrompt !== ringoutPrompt;\n    const ringout =\n      (\n        this.state.callWith !== callingOptions.softphone &&\n        this.state.callWith !== callingOptions.browser\n      ) ? (\n        <div>\n          <div className={styles.ringoutHint}>\n            {i18n.getString('ringoutHint', currentLocale)}\n          </div>\n          <InputField\n            label={i18n.getString('myLocationLabel', currentLocale)}>\n            {\n              availableNumbers[this.state.callWith] ? (\n                <Select\n                  className={classnames(styles.select, styles.locationSelect)}\n                  value={this.state.myLocation}\n                  onChange={this.onMyLocationChange}\n                  options={availableNumbers[this.state.callWith]}\n                  disabled={disabled}\n                  dropdownAlign=\"left\"\n                  titleEnabled\n                />\n              ) : (\n                <TextInput\n                  value={this.state.myLocation}\n                  maxLength={30}\n                  onChange={this.onMyLocationTextChange} />\n              )\n            }\n          </InputField>\n          <IconField\n            className={styles.iconField}\n            icon={\n              <Switch\n                checked={this.state.ringoutPrompt}\n                onChange={this.onRingoutPromptChange}\n                />\n            }\n            >\n            {i18n.getString('press1ToStartCallLabel', currentLocale)}\n          </IconField>\n        </div>\n        ) : null;\n\n    const toolTip = this.getTooltipContent();\n    return (\n      <div className={classnames(styles.root, className)}>\n        <BackHeader\n          onBackClick={onBackButtonClick}\n          >\n          {i18n.getString('title', currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          <InputField\n            label={\n              <span>\n                {i18n.getString('makeCallsWith', currentLocale)}\n                <Tooltip\n                  placement=\"bottom\"\n                  trigger=\"click\"\n                  overlay={toolTip}\n                  align={{\n                    offset: [0, 47],\n                  }}\n                  arrowContent={<div className=\"rc-tooltip-arrow-inner\" />}\n                  getTooltipContainer={() => this.tooltipContainner}\n                >\n                  <InfoIcon width={14} height={14} className={styles.infoIcon} />\n                </Tooltip>\n              </span>\n            }\n            noBorder\n          >\n            <Select\n              className={styles.select}\n              value={this.state.callWith}\n              onChange={this.onCallWithChange}\n              options={callWithOptions}\n              dropdownAlign=\"left\"\n              renderFunction={this.renderHandler}\n              renderValue={this.renderHandler}\n              disabled={disabled}\n              titleEnabled\n            />\n            <div\n              className={styles.tooltipContainner}\n              ref={(tooltipContainner) => {\n                this.tooltipContainner = tooltipContainner;\n              }}\n            />\n          </InputField>\n          {ringout}\n          <SaveButton\n            currentLocale={currentLocale}\n            onClick={this.onSave}\n            disabled={!hasChanges}\n          />\n        </Panel>\n      </div>\n    );\n  }\n}\n\nCallingSettingsPanel.propTypes = {\n  brand: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  callWithOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  callWith: PropTypes.string.isRequired,\n  myLocation: PropTypes.string.isRequired,\n  ringoutPrompt: PropTypes.bool.isRequired,\n  availableNumbers: PropTypes.object.isRequired,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nCallingSettingsPanel.defaultProps = {\n  className: null,\n  disabled: false,\n};\n"]}