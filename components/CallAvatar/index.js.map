{"version":3,"sources":["components/CallAvatar/index.js"],"names":["REGEXP_BLOB_URL","REGEXP_BASE64_URL","isBlobURL","value","test","isBase64","CallAvatar","props","state","avatarUrl","_mounted","setState","$img","document","createElement","src","onload","onerror","loadImg","nextProps","extraNum","isOnConferenceCall","spinnerMode","className","onClick","initialSize","margin","avatarCircleRadius","extraNumCircleRadius","extraNumCircleBorder","circleBorder","$snow","$blueLight","$blue","$dark","$transparency","defaultAvatarStyle","opacity","hash","uuid","v4","portraitChar","iconFont","textId","clipId","avatarStyle","stroke","strokeWidth","showingSpinner","aspectRatio","xmlns","svgCls","styles","callAvatar","autoPointerEvents","disabledPointerEvents","spinnerId","spinnerScaleSize","spinnerSize","spinnerTranslateTo","isOnConferenceCallWithExtraNum","spinnerTransform","fontSize","fill","fontWeight","Component","propTypes","PropTypes","bool","string","number","func","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\nimport SpinnerIcon from '../../assets/images/Spinner.svg';\n\nconst REGEXP_BLOB_URL = /^blob:.+\\/[\\w-]{36,}(?:#.+)?$/;\nconst REGEXP_BASE64_URL = /^(data:\\w+\\/[a-zA-Z\\+\\-\\.]+;base64,)?(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/gi;\n\nfunction isBlobURL(value) {\n  return REGEXP_BLOB_URL.test(value);\n}\n\nfunction isBase64(value) {\n  return REGEXP_BASE64_URL.test(value);\n}\n\nclass CallAvatar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarUrl: null\n    };\n    this._mounted = false;\n  }\n\n  loadImg(props = this.props) {\n    const { avatarUrl } = props;\n\n    if (isBase64(avatarUrl)) {\n      this.setState({\n        avatarUrl\n      });\n      return;\n    }\n\n    // means we have to load it\n    if (!this._mounted) {\n      return;\n    }\n    if (avatarUrl) {\n      const $img = document.createElement('img');\n      $img.src = avatarUrl;\n      $img.onload = () => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({\n          avatarUrl\n        });\n      };\n      $img.onerror = () => {\n        if (!this._mounted) {\n          return;\n        }\n        this.setState({\n          avatarUrl: null\n        });\n      };\n    }\n  }\n\n  componentWillMount() {\n    this.loadImg();\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    if (!this.state.avatarUrl) {\n      this.loadImg();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.avatarUrl !== this.props.avatarUrl) {\n      this.loadImg(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  render() {\n    const {\n      extraNum, isOnConferenceCall, spinnerMode, className, onClick\n    } = this.props;\n    const { avatarUrl } = this.state;\n    const initialSize = 38;\n    const margin = 4;\n    const avatarCircleRadius = 15;\n    const extraNumCircleRadius = 8.5;\n    const extraNumCircleBorder = 1;\n    const circleBorder = 1;\n    const $snow = '#fff';\n    const $blueLight = '#cee7f2';\n    const $blue = '#0684bd';\n    const $dark = '#e2e2e2';\n    const $transparency = '0.8';\n    const defaultAvatarStyle = { opacity: +$transparency };\n    const hash = uuid.v4();\n    const portraitChar = '\\ue904'; // HACK: &#xe904; is the font code for the portrait icon\n    const iconFont = 'dynamics_icon';// Hard coding this for firefox to load iconfont\n    const textId = `text-${hash}`;\n    const clipId = `circleClip-${hash}`;\n    const avatarStyle = { stroke: $dark, strokeWidth: `${circleBorder}px` };\n    const showingSpinner = spinnerMode;\n    const aspectRatio = 'xMidYMid meet';\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const svgCls = classnames(\n      styles.callAvatar,\n      onClick ? styles.autoPointerEvents : styles.disabledPointerEvents,\n      className\n    );\n    // spinner sizing\n    const spinnerId = `spinner-${hash}`;\n    const spinnerScaleSize = 1.5;\n    const spinnerSize = 12;\n    const spinnerTranslateTo = (initialSize - (spinnerSize * spinnerScaleSize)) / 2;\n    const isOnConferenceCallWithExtraNum = isOnConferenceCall && extraNum > 0;\n    const spinnerTransform = `translate(${spinnerTranslateTo\n      - (isOnConferenceCallWithExtraNum ? margin : 0)},${spinnerTranslateTo}) scale(${\n      spinnerScaleSize\n    }, ${spinnerScaleSize})`;\n\n    if (isOnConferenceCallWithExtraNum) {\n      return (\n        <svg\n          onClick={onClick ? () => onClick() : null}\n          className={svgCls}\n          style={avatarUrl ? avatarStyle : null}\n          viewBox={`0 0 ${initialSize} ${initialSize}`}\n          preserveAspectRatio={aspectRatio}\n          xmlns={xmlns}\n        >\n          <defs>\n            <g id={textId}>\n              <text\n                x=\"0\"\n                y=\"0\"\n                dy={`${initialSize - 10}px`}\n                style={{\n                      fontSize: `${avatarCircleRadius * 2}px`,\n                      fill: $blue,\n                      opacity: '.5'\n                    }}\n                fontFamily={iconFont}\n              >\n                {portraitChar}\n              </text>\n            </g>\n            <SpinnerIcon id={spinnerId} />\n          </defs>\n          <circle\n            cx={avatarCircleRadius}\n            cy={margin + avatarCircleRadius}\n            r={avatarCircleRadius}\n            fill={$snow}\n            stroke={showingSpinner ? $dark : 'inherit'}\n            strokeOpacity={showingSpinner ? $transparency : '1'}\n          />\n          <g>\n            <clipPath id={clipId}>\n              <circle\n                cx={avatarCircleRadius}\n                cy={margin + avatarCircleRadius}\n                r={avatarCircleRadius}\n                fill={$snow} />\n            </clipPath>\n          </g>\n          {\n            showingSpinner && (\n              <g transform={spinnerTransform}>\n                <use xlinkHref={`#${spinnerId}`} />\n              </g>\n            )\n          }\n          {\n            avatarUrl && (\n              <image clipPath={`url(#${clipId})`} height=\"100%\" width=\"100%\" xlinkHref={avatarUrl} />\n            )\n          }\n          {\n            (!avatarUrl && !showingSpinner) &&\n            <use\n              xlinkHref={`#${textId}`}\n              clipPath={`url(#${clipId})`}\n              style={defaultAvatarStyle}\n            />\n          }\n          <circle\n            cx={initialSize - extraNumCircleRadius}\n            cy={extraNumCircleRadius}\n            r={extraNumCircleRadius}\n            fill={$snow} />\n          <circle\n            cx={initialSize - extraNumCircleRadius}\n            cy={extraNumCircleRadius}\n            r={extraNumCircleRadius - extraNumCircleBorder}\n            fill={$blueLight} />\n\n          <text\n            x={initialSize - extraNumCircleRadius}\n            y={extraNumCircleRadius}\n            dy=\"3px\"\n            textAnchor=\"middle\"\n            style={{\n              fontSize: '9px',\n              stroke: 'none',\n              fill: $blue,\n              fontWeight: 'bolder',\n              opacity: '.5'\n            }}>\n            {`+${extraNum}`}\n          </text>\n        </svg>\n      );\n    }\n    return (\n      <svg\n        className={svgCls}\n        onClick={onClick ? () => onClick() : null}\n        style={avatarUrl ? avatarStyle : null}\n        viewBox={`0 0 ${initialSize} ${initialSize}`}\n        preserveAspectRatio={aspectRatio}\n        xmlns={xmlns}\n          >\n        <defs>\n          <g id={textId}>\n            <text\n              x=\"0\"\n              y=\"0\"\n              dy={`${initialSize - 10}px`}\n              dx=\"2\"\n              style={{\n                      fontSize: `${(initialSize / 2 - 2) * 2}px`,\n                      fill: $blue,\n                      opacity: '.5'\n                    }}\n              fontFamily={iconFont}\n            >\n              {portraitChar}\n            </text>\n          </g>\n          <SpinnerIcon id={spinnerId} />\n        </defs>\n        <circle\n          cx={initialSize / 2}\n          cy={initialSize / 2}\n          r={initialSize / 2 - circleBorder}\n          fill={$snow}\n          stroke={showingSpinner ? $dark : 'inherit'}\n          strokeOpacity={showingSpinner ? $transparency : '1'}\n          />\n        <g>\n          <clipPath id={clipId}>\n            <circle\n              cx={initialSize / 2}\n              cy={initialSize / 2}\n              r={initialSize / 2 - 1}\n              />\n          </clipPath>\n        </g>\n        {\n            showingSpinner && (\n              <g transform={spinnerTransform} >\n                <use xlinkHref={`#${spinnerId}`} />\n              </g>\n            )\n          }\n        {\n            showingSpinner && (\n              <g transform={spinnerTransform} >\n                <use xlinkHref={`#${spinnerId}`} />\n              </g>\n            )\n          }\n        {\n            avatarUrl && (<image\n              clipPath={`url(#${clipId})`}\n              height=\"100%\"\n              width=\"100%\"\n              xlinkHref={avatarUrl}\n              preserveAspectRatio=\"xMinYMin slice\" />\n            )\n          }\n        {\n            (!avatarUrl && !showingSpinner) &&\n            <use\n              xlinkHref={`#${textId}`}\n              clipPath={`url(#${clipId})`}\n              style={defaultAvatarStyle}\n            />\n          }\n      </svg>\n    );\n  }\n}\n\n\nCallAvatar.propTypes = {\n  isOnConferenceCall: PropTypes.bool,\n  avatarUrl: PropTypes.string,\n  extraNum: PropTypes.number,\n  /**\n   * Set to true to make it always show the loading spinner.\n   */\n  spinnerMode: PropTypes.bool,\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nCallAvatar.defaultProps = {\n  isOnConferenceCall: false,\n  avatarUrl: null,\n  extraNum: 0,\n  spinnerMode: false,\n  className: null,\n  onClick: null,\n};\n\n\nexport default CallAvatar;\n"]}