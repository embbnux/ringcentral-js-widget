{"version":3,"sources":["components/TabNavigationButton/index.js"],"names":["NavigationButton","active","activeIcon","icon","label","noticeCounts","onClick","width","keepStyle","notice","styles","notices","styleClass","iconStyles","navigationButton","iconHolder","propTypes","PropTypes","node","isRequired","bool","string","number","oneOfType","func","defaultProps","undefined"],"mappings":";;;;;kBAKwBA,gB;;AALxB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,gBAAT,OASZ;AAAA,MARDC,MAQC,QARDA,MAQC;AAAA,MAPDC,UAOC,QAPDA,UAOC;AAAA,MANDC,IAMC,QANDA,IAMC;AAAA,MALDC,KAKC,QALDA,KAKC;AAAA,MAJDC,YAIC,QAJDA,YAIC;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,MAFDC,KAEC,QAFDA,KAEC;AAAA,MADDC,SACC,QADDA,SACC;;AACD,MAAIC,SAAS,IAAb;AACA,MAAIJ,gBAAgBA,eAAe,CAAnC,EAAsC;AACpC,QAAIA,eAAe,EAAnB,EAAuB;AACrBI,eAAS;AAAA;AAAA,UAAK,WAAWC,iBAAOC,OAAvB;AAAA;AAAA,OAAT;AACD,KAFD,MAEO;AACLF,eAAS;AAAA;AAAA,UAAK,WAAWC,iBAAOD,MAAvB;AAAgCJ;AAAhC,OAAT;AACD;AACF;AACD,MAAMO,aAAa,CAACJ,SAAD,GAAaE,iBAAOG,UAApB,GAAiC,IAApD;AACA,SACE;AAAA;AAAA;AACE,eAASP,OADX;AAEE,iBAAW,0BACTI,iBAAOI,gBADE,EAETb,UAAUS,iBAAOT,MAFR,CAFb;AAME,aAAO;AACLM;AADK;AANT;AAUE;AAAA;AAAA,QAAK,WAAWG,iBAAOK,UAAvB,EAAmC,OAAOX,KAA1C;AACE;AAAA;AAAA,UAAK,WAAW,0BAAWM,iBAAOP,IAAlB,EAAwBS,UAAxB,CAAhB;AACGX,iBAASC,UAAT,GAAsBC;AADzB,OADF;AAIGM;AAJH;AAVF,GADF;AAmBD;AACDT,iBAAiBgB,SAAjB,GAA6B;AAC3Bb,QAAMc,oBAAUC,IAAV,CAAeC,UADM;AAE3BjB,cAAYe,oBAAUC,IAAV,CAAeC,UAFA;AAG3BlB,UAAQgB,oBAAUG,IAHS;AAI3BhB,SAAOa,oBAAUI,MAJU;AAK3BhB,gBAAcY,oBAAUK,MALG;AAM3Bf,SAAOU,oBAAUM,SAAV,CAAoB,CACzBN,oBAAUK,MADe,EAEzBL,oBAAUI,MAFe,CAApB,EAGJF,UATwB;AAU3Bb,WAASW,oBAAUO,IAVQ;AAW3BhB,aAAWS,oBAAUG;AAXM,CAA7B;AAaApB,iBAAiByB,YAAjB,GAAgC;AAC9BxB,UAAQ,KADsB;AAE9BG,SAAOsB,SAFuB;AAG9BrB,gBAAcqB,SAHgB;AAI9BpB,WAASoB,SAJqB;AAK9BlB,aAAW;AALmB,CAAhC","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\nexport default function NavigationButton({\n  active,\n  activeIcon,\n  icon,\n  label,\n  noticeCounts,\n  onClick,\n  width,\n  keepStyle,\n}) {\n  let notice = null;\n  if (noticeCounts && noticeCounts > 0) {\n    if (noticeCounts > 99) {\n      notice = <div className={styles.notices}>99+</div>;\n    } else {\n      notice = <div className={styles.notice}>{noticeCounts}</div>;\n    }\n  }\n  const styleClass = !keepStyle ? styles.iconStyles : null;\n  return (\n    <div\n      onClick={onClick}\n      className={classnames(\n        styles.navigationButton,\n        active && styles.active\n      )}\n      style={{\n        width,\n      }}\n    >\n      <div className={styles.iconHolder} title={label}>\n        <div className={classnames(styles.icon, styleClass)}>\n          {active ? activeIcon : icon}\n        </div>\n        {notice}\n      </div>\n    </div>\n  );\n}\nNavigationButton.propTypes = {\n  icon: PropTypes.node.isRequired,\n  activeIcon: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  label: PropTypes.string,\n  noticeCounts: PropTypes.number,\n  width: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n  onClick: PropTypes.func,\n  keepStyle: PropTypes.bool,\n};\nNavigationButton.defaultProps = {\n  active: false,\n  label: undefined,\n  noticeCounts: undefined,\n  onClick: undefined,\n  keepStyle: false,\n};\n"]}