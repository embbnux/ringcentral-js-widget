{"version":3,"sources":["components/CallIdSelect/index.js"],"names":["PhoneNumber","formatPhone","usageType","currentLocale","phoneNumber","usageTypeDom","getString","propTypes","func","isRequired","string","defaultProps","CallIdSelect","fromNumber","fromNumbers","onChange","hidden","options","root","selectIcon","value","option","arrayOf","shape","bool"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASA,WAAT,OAKG;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAFDC,aAEC,QAFDA,aAEC;AAAA,MADDC,WACC,QADDA,WACC;;AACD,MAAMC,eAAeH,YAEjB;AAAA;AAAA,MAAM,WAAW,iBAAOA,SAAxB;AACG,mBAAKI,SAAL,CAAeJ,SAAf,EAA0BC,aAA1B;AADH,GAFiB,GAKf,IALN;AAMA,SACE;AAAA;AAAA,MAAM,WAAW,iBAAOC,WAAxB;AACE;AAAA;AAAA;AACGH,kBAAYG,WAAZ;AADH,KADF;AAIGC;AAJH,GADF;AAQD;;AAEDL,YAAYO,SAAZ,GAAwB;AACtBN,eAAa,iBAAUO,IAAV,CAAeC,UADN;AAEtBL,eAAa,iBAAUM,MAFD;AAGtBR,aAAW,iBAAUQ,MAHC;AAItBP,iBAAe,iBAAUO,MAAV,CAAiBD;AAJV,CAAxB;;AAOAT,YAAYW,YAAZ,GAA2B;AACzBP,eAAa,IADY;AAEzBF,aAAW;AAFc,CAA3B;;AAKA,SAASU,YAAT,QAOG;AAAA,MANDC,UAMC,SANDA,UAMC;AAAA,MALDC,WAKC,SALDA,WAKC;AAAA,MAJDC,QAIC,SAJDA,QAIC;AAAA,MAHDd,WAGC,SAHDA,WAGC;AAAA,MAFDe,MAEC,SAFDA,MAEC;AAAA,MADDb,aACC,SADDA,aACC;;AACD,MAAIa,MAAJ,EAAY;AACV,WAAO,IAAP;AACD;AACD,MAAMC,qDACDH,WADC,IAEJ;AACEV,iBAAa;AADf,GAFI,EAAN;AAMA,SACE;AACE,eAAW,iBAAOc,IADpB;AAEE,mBAAe,iBAAOC,UAFxB;AAGE,WAAON,UAHT;AAIE,WAAU,eAAKP,SAAL,CAAe,MAAf,EAAuBH,aAAvB,CAAV,MAJF;AAKE,cAAUY,QALZ;AAME,aAASE,OANX;AAOE,iBAAa,qBAACG,KAAD,EAAW;AACtB,UAAIA,UAAU,WAAd,EAA2B;AACzB,eACE;AAAA;AAAA;AAAO,yBAAKd,SAAL,CAAe,SAAf,EAA0BH,aAA1B;AAAP,SADF;AAGD;AACD,aACE,8BAAC,WAAD;AACE,qBAAaF,WADf;AAEE,qBAAamB,KAFf;AAGE,uBAAejB;AAHjB,QADF;AAOD,KApBH;AAqBE,mBAAe;AAAA,aAAUkB,OAAOjB,WAAjB;AAAA,KArBjB;AAsBE,oBAAgB,wBAACiB,MAAD,EAAY;AAC1B,UAAIA,OAAOjB,WAAP,KAAuB,WAA3B,EAAwC;AACtC,eACE;AAAA;AAAA;AAAO,yBAAKE,SAAL,CAAe,SAAf,EAA0BH,aAA1B;AAAP,SADF;AAGD;AACD,aACE,8BAAC,WAAD;AACE,qBAAaF,WADf;AAEE,qBAAaoB,OAAOjB,WAFtB;AAGE,mBAAWiB,OAAOnB,SAHpB;AAIE,uBAAeC;AAJjB,QADF;AAQD;AApCH,IADF;AAwCD;;AAEDS,aAAaL,SAAb,GAAyB;AACvBM,cAAY,iBAAUH,MADC;AAEvBT,eAAa,iBAAUO,IAAV,CAAeC,UAFL;AAGvBK,eAAa,iBAAUQ,OAAV,CAAkB,iBAAUC,KAAV,CAAgB;AAC7CnB,iBAAa,iBAAUM,MADsB;AAE7CR,eAAW,iBAAUQ;AAFwB,GAAhB,CAAlB,EAGTD,UANmB;AAOvBM,YAAU,iBAAUP,IAAV,CAAeC,UAPF;AAQvBN,iBAAe,iBAAUO,MAAV,CAAiBD,UART;AASvBO,UAAQ,iBAAUQ,IAAV,CAAef;AATA,CAAzB;;AAYAG,aAAaD,YAAb,GAA4B;AAC1BE,cAAY;AADc,CAA5B;;kBAIeD,Y","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport DropdownSelect from '../DropdownSelect';\nimport styles from './styles.scss';\n\nimport i18n from './i18n';\n\nfunction PhoneNumber({\n  formatPhone,\n  usageType,\n  currentLocale,\n  phoneNumber,\n}) {\n  const usageTypeDom = usageType ?\n    (\n      <span className={styles.usageType}>\n        {i18n.getString(usageType, currentLocale)}\n      </span>\n    ) : null;\n  return (\n    <span className={styles.phoneNumber}>\n      <span>\n        {formatPhone(phoneNumber)}\n      </span>\n      {usageTypeDom}\n    </span>\n  );\n}\n\nPhoneNumber.propTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  phoneNumber: PropTypes.string,\n  usageType: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nPhoneNumber.defaultProps = {\n  phoneNumber: null,\n  usageType: null,\n};\n\nfunction CallIdSelect({\n  fromNumber,\n  fromNumbers,\n  onChange,\n  formatPhone,\n  hidden,\n  currentLocale,\n}) {\n  if (hidden) {\n    return null;\n  }\n  const options = [\n    ...fromNumbers,\n    {\n      phoneNumber: 'anonymous',\n    }\n  ];\n  return (\n    <DropdownSelect\n      className={styles.root}\n      iconClassName={styles.selectIcon}\n      value={fromNumber}\n      label={`${i18n.getString('from', currentLocale)}:`}\n      onChange={onChange}\n      options={options}\n      renderValue={(value) => {\n        if (value === 'anonymous') {\n          return (\n            <span>{i18n.getString('Blocked', currentLocale)}</span>\n          );\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={value}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n      valueFunction={option => option.phoneNumber}\n      renderFunction={(option) => {\n        if (option.phoneNumber === 'anonymous') {\n          return (\n            <span>{i18n.getString('Blocked', currentLocale)}</span>\n          );\n        }\n        return (\n          <PhoneNumber\n            formatPhone={formatPhone}\n            phoneNumber={option.phoneNumber}\n            usageType={option.usageType}\n            currentLocale={currentLocale}\n          />\n        );\n      }}\n    />\n  );\n}\n\nCallIdSelect.propTypes = {\n  fromNumber: PropTypes.string,\n  formatPhone: PropTypes.func.isRequired,\n  fromNumbers: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    usageType: PropTypes.string,\n  })).isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  hidden: PropTypes.bool.isRequired,\n};\n\nCallIdSelect.defaultProps = {\n  fromNumber: null,\n};\n\nexport default CallIdSelect;\n"]}