{"version":3,"sources":["components/SettingsPanel/index.js"],"names":["SettingsPanel","children","className","onLogoutButtonClick","loginNumber","version","currentLocale","brandId","EulaRenderer","callingSettingsUrl","regionSettingsUrl","showAutoLog","autoLogEnabled","onAutoLogChange","showAutoLogSMS","autoLogSMSEnabled","onAutoLogSMSChange","showClickToDial","clickToDialEnabled","onClickToDialChange","showRegion","showHeader","ringoutEnabled","outboundSMS","showSpinner","dndStatus","userStatus","setAvailable","setBusy","setDoNotDisturb","setInvisible","toggleAcceptCallQueueCalls","isCallQueueMember","showPresenceSettings","region","getString","presenceSetting","clickToDialText","clickToDial","autoLog","autoLogSMS","header","root","content","contentWithHeader","section","eula","logout","versionContainer","propTypes","string","isRequired","node","func","bool","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\n\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport Header from '../Header';\nimport Panel from '../Panel';\nimport Line from '../Line';\nimport LinkLine from '../LinkLine';\nimport IconLine from '../IconLine';\nimport Eula from '../Eula';\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport PresenceSettingSection from '../PresenceSettingSection';\nimport styles from './styles.scss';\nimport Switch from '../Switch';\nimport i18n from './i18n';\n\nexport default function SettingsPanel({\n  children,\n  className,\n  onLogoutButtonClick,\n  loginNumber,\n  version,\n  currentLocale,\n  brandId,\n  EulaRenderer,\n  callingSettingsUrl,\n  regionSettingsUrl,\n  showAutoLog,\n  autoLogEnabled,\n  onAutoLogChange,\n  showAutoLogSMS,\n  autoLogSMSEnabled,\n  onAutoLogSMSChange,\n  showClickToDial,\n  clickToDialEnabled,\n  onClickToDialChange,\n  showRegion,\n  showHeader,\n  ringoutEnabled,\n  outboundSMS,\n  showSpinner,\n  dndStatus,\n  userStatus,\n  setAvailable,\n  setBusy,\n  setDoNotDisturb,\n  setInvisible,\n  toggleAcceptCallQueueCalls,\n  isCallQueueMember,\n  showPresenceSettings,\n}) {\n  if (showSpinner) {\n    return (\n      <SpinnerOverlay />\n    );\n  }\n  const region = showRegion ?\n    (\n      <LinkLine\n        to={regionSettingsUrl} >\n        {i18n.getString('region', currentLocale)}\n      </LinkLine>\n    ) :\n    null;\n  const presenceSetting = (dndStatus && userStatus) ?\n    (\n      <PresenceSettingSection\n        currentLocale={currentLocale}\n        dndStatus={dndStatus}\n        userStatus={userStatus}\n        isCallQueueMember={isCallQueueMember}\n        setAvailable={setAvailable}\n        setBusy={setBusy}\n        setDoNotDisturb={setDoNotDisturb}\n        setInvisible={setInvisible}\n        toggleAcceptCallQueueCalls={toggleAcceptCallQueueCalls}\n        showPresenceSettings={showPresenceSettings}\n      />\n    ) :\n    null;\n  let clickToDialText;\n  if (outboundSMS && ringoutEnabled) {\n    clickToDialText = i18n.getString('clickToDialSMS', currentLocale);\n  } else if (!outboundSMS && ringoutEnabled) {\n    clickToDialText = i18n.getString('clickToDial', currentLocale);\n  } else if (outboundSMS && !ringoutEnabled) {\n    clickToDialText = i18n.getString('clickToSMS', currentLocale);\n  } else {\n    clickToDialText = '';\n  }\n  const clickToDial = showClickToDial && (\n    outboundSMS || ringoutEnabled) ?\n    (\n      <IconLine\n        icon={\n          <Switch\n            checked={clickToDialEnabled}\n            onChange={onClickToDialChange}\n          />\n        }\n      >\n        {clickToDialText}\n      </IconLine>\n    ) :\n    null;\n  const autoLog = showAutoLog ? (\n    <IconLine\n      icon={\n        <Switch\n          checked={autoLogEnabled}\n          onChange={onAutoLogChange}\n        />\n      }\n    >\n      {i18n.getString('autoLogCalls', currentLocale)}\n    </IconLine>\n  ) :\n    null;\n  const autoLogSMS = showAutoLogSMS ? (\n    <IconLine\n      icon={\n        <Switch\n          checked={autoLogSMSEnabled}\n          onChange={onAutoLogSMSChange}\n        />\n      }\n    >\n      {i18n.getString('autoLogSMS', currentLocale)}\n    </IconLine>\n  ) :\n    null;\n  const header = showHeader ? (\n    <Header>\n      {i18n.getString('settings', currentLocale)}\n    </Header>\n  ) : null;\n  return (\n    <div className={classnames(styles.root, className)}>\n      {header}\n      <Panel\n        className={classnames(\n          styles.content,\n          showHeader && styles.contentWithHeader,\n        )}>\n        <LinkLine\n          to={callingSettingsUrl} >\n          {i18n.getString('calling', currentLocale)}\n        </LinkLine>\n        {region}\n        {presenceSetting}\n        {children}\n        {autoLog}\n        {autoLogSMS}\n        {clickToDial}\n        <section className={styles.section}>\n          <Line>\n            <EulaRenderer\n              className={styles.eula}\n              currentLocale={currentLocale}\n              brandId={brandId} />\n          </Line>\n        </section>\n        <section className={styles.section}>\n          <IconLine\n            onClick={onLogoutButtonClick}\n            icon={\n              <span className={dynamicsFont.logout} />\n            } >\n            {i18n.getString('logout', currentLocale)}\n            <span className={styles.loginNumber}>\n              {` ${loginNumber}`}\n            </span>\n          </IconLine>\n        </section>\n        <div className={styles.versionContainer} >\n          {i18n.getString('version', currentLocale)} {version}\n        </div>\n      </Panel>\n    </div>\n  );\n}\n\nSettingsPanel.propTypes = {\n  brandId: PropTypes.string.isRequired,\n  callingSettingsUrl: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  EulaRenderer: PropTypes.func,\n  loginNumber: PropTypes.string.isRequired,\n  onLogoutButtonClick: PropTypes.func.isRequired,\n  regionSettingsUrl: PropTypes.string.isRequired,\n  showAutoLog: PropTypes.bool,\n  autoLogEnabled: PropTypes.bool,\n  onAutoLogChange: PropTypes.func,\n  showAutoLogSMS: PropTypes.bool,\n  autoLogSMSEnabled: PropTypes.bool,\n  onAutoLogSMSChange: PropTypes.func,\n  showRegion: PropTypes.bool.isRequired,\n  showClickToDial: PropTypes.bool,\n  clickToDialEnabled: PropTypes.bool,\n  onClickToDialChange: PropTypes.func,\n  version: PropTypes.string.isRequired,\n  showHeader: PropTypes.bool,\n  ringoutEnabled: PropTypes.bool,\n  outboundSMS: PropTypes.bool,\n  showSpinner: PropTypes.bool,\n  dndStatus: PropTypes.string,\n  userStatus: PropTypes.string,\n  isCallQueueMember: PropTypes.bool,\n  setAvailable: PropTypes.func,\n  setBusy: PropTypes.func,\n  setDoNotDisturb: PropTypes.func,\n  setInvisible: PropTypes.func,\n  toggleAcceptCallQueueCalls: PropTypes.func,\n  showPresenceSettings: PropTypes.bool,\n};\nSettingsPanel.defaultProps = {\n  className: null,\n  EulaRenderer: Eula,\n  children: null,\n  showClickToDial: false,\n  clickToDialEnabled: false,\n  onClickToDialChange: undefined,\n  showAutoLog: false,\n  autoLogEnabled: false,\n  onAutoLogChange: undefined,\n  showAutoLogSMS: false,\n  autoLogSMSEnabled: false,\n  onAutoLogSMSChange: undefined,\n  showHeader: false,\n  ringoutEnabled: false,\n  outboundSMS: false,\n  showSpinner: false,\n  dndStatus: undefined,\n  userStatus: undefined,\n  isCallQueueMember: false,\n  setAvailable: () => null,\n  setBusy: () => null,\n  setDoNotDisturb: () => null,\n  setInvisible: () => null,\n  toggleAcceptCallQueueCalls: () => null,\n  showPresenceSettings: false,\n};\n"]}