{"version":3,"sources":["components/MessageList/index.js"],"names":["NoMessages","props","placeholder","propTypes","string","isRequired","MessageList","lastScrollHeight","currentScrollHeight","onScroll","totalScrollHeight","messagesListBody","scrollHeight","clientHeight","scrollTop","loadNextPageMessages","messages","messageList","list","length","map","message","type","unreadCounts","conversationId","subject","getMessageRecipientNames","creationTime","formatDateTime","id","arrayOf","shape","number","to","array","from","object","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AAEA;;;;;;AAEA,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SACE;AAAA;AAAA,MAAG,WAAW,iBAAOD,UAArB;AAAkCC,UAAMC;AAAxC,GADF;AAGD;;AAEDF,WAAWG,SAAX,GAAuB;AACrBD,eAAa,iBAAUE,MAAV,CAAiBC;AADT,CAAvB;;IAIqBC,W;;;AACnB,uBAAYL,KAAZ,EAAmB;AAAA;;AAAA,gJACXA,KADW;;AAEjB,QAAIM,mBAAmB,CAAvB;AACA,QAAIC,sBAAsB,CAA1B;;AAEA,UAAKC,QAAL,GAAgB,YAAM;AACpB,UAAMC,oBAAoB,MAAKC,gBAAL,CAAsBC,YAAhD;AACA,UAAMC,eAAe,MAAKF,gBAAL,CAAsBE,YAA3C;AACAL,4BAAsB,MAAKG,gBAAL,CAAsBG,SAA5C;AACA;AACA,UACGJ,oBAAoBH,gBAArB,GAA0CM,eAAe,EAAzD,IACCH,oBAAoBF,mBAArB,IAA8CK,eAAe,EAF/D,EAGE;AACA,cAAKZ,KAAL,CAAWc,oBAAX;AACD;AACDR,yBAAmBC,mBAAnB;AACD,KAZD;AALiB;AAkBlB;;;;6BAEQ;AAAA;;AACP,UAAMQ,WAAW,KAAKf,KAAL,CAAWe,QAA5B;AACA,aACE;AAAA;AAAA;AACE,qBAAW,iBAAOC,WADpB;AAEE,oBAAU,KAAKR,QAFjB;AAGE,eAAK,aAACS,IAAD,EAAU;AAAE,mBAAKP,gBAAL,GAAwBO,IAAxB;AAA+B;AAHlD;AAKGF,oBAAYA,SAASG,MAArB,GACGH,SAASI,GAAT,CACE;AAAA,iBACE;AACE,kBAAMC,QAAQC,IADhB;AAEE,0BAAcD,QAAQE,YAFxB;AAGE,4BAAgBF,QAAQG,cAH1B;AAIE,qBAASH,QAAQI,OAJnB;AAKE,yBAAa,OAAKxB,KAAL,CAAWyB,wBAAX,CAAoCL,OAApC,CALf;AAME,0BAAcA,QAAQM,YANxB;AAOE,4BAAgB,OAAK1B,KAAL,CAAW2B,cAP7B;AAQE,iBAAKP,QAAQQ,EARf,GADF;AAAA,SADF,CADH,GAaG,8BAAC,UAAD,IAAY,aAAa,KAAK5B,KAAL,CAAWC,WAApC;AAlBN,OADF;AAuBD;;;;;kBA9CkBI,W;;;AAiDrBA,YAAYH,SAAZ,GAAwB;AACtBa,YAAU,iBAAUc,OAAV,CAAkB,iBAAUC,KAAV,CAAgB;AAC1CF,QAAI,iBAAUG,MAD4B;AAE1CV,UAAM,iBAAUlB,MAF0B;AAG1CmB,kBAAc,iBAAUS,MAHkB;AAI1CR,oBAAgB,iBAAUpB,MAAV,CAAiBC,UAJS;AAK1CoB,aAAS,iBAAUrB,MALuB;AAM1CuB,kBAAc,iBAAUvB,MANkB;AAO1C6B,QAAI,iBAAUC,KAP4B;AAQ1CC,UAAM,iBAAUC;AAR0B,GAAhB,CAAlB,EASN/B,UAVkB;AAWtBU,wBAAsB,iBAAUsB,IAAV,CAAehC,UAXf;AAYtBH,eAAa,iBAAUE,MAAV,CAAiBC,UAZR;AAatBuB,kBAAgB,iBAAUS,IAAV,CAAehC,UAbT;AActBqB,4BAA0B,iBAAUW,IAAV,CAAehC;AAdnB,CAAxB","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\n\nimport MessageItem from '../MessageItem';\n\nimport styles from './styles.scss';\n\nfunction NoMessages(props) {\n  return (\n    <p className={styles.NoMessages}>{props.placeholder}</p>\n  );\n}\n\nNoMessages.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n};\n\nexport default class MessageList extends Component {\n  constructor(props) {\n    super(props);\n    let lastScrollHeight = 0;\n    let currentScrollHeight = 0;\n\n    this.onScroll = () => {\n      const totalScrollHeight = this.messagesListBody.scrollHeight;\n      const clientHeight = this.messagesListBody.clientHeight;\n      currentScrollHeight = this.messagesListBody.scrollTop;\n      // loadNextPageMessages if srroll near buttom\n      if (\n        (totalScrollHeight - lastScrollHeight) > (clientHeight + 10) &&\n        (totalScrollHeight - currentScrollHeight) <= (clientHeight + 10)\n      ) {\n        this.props.loadNextPageMessages();\n      }\n      lastScrollHeight = currentScrollHeight;\n    };\n  }\n\n  render() {\n    const messages = this.props.messages;\n    return (\n      <div\n        className={styles.messageList}\n        onScroll={this.onScroll}\n        ref={(list) => { this.messagesListBody = list; }}\n      >\n        {messages && messages.length\n          ? messages.map(\n              message =>\n                <MessageItem\n                  type={message.type}\n                  unreadCounts={message.unreadCounts}\n                  conversationId={message.conversationId}\n                  subject={message.subject}\n                  contactList={this.props.getMessageRecipientNames(message)}\n                  creationTime={message.creationTime}\n                  formatDateTime={this.props.formatDateTime}\n                  key={message.id} />\n            )\n          : <NoMessages placeholder={this.props.placeholder} />\n        }\n      </div>\n    );\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    type: PropTypes.string,\n    unreadCounts: PropTypes.number,\n    conversationId: PropTypes.string.isRequired,\n    subject: PropTypes.string,\n    creationTime: PropTypes.string,\n    to: PropTypes.array,\n    from: PropTypes.object,\n  })).isRequired,\n  loadNextPageMessages: PropTypes.func.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  getMessageRecipientNames: PropTypes.func.isRequired,\n};\n"]}