{"version":3,"sources":["components/RecipientHeader/index.js"],"names":["RecipientName","props","recipient","onClick","name","propTypes","string","isRequired","func","MatchedNameList","matchedNames","className","map","matchedName","setDefaultMatchedName","arrayOf","RecipientHeader","state","showDropdownList","toggleDropdown","setState","preState","phoneNumber","extensionNumber","context","getMatcherContactList","length","hasDropdown","title","getRecipientName","dropdownClass","dropdownClassName","active","defaultRecipient","getString","currentLocale","firstMatchedName","isFind","find","oldMatchedNames","slice","sort","join","dropdownIcon","shape","array","node","contextTypes"],"mappings":"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","file":"index.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport classnames from 'classnames';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction RecipientName(props) {\n  return (\n    <a href=\"#recipient\" className={styles.recipient} onClick={props.onClick}>\n      {props.name}\n    </a>\n  );\n}\n\nRecipientName.propTypes = {\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nfunction MatchedNameList(props) {\n  const matchedNames = props.matchedNames;\n  return (\n    <div className={props.className}>\n      {\n        matchedNames.map(matchedName => (\n          <RecipientName\n            key={matchedName}\n            name={matchedName}\n            onClick={\n              () => props.setDefaultMatchedName(matchedName)\n            }\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nMatchedNameList.propTypes = {\n  className: PropTypes.string.isRequired,\n  matchedNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nclass RecipientHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showDropdownList: false,\n    };\n    this.toggleDropdown = () => {\n      this.setState(preState => ({\n        showDropdownList: !preState.showDropdownList,\n      }));\n    };\n    this.setDefaultMatchedName = () => {\n      this.setState(preState => ({\n        showDropdownList: !preState.showDropdownList,\n      }));\n    };\n  }\n\n  hasDropdown() {\n    const recipient = this.props.recipient;\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    const matchedNames = this.context.getMatcherContactList(phoneNumber);\n    return matchedNames.length > 1;\n  }\n\n  render() {\n    const recipient = this.props.recipient;\n    const hasDropdown = this.hasDropdown();\n    if (!hasDropdown) {\n      return (\n        <span className={styles.title}>\n          {this.context.getRecipientName(recipient)}\n        </span>\n      );\n    }\n    let dropdownClass = this.props.dropdownClassName;\n    if (this.state.showDropdownList) {\n      dropdownClass = classnames(dropdownClass, styles.active);\n    }\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    let matchedNames = this.context.getMatcherContactList(phoneNumber);\n    let defaultRecipient = i18n.getString('selectMatchedName', this.props.currentLocale);\n    // if it have old data\n    if (recipient.matchedNames && recipient.matchedNames[0]) {\n      const firstMatchedName = recipient.matchedNames[0];\n      const isFind = matchedNames.find(name => name === firstMatchedName);\n      if (isFind) {\n        defaultRecipient = firstMatchedName;\n      }\n      const oldMatchedNames = recipient.matchedNames.slice().sort();\n      if (matchedNames.sort().join('') === oldMatchedNames.join('')) {\n        matchedNames = oldMatchedNames;\n      }\n    }\n    return (\n      <div>\n        <RecipientName\n          name={defaultRecipient}\n          onClick={this.toggleDropdown}\n        />\n        {this.props.dropdownIcon}\n        <MatchedNameList\n          matchedNames={matchedNames}\n          className={dropdownClass}\n          setDefaultMatchedName={this.setDefaultMatchedName}\n        />\n      </div>\n    );\n  }\n}\n\nRecipientHeader.propTypes = {\n  recipient: PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    extensionNumber: PropTypes.string,\n    name: PropTypes.string,\n    matchedNames: PropTypes.array,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  dropdownIcon: PropTypes.node.isRequired,\n  dropdownClassName: PropTypes.string.isRequired,\n};\n\nRecipientHeader.contextTypes = {\n  getRecipientName: PropTypes.func.isRequired,\n  getMatcherContactList: PropTypes.func.isRequired,\n};\n\nexport default RecipientHeader;\n"]}