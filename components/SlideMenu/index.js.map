{"version":3,"sources":["components/SlideMenu/index.js"],"names":["ToggleButton","onClick","toggleButton","toggleButtonInner","toggleButtonIcon","arrow","propTypes","func","defaultProps","undefined","SlideMenu","props","onMouseEnter","_timestamp","Date","now","setState","expanded","onMouseLeave","onToggle","state","_mounted","children","className","minWidth","maxWidth","wrapperStyles","width","root","wrapper","content","node","string","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,YAAT,OAEG;AAAA,MADDC,OACC,QADDA,OACC;;AACD,SACE;AAAA;AAAA;AACE,iBAAW,iBAAOC,YADpB;AAEE,eAASD;AAFX;AAIE,2CAAK,WAAW,iBAAOE,iBAAvB,GAJF;AAKE;AAAA;AAAA,QAAK,WAAW,iBAAOC,gBAAvB;AACE,8CAAM,WAAW,0BAAW,uBAAcC,KAAzB,CAAjB;AADF;AALF,GADF;AAWD;AACDL,aAAaM,SAAb,GAAyB;AACvBL,WAAS,iBAAUM;AADI,CAAzB;AAGAP,aAAaQ,YAAb,GAA4B;AAC1BP,WAASQ;AADiB,CAA5B;;IAKqBC,S;;;AACnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4IACXA,KADW;;AAAA,UAYnBC,YAZmB,GAYJ,YAAM;AACnB,YAAKC,UAAL,GAAkBC,KAAKC,GAAL,EAAlB;AACA,YAAKC,QAAL,CAAc;AACZC,kBAAU;AADE,OAAd;AAGD,KAjBkB;;AAAA,UAkBnBC,YAlBmB,GAkBJ,YAAM;AACnB,YAAKF,QAAL,CAAc;AACZC,kBAAU;AADE,OAAd;AAGD,KAtBkB;;AAAA,UAuBnBE,QAvBmB,GAuBR,YAAM;AACf;;;;AAIA,UAAIL,KAAKC,GAAL,KAAa,MAAKF,UAAlB,GAA+B,EAAnC,EAAuC;AACrC,cAAKG,QAAL,CAAc;AACZC,oBAAU,CAAC,MAAKG,KAAL,CAAWH;AADV,SAAd;AAGD;AACF,KAjCkB;;AAEjB,UAAKG,KAAL,GAAa;AACXH,gBAAU;AADC,KAAb;AAFiB;AAKlB;;;;wCACmB;AAClB,WAAKI,QAAL,GAAgB,IAAhB;AACD;;;2CACsB;AACrB,WAAKA,QAAL,GAAgB,KAAhB;AACD;;;6BAuBQ;AAAA,mBAMH,KAAKV,KANF;AAAA,UAELW,QAFK,UAELA,QAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,QALK,UAKLA,QALK;AAAA,UAQLR,QARK,GASH,KAAKG,KATF,CAQLH,QARK;;;AAWP,UAAMS,gBAAgB;AACpBC,eAAOV,WACLQ,QADK,GAELD;AAHkB,OAAtB;AAKA,aACE;AAAA;AAAA;AACE,qBAAW,0BACT,iBAAOI,IADE,EAETL,SAFS,EAGTN,YAAY,iBAAOA,QAHV,CADb;AAME,wBAAc,KAAKL,YANrB;AAOE,wBAAc,KAAKM;AAPrB;AASE;AAAA;AAAA,YAAK,WAAW,iBAAOW,OAAvB,EAAgC,OAAOH,aAAvC;AACE;AAAA;AAAA;AACE,yBAAW,iBAAOI;AADpB;AAGGR;AAHH;AADF,SATF;AAgBE,sCAAC,YAAD,IAAc,SAAS,KAAKH,QAA5B;AAhBF,OADF;AAoBD;;;;;kBAvEkBT,S;;;AA0ErBA,UAAUJ,SAAV,GAAsB;AACpBgB,YAAU,iBAAUS,IADA;AAEpBR,aAAW,iBAAUS,MAFD;AAGpBR,YAAU,iBAAUS,MAHA;AAIpBR,YAAU,iBAAUQ;AAJA,CAAtB;AAMAvB,UAAUF,YAAV,GAAyB;AACvBe,aAAWd,SADY;AAEvBa,YAAUb,SAFa;AAGvBe,YAAU,CAHa;AAIvBC,YAAU;AAJa,CAAzB","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport dynamicsFonts from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\n\nfunction ToggleButton({\n  onClick,\n}) {\n  return (\n    <div\n      className={styles.toggleButton}\n      onClick={onClick}\n    >\n      <div className={styles.toggleButtonInner} />\n      <div className={styles.toggleButtonIcon} >\n        <span className={classnames(dynamicsFonts.arrow)} />\n      </div>\n    </div>\n  );\n}\nToggleButton.propTypes = {\n  onClick: PropTypes.func,\n};\nToggleButton.defaultProps = {\n  onClick: undefined,\n};\n\n\nexport default class SlideMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false,\n    };\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onMouseEnter = () => {\n    this._timestamp = Date.now();\n    this.setState({\n      expanded: true,\n    });\n  }\n  onMouseLeave = () => {\n    this.setState({\n      expanded: false,\n    });\n  }\n  onToggle = () => {\n    /* On touch enabled devices or devices with pen inputs, click/touch will trigger\n     * mouseenter event before the click event, in that case, we simply ignore\n     * the click event.\n     */\n    if (Date.now() - this._timestamp > 30) {\n      this.setState({\n        expanded: !this.state.expanded,\n      });\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      minWidth,\n      maxWidth,\n    } = this.props;\n    const {\n      expanded,\n    } = this.state;\n\n    const wrapperStyles = {\n      width: expanded ?\n        maxWidth :\n        minWidth,\n    };\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          className,\n          expanded && styles.expanded,\n        )}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n      >\n        <div className={styles.wrapper} style={wrapperStyles}>\n          <div\n            className={styles.content}\n          >\n            {children}\n          </div>\n        </div>\n        <ToggleButton onClick={this.onToggle} />\n      </div>\n    );\n  }\n}\n\nSlideMenu.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  minWidth: PropTypes.number,\n  maxWidth: PropTypes.number,\n};\nSlideMenu.defaultProps = {\n  className: undefined,\n  children: undefined,\n  minWidth: 0,\n  maxWidth: 100,\n};\n"]}