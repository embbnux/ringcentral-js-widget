{"version":3,"sources":["components/ContactList/index.js"],"names":["CAPTION_HEIGHT","ROW_HEIGHT","NoContacts","currentLocale","styles","noContacts","i18n","getString","propTypes","PropTypes","string","isRequired","ContactList","props","calculateRowHeight","index","state","captionRows","findGroup","item","startIndex","contacts","length","groups","rowGetter","caption","group","onScroll","scrollTop","setState","cellRenderer","rowData","groupCaption","getAvatarUrl","getPresence","onItemSelect","sourceNodeRenderer","type","id","onRowsRendered","groupIndex","captions","previousCaption","currentCaption","headerRenderer","getDerivedStateFromProps","list","React","createRef","prevProps","lastContactGroups","contactGroups","current","recomputeRowHeights","width","height","count","content","renderList","root","nextState","push","rowOffset","Component","arrayOf","shape","ContactItem","contact","func","number","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Column } from 'react-virtualized';\nimport { reduce, find, findIndex } from 'ramda';\nimport ContactItem from '../ContactItem';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst CAPTION_HEIGHT = 20;\nconst ROW_HEIGHT = 50;\n\nfunction NoContacts({ currentLocale }) {\n  return (\n    <p className={styles.noContacts}>\n      {i18n.getString('noContacts', currentLocale)}\n    </p>\n  );\n}\nNoContacts.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n};\n\nexport default class ContactList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = ContactList.getDerivedStateFromProps(props);\n    this.list = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state = { scrollTop: 0, currentCaption: '' }) {\n    if (props.contactGroups !== state.lastContactGroups) {\n      return {\n        ...reduce(\n          (nextState, group) => {\n            nextState.captions.push(group.caption);\n\n            // skip the caption row for the first group\n            const rowOffset = nextState.groups.length !== 0 ?\n              1 :\n              0;\n            if (rowOffset) {\n              nextState.captionRows[nextState.count] = group.caption;\n            }\n            nextState.groups.push({\n              ...group,\n              startIndex: nextState.count + rowOffset,\n            });\n            nextState.count += group.contacts.length + rowOffset; // with caption row\n            return nextState;\n          },\n          {\n            ...state,\n            groups: [],\n            captions: [],\n            captionRows: {},\n            count: 0,\n          },\n          props.contactGroups,\n        ),\n        lastContactGroups: props.contactGroups,\n      };\n    }\n    return state;\n  }\n  componentDidUpdate(prevProps) {\n    if (this.state.lastContactGroups !== prevProps.contactGroups) {\n      if (this.list && this.list.current && this.list.current.recomputeRowHeights) {\n        this.list.current.recomputeRowHeights(0);\n      }\n    }\n  }\n  calculateRowHeight = ({ index }) => {\n    if (this.state.captionRows[index]) {\n      return CAPTION_HEIGHT;\n    }\n    return ROW_HEIGHT;\n  }\n  findGroup = ({ index }) => find(\n    item => (\n      index >= item.startIndex &&\n      index < item.startIndex + item.contacts.length\n    ),\n    this.state.groups,\n  )\n  rowGetter = ({ index }) => {\n    if (this.state.captionRows[index]) {\n      return {\n        caption: this.state.captionRows[index],\n      };\n    }\n    const group = this.findGroup({ index });\n    return group.contacts[index - group.startIndex];\n  }\n  onScroll = ({ scrollTop }) => {\n    if (scrollTop !== this.state.scrollTop) {\n      this.setState({\n        scrollTop,\n      });\n    }\n  }\n  resetScrollTop() {\n    this.setState({\n      scrollTop: 0,\n    });\n  }\n  cellRenderer = ({\n    rowData,\n  }) => {\n    if (rowData.caption) {\n      return (\n        <div\n          className={styles.groupCaption}\n        >\n          {rowData.caption}\n        </div>\n      );\n    }\n    const {\n      currentLocale,\n      getAvatarUrl,\n      getPresence,\n      onItemSelect,\n      sourceNodeRenderer,\n    } = this.props;\n    return (\n      <div\n        key={`${rowData.type}-${rowData.id}`}\n      >\n        <ContactItem\n          currentLocale={currentLocale}\n          contact={rowData}\n          getAvatarUrl={getAvatarUrl}\n          getPresence={getPresence}\n          onSelect={onItemSelect}\n          sourceNodeRenderer={sourceNodeRenderer}\n        />\n      </div>\n    );\n  }\n  onRowsRendered = ({ startIndex }) => {\n    // update header with the correct caption\n    if (this.state.captionRows[startIndex]) {\n      const groupIndex = findIndex(\n        item => item === this.state.captionRows[startIndex],\n        this.state.captions,\n      );\n      const previousCaption = this.state.captions[groupIndex - 1];\n      if (previousCaption !== this.state.currentCaption) {\n        this.setState({\n          currentCaption: previousCaption,\n        });\n      }\n    } else {\n      const group = this.findGroup({ index: startIndex });\n      if (group.caption !== this.state.currentCaption) {\n        this.setState({\n          currentCaption: group.caption,\n        });\n      }\n    }\n  }\n  headerRenderer = () => (\n    <div\n      className={styles.groupCaption}\n    >\n      {this.state.currentCaption}\n    </div>\n  )\n  renderList() {\n    // use table instead of list to allow caption header\n    return (\n      <Table\n        ref={this.list}\n        headerHeight={CAPTION_HEIGHT}\n        width={this.props.width}\n        height={this.props.height}\n        rowCount={this.state.count}\n        rowHeight={this.calculateRowHeight}\n        rowGetter={this.rowGetter}\n        onRowsRendered={this.onRowsRendered}\n        onScroll={this.onScroll}\n        scrollTop={this.state.scrollTop}\n      >\n        <Column\n          dataKey=\"caption\"\n          disableSort\n          flexGrow={1}\n          width={this.props.width}\n          cellRenderer={this.cellRenderer}\n          headerRenderer={this.headerRenderer}\n        />\n      </Table>\n    );\n  }\n  render() {\n    const {\n      currentLocale,\n      contactGroups,\n      width,\n      height,\n    } = this.props;\n    let content = null;\n    if (width !== 0 && height !== 0) {\n      content = contactGroups.length ?\n        this.renderList() :\n        (\n          <NoContacts\n            currentLocale={currentLocale}\n          />\n        );\n    }\n    return (\n      <div\n        className={styles.root}\n      >\n        {content}\n      </div>\n    );\n  }\n}\n\nContactList.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactGroups: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    caption: PropTypes.string.isRequired,\n    contacts: PropTypes.arrayOf(ContactItem.propTypes.contact).isRequired,\n  })).isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  getPresence: PropTypes.func.isRequired,\n  onItemSelect: PropTypes.func,\n  sourceNodeRenderer: PropTypes.func,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nContactList.defaultProps = {\n  onItemSelect: undefined,\n  sourceNodeRenderer: undefined\n};\n"]}