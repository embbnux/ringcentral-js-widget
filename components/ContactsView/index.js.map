{"version":3,"sources":["components/ContactsView/index.js"],"names":["AddContact","className","onClick","styles","addContact","iconContainer","iconNode","propTypes","PropTypes","string","func","isRequired","defaultProps","undefined","ContactsView","props","calculateContentSize","contentWrapper","current","getBoundingClientRect","rect","contentHeight","bottom","top","contentWidth","right","left","onSearchInputChange","value","target","setState","searchString","search","delay","onSourceSelect","searchSource","contactList","resetScrollTop","onResize","_mounted","state","unfold","React","createRef","onUnfoldChange","onVisitPage","window","addEventListener","nextProps","nextState","contactSourceNames","removeEventListener","clearTimeout","_searchTimeoutId","onSearchContact","setTimeout","currentLocale","contactGroups","showSpinner","getAvatarUrl","getPresence","onItemSelect","Filter","contactSourceFilterRenderer","sourceNodeRenderer","children","root","actionBar","searchInput","i18n","getString","actionButton","content","spinner","Component","arrayOf","shape","id","caption","contacts","ContactItem","contact","bool","node","ContactSourceFilter"],"mappings":"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","file":"index.js","sourcesContent":["import { contains } from 'ramda';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport debounce from 'ringcentral-integration/lib/debounce';\nimport Panel from '../Panel';\nimport SearchInput from '../SearchInput';\nimport SpinnerOverlay from '../SpinnerOverlay';\n\nimport ContactList from '../ContactList';\nimport ContactItem from '../ContactItem';\nimport styles from './styles.scss';\nimport i18n from './i18n';\nimport AddContactIcon from '../../assets/images/ContactAdd.svg';\nimport ContactSourceFilter from '../ContactSourceFilter';\n\nfunction AddContact({\n  className,\n  onClick,\n}) {\n  return (\n    <div\n      className={classnames(styles.addContact, className)}\n      onClick={onClick}\n    >\n      <div className={styles.iconContainer}>\n        <AddContactIcon\n          className={styles.iconNode}\n        />\n      </div>\n    </div>\n  );\n}\nAddContact.propTypes = {\n  className: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\nAddContact.defaultProps = {\n  className: undefined,\n};\n\nexport default class ContactsView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchString: props.searchString,\n      unfold: false,\n      contentHeight: 0,\n      contentWidth: 0,\n    };\n    this.contactList = React.createRef();\n    this.contentWrapper = React.createRef();\n    this.onUnfoldChange = (unfold) => {\n      this.setState({\n        unfold,\n      });\n    };\n  }\n  calculateContentSize = () => {\n    if (\n      this.contentWrapper &&\n      this.contentWrapper.current &&\n      this.contentWrapper.current.getBoundingClientRect\n    ) {\n      const rect = this.contentWrapper.current.getBoundingClientRect();\n      return {\n        contentHeight: rect.bottom - rect.top,\n        contentWidth: rect.right - rect.left,\n      };\n    }\n    return {\n      contentHeight: 0,\n      contentWidth: 0\n    };\n  }\n  componentDidMount() {\n    this._mounted = true;\n    if (typeof this.props.onVisitPage === 'function') {\n      this.props.onVisitPage();\n    }\n    this.search({\n      searchSource: this.props.searchSource,\n      searchString: this.state.searchString,\n    });\n    this.setState({\n      ...this.calculateContentSize(),\n    });\n    window.addEventListener('resize', this.onResize);\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.searchString !== this.props.searchString) {\n      nextState.searchString = nextProps.searchString;\n    }\n    if (!contains(nextProps.searchSource, nextProps.contactSourceNames)) {\n      this.search({\n        searchSource: nextProps.contactSourceNames[0],\n        searchString: this.state.searchString,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener('resize', this.onResize);\n    clearTimeout(this._searchTimeoutId);\n  }\n\n  onSearchInputChange = ({ target: { value } }) => {\n    this.setState({\n      searchString: value,\n    });\n    this.search({\n      searchString: value,\n      delay: 100,\n    });\n  }\n\n  onSourceSelect = (searchSource) => {\n    if (\n      this.contactList &&\n      this.contactList.current &&\n      this.contactList.current.resetScrollTop\n    ) {\n      this.contactList.current.resetScrollTop();\n    }\n    this.search({\n      searchSource,\n    });\n  }\n  onResize = debounce(() => {\n    if (this._mounted) {\n      this.setState({\n        ...this.calculateContentSize(),\n      });\n    }\n  }, 300)\n\n  search({\n    searchSource = this.props.searchSource,\n    searchString = this.state.searchString,\n    delay = 0,\n  }) {\n    if (this.props.onSearchContact) {\n      if (this._searchTimeoutId) {\n        clearTimeout(this._searchTimeoutId);\n      }\n      if (delay) {\n        this._searchTimeoutId = setTimeout(\n          () => this.props.onSearchContact({\n            searchSource,\n            searchString,\n          }),\n          delay,\n        );\n      } else {\n        this.props.onSearchContact({\n          searchSource,\n          searchString,\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      currentLocale,\n      contactGroups,\n      contactSourceNames,\n      searchSource,\n      showSpinner,\n      getAvatarUrl,\n      getPresence,\n      onItemSelect,\n      contactSourceFilterRenderer: Filter,\n      sourceNodeRenderer,\n      children\n    } = this.props;\n\n    return (\n      <div className={styles.root}>\n        <div className={styles.actionBar}>\n          <SearchInput\n            className={styles.searchInput}\n            value={this.state.searchString || ''}\n            onChange={this.onSearchInputChange}\n            placeholder={i18n.getString('searchPlaceholder', currentLocale)}\n          />\n          <Filter\n            className={styles.actionButton}\n            currentLocale={currentLocale}\n            contactSourceNames={contactSourceNames}\n            onSourceSelect={this.onSourceSelect}\n            selectedSourceName={searchSource}\n            unfold={this.state.unfold}\n            onUnfoldChange={this.onUnfoldChange}\n          />\n        </div>\n        <Panel\n          className={styles.content}\n        >\n          <div\n            className={styles.contentWrapper}\n            ref={this.contentWrapper}\n          >\n            <ContactList\n              ref={this.contactList}\n              currentLocale={currentLocale}\n              contactGroups={contactGroups}\n              getAvatarUrl={getAvatarUrl}\n              getPresence={getPresence}\n              onItemSelect={onItemSelect}\n              sourceNodeRenderer={sourceNodeRenderer}\n              width={this.state.contentWidth}\n              height={this.state.contentHeight}\n            />\n          </div>\n        </Panel>\n        {showSpinner ? (<SpinnerOverlay className={styles.spinner} />) : null}\n        {children}\n      </div>\n    );\n  }\n}\n\nContactsView.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  contactGroups: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    caption: PropTypes.string.isRequired,\n    contacts: PropTypes.arrayOf(ContactItem.propTypes.contact).isRequired,\n  })).isRequired,\n  contactSourceNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  getPresence: PropTypes.func.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  searchSource: PropTypes.string,\n  searchString: PropTypes.string,\n  onItemSelect: PropTypes.func,\n  onSearchContact: PropTypes.func,\n  contactSourceFilterRenderer: PropTypes.func,\n  sourceNodeRenderer: PropTypes.func,\n  onVisitPage: PropTypes.func,\n  children: PropTypes.node,\n};\n\nContactsView.defaultProps = {\n  searchSource: undefined,\n  searchString: undefined,\n  onItemSelect: undefined,\n  onSearchContact: undefined,\n  contactSourceFilterRenderer: ContactSourceFilter,\n  sourceNodeRenderer: undefined,\n  onVisitPage: undefined,\n  children: undefined,\n};\n"]}