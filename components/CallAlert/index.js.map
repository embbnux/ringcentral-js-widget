{"version":3,"sources":["components/CallAlert/index.js"],"names":["CallAlert","TELUS_ID","message","id","payload","brand","onAreaCodeLinkClick","currentLocale","callErrors","specialNumber","phoneNumber","i18n","getString","noAreaCode","areaCode","areaCodeLink","styles","link","e","preventDefault","alertId","noInternational","fullName","propTypes","PropTypes","func","shape","string","isRequired","object","defaultProps","undefined","handleMessage","noToNumber","connectFailed","internalError","notAnExtension","networkError","noRingoutEnable"],"mappings":";;;;;kBAQwBA,S;;AARxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,WAAW,MAAjB;AACe,SAASD,SAAT,OASZ;AAAA,0BARDE,OAQC;AAAA,MAPCC,EAOD,gBAPCA,EAOD;AAAA,MANCD,OAMD,gBANCA,OAMD;AAAA,MALCE,OAKD,gBALCA,OAKD;AAAA,MAHDC,KAGC,QAHDA,KAGC;AAAA,MAFDC,mBAEC,QAFDA,mBAEC;AAAA,MADDC,aACC,QADDA,aACC;;AACD;AACA;AACA,MACEF,SAASA,MAAMF,EAAN,KAAaF,QAAtB,IACAC,YAAYM,qBAAWC,aADvB,IAEAL,OAFA,IAEWA,QAAQM,WAAR,KAAwB,KAHrC,EAIE;AACA,WAAQ;AAAA;AAAA;AAAOC,qBAAKC,SAAL,CAAe,UAAf,EAA2BL,aAA3B;AAAP,KAAR;AACD;AACD,MAAIL,YAAYM,qBAAWK,UAA3B,EAAuC;AACrC,QAAMC,WAAWH,eAAKC,SAAL,CAAe,UAAf,EAA2BL,aAA3B,CAAjB;AACA,QAAMQ,eAAeT,sBAEjB;AAAA;AAAA;AACE,mBAAWU,iBAAOC,IADpB;AAEE,iBAAS,iBAACC,CAAD,EAAO;AACdA,YAAEC,cAAF;AACAb,8BAAoB,EAAEc,SAASjB,EAAX,EAApB;AACD,SALH;AAMGW;AANH,KAFiB,GAWnBA,QAXF;AAYA,WACE,8BAAC,0BAAD;AACE,eAASH,eAAKC,SAAL,CAAeV,OAAf,EAAwBK,aAAxB,CADX;AAEE,cAAQ,EAAEQ,0BAAF,EAFV,GADF;AAKD;AACD,MAAIb,YAAYM,qBAAWa,eAA3B,EAA4C;AAC1C,WACE,8BAAC,0BAAD;AACE,eAASV,eAAKC,SAAL,CAAeV,OAAf,EAAwBK,aAAxB,CADX;AAEE,cAAQ,EAAEF,OAAOA,MAAMiB,QAAf,EAFV,GADF;AAKD;AACD,SACE;AAAA;AAAA;AAAOX,mBAAKC,SAAL,CAAeV,OAAf,EAAwBK,aAAxB;AAAP,GADF;AAGD;;AAEDP,UAAUuB,SAAV,GAAsB;AACpBjB,uBAAqBkB,oBAAUC,IADX;AAEpBvB,WAASsB,oBAAUE,KAAV,CAAgB;AACvBxB,aAASsB,oBAAUG,MAAV,CAAiBC;AADH,GAAhB,EAENA,UAJiB;AAKpBvB,SAAOmB,oBAAUK,MAAV,CAAiBD,UALJ;AAMpBrB,iBAAeiB,oBAAUG,MAAV,CAAiBC;AANZ,CAAtB;AAQA5B,UAAU8B,YAAV,GAAyB;AACvBxB,uBAAqByB;AADE,CAAzB;;AAIA/B,UAAUgC,aAAV,GAA0B;AAAA,MAAG9B,OAAH,SAAGA,OAAH;AAAA,SACxBA,YAAYM,qBAAWyB,UAAvB,IACA/B,YAAYM,qBAAWK,UADvB,IAEAX,YAAYM,qBAAWC,aAFvB,IAGAP,YAAYM,qBAAW0B,aAHvB,IAIAhC,YAAYM,qBAAW2B,aAJvB,IAKAjC,YAAYM,qBAAW4B,cALvB,IAMAlC,YAAYM,qBAAW6B,YANvB,IAOAnC,YAAYM,qBAAWa,eAPvB,IAQAnB,YAAYM,qBAAW8B,eATC;AAAA,CAA1B","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport callErrors from 'ringcentral-integration/modules/Call/callErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst TELUS_ID = '7310';\nexport default function CallAlert({\n  message: {\n    id,\n    message,\n    payload,\n  },\n  brand,\n  onAreaCodeLinkClick,\n  currentLocale,\n}) {\n  // If brand is Telus and special number is 911,\n  // show messages of its own version.\n  if (\n    brand && brand.id === TELUS_ID &&\n    message === callErrors.specialNumber &&\n    payload && payload.phoneNumber === '911'\n  ) {\n    return (<span>{i18n.getString('telus911', currentLocale)}</span>);\n  }\n  if (message === callErrors.noAreaCode) {\n    const areaCode = i18n.getString('areaCode', currentLocale);\n    const areaCodeLink = onAreaCodeLinkClick ?\n      (\n        <a\n          className={styles.link}\n          onClick={(e) => {\n            e.preventDefault();\n            onAreaCodeLinkClick({ alertId: id });\n          }} >\n          {areaCode}\n        </a>\n      ) :\n      areaCode;\n    return (\n      <FormattedMessage\n        message={i18n.getString(message, currentLocale)}\n        values={{ areaCodeLink }} />\n    );\n  }\n  if (message === callErrors.noInternational) {\n    return (\n      <FormattedMessage\n        message={i18n.getString(message, currentLocale)}\n        values={{ brand: brand.fullName }} />\n    );\n  }\n  return (\n    <span>{i18n.getString(message, currentLocale)}</span>\n  );\n}\n\nCallAlert.propTypes = {\n  onAreaCodeLinkClick: PropTypes.func,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n  brand: PropTypes.object.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n};\nCallAlert.defaultProps = {\n  onAreaCodeLinkClick: undefined\n};\n\nCallAlert.handleMessage = ({ message }) => (\n  message === callErrors.noToNumber ||\n  message === callErrors.noAreaCode ||\n  message === callErrors.specialNumber ||\n  message === callErrors.connectFailed ||\n  message === callErrors.internalError ||\n  message === callErrors.notAnExtension ||\n  message === callErrors.networkError ||\n  message === callErrors.noInternational ||\n  message === callErrors.noRingoutEnable\n);\n"]}