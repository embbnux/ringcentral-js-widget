{"version":3,"sources":["components/CopyToClipboard/index.js"],"names":["CopyToClipboard","copyTextArea","focus","select","result","document","execCommand","blur","props","handleSuccess","handleFailure","e","console","error","currentLocale","buttonClassName","disabled","copiedText","buttonText","CustomButton","button","styles","container","ref","primaryButton","executeCopy","i18n","getString","Component","propTypes","PropTypes","string","isRequired","func","bool","node","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAGMA,e;;;;;;;;;;kCACU;AACZ,WAAKC,YAAL,CAAkBC,KAAlB;AACA,WAAKD,YAAL,CAAkBE,MAAlB;AACA,UAAI;AACF,YAAMC,SAASC,SAASC,WAAT,CAAqB,MAArB,CAAf;AACA,YAAIF,MAAJ,EAAY;AACV,eAAKH,YAAL,CAAkBM,IAAlB;AACA,cAAI,OAAO,KAAKC,KAAL,CAAWC,aAAlB,KAAoC,UAAxC,EAAoD,KAAKD,KAAL,CAAWC,aAAX;AACrD,SAHD,MAGO,IAAI,OAAO,KAAKD,KAAL,CAAWE,aAAlB,KAAoC,UAAxC,EAAoD;AACzD,eAAKF,KAAL,CAAWE,aAAX;AACD;AACF,OARD,CAQE,OAAOC,CAAP,EAAU;AACVC,gBAAQC,KAAR,CAAcF,CAAd;AACA,YAAI,OAAO,KAAKH,KAAL,CAAWE,aAAlB,KAAoC,UAAxC,EAAoD;AAClD,eAAKF,KAAL,CAAWE,aAAX;AACD;AACF;AACF;;;6BAEQ;AAAA;;AAAA,mBAQH,KAAKF,KARF;AAAA,UAELM,aAFK,UAELA,aAFK;AAAA,UAGLC,eAHK,UAGLA,eAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,UALK,UAKLA,UALK;AAAA,UAMLC,UANK,UAMLA,UANK;AAAA,UAOGC,YAPH,UAOLC,MAPK;;AASP,aACE;AAAA;AAAA,UAAK,WAAWC,iBAAOC,SAAvB;AACE;AACE,qBAAWD,iBAAOpB,YADpB;AAEE,eAAK,aAACsB,IAAD,EAAS;AAAE,mBAAKtB,YAAL,GAAoBsB,IAApB;AAA0B,WAF5C;AAGE,wBAAcN,UAHhB,GADF;AAMIE,uBACE,8BAAC,YAAD,EAAkB,KAAKX,KAAvB,CADF,GAGE;AAAC,0BAAD;AAAA;AACE,sBAAUQ,QADZ;AAEE,uBAAW,0BAAWK,iBAAOG,aAAlB,EAAiCT,eAAjC,CAFb;AAGE,qBAAS;AAAA,qBAAM,OAAKU,WAAL,EAAN;AAAA,aAHX;AAIIP,wBAAcQ,eAAKC,SAAL,CAAe,iBAAf,EAAkCb,aAAlC;AAJlB;AATN,OADF;AAoBD;;;EAjD2Bc,gB;;AAqD9B5B,gBAAgB6B,SAAhB,GAA4B;AAC1Bf,iBAAegB,oBAAUC,MAAV,CAAiBC,UADN;AAE1BvB,iBAAeqB,oBAAUG,IAFC;AAG1BvB,iBAAeoB,oBAAUG,IAHC;AAI1BlB,mBAAiBe,oBAAUC,MAJD;AAK1Bf,YAAUc,oBAAUI,IALM;AAM1BjB,cAAYa,oBAAUC,MANI;AAO1Bb,cAAYY,oBAAUC,MAPI;AAQ1BX,UAAQU,oBAAUK;AARQ,CAA5B;;AAWAnC,gBAAgBoC,YAAhB,GAA+B;AAC7B3B,iBAAe4B,SADc;AAE7B3B,iBAAe2B,SAFc;AAG7BtB,mBAAiBsB,SAHY;AAI7BrB,YAAUqB,SAJmB;AAK7BpB,cAAYoB,SALiB;AAM7BnB,cAAYmB,SANiB;AAO7BjB,UAAQiB;AAPqB,CAA/B;;kBAUerC,e","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Button from '../Button';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\n\nclass CopyToClipboard extends Component {\n  executeCopy() {\n    this.copyTextArea.focus();\n    this.copyTextArea.select();\n    try {\n      const result = document.execCommand('copy');\n      if (result) {\n        this.copyTextArea.blur();\n        if (typeof this.props.handleSuccess === 'function') this.props.handleSuccess();\n      } else if (typeof this.props.handleFailure === 'function') {\n        this.props.handleFailure();\n      }\n    } catch (e) {\n      console.error(e);\n      if (typeof this.props.handleFailure === 'function') {\n        this.props.handleFailure();\n      }\n    }\n  }\n\n  render() {\n    const {\n      currentLocale,\n      buttonClassName,\n      disabled,\n      copiedText,\n      buttonText,\n      button: CustomButton,\n    } = this.props;\n    return (\n      <div className={styles.container}>\n        <textarea\n          className={styles.copyTextArea}\n          ref={(ref) => { this.copyTextArea = ref; }}\n          defaultValue={copiedText} />\n        {\n          CustomButton ? (\n            <CustomButton {...this.props} />\n          ) : (\n            <Button\n              disabled={disabled}\n              className={classnames(styles.primaryButton, buttonClassName)}\n              onClick={() => this.executeCopy()}>\n              { buttonText || i18n.getString('copyToClipboard', currentLocale)}\n            </Button>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n\nCopyToClipboard.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  handleSuccess: PropTypes.func,\n  handleFailure: PropTypes.func,\n  buttonClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  copiedText: PropTypes.string,\n  buttonText: PropTypes.string,\n  button: PropTypes.node,\n};\n\nCopyToClipboard.defaultProps = {\n  handleSuccess: undefined,\n  handleFailure: undefined,\n  buttonClassName: undefined,\n  disabled: undefined,\n  copiedText: undefined,\n  buttonText: undefined,\n  button: undefined,\n};\n\nexport default CopyToClipboard;\n"]}