{"version":3,"sources":["components/AudioSettingsPanel/index.js"],"names":["AudioSettingsPanel","props","onSave","state","dialButtonVolume","dialButtonMuted","ringtoneVolume","ringtoneMuted","callVolume","inputDeviceId","outputDeviceId","onReset","setState","onDialButtonVolumeChange","onDialButtonMutedChange","onRingtoneVolumeChange","onRingtoneMutedChange","onCallVolumeChange","onOutputDeviceIdChange","device","deviceId","onInputDeviceIdChange","renderOutputDevice","value","availableOutputDevices","label","renderInputDevice","availableInputDevices","newProps","currentLocale","onBackButtonClick","className","supportDevices","userMedia","isWebRTC","checkUserMedia","outputDeviceDisabled","inputDeviceDisabled","hasChanges","permission","i18n","getString","outputDevice","styles","select","length","renderDeviceOption","renderDeviceValue","inputDevice","root","content","Component","devicePropType","PropTypes","string","isRequired","propTypes","number","bool","func","arrayOf","shape","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import { all, find } from 'ramda';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport InputField from '../InputField';\nimport Select from '../DropdownSelect';\nimport Button from '../Button';\nimport SaveButton from '../SaveButton';\nimport IconLine from '../IconLine';\n\nexport default class AudioSettingsPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dialButtonVolume: props.dialButtonVolume,\n      dialButtonMuted: props.dialButtonMuted,\n      ringtoneVolume: props.ringtoneVolume,\n      ringtoneMuted: props.ringtoneMuted,\n      callVolume: props.callVolume,\n      inputDeviceId: props.inputDeviceId,\n      outputDeviceId: props.outputDeviceId,\n    };\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.dialButtonVolume !== this.props.dialButtonVolume) {\n      this.setState({\n        dialButtonVolume: newProps.dialButtonVolume,\n      });\n    }\n    if (newProps.dialButtonMuted !== this.props.dialButtonMuted) {\n      this.setState({\n        dialButtonMuted: newProps.dialButtonMuted,\n      });\n    }\n    if (newProps.ringtoneVolume !== this.props.ringtoneVolume) {\n      this.setState({\n        ringtoneVolume: newProps.ringtoneVolume,\n      });\n    }\n    if (newProps.ringtoneMuted !== this.props.ringtoneMuted) {\n      this.setState({\n        ringtoneMuted: newProps.ringtoneMuted,\n      });\n    }\n    if (newProps.callVolume !== this.props.callVolume) {\n      this.setState({\n        callVolume: newProps.callVolume,\n      });\n    }\n    if (newProps.inputDeviceId !== this.props.inputDeviceId || all(\n      device => device.deviceId !== this.state.inputDeviceId,\n      newProps.availableInputDevices\n    )) {\n      this.setState({\n        inputDeviceId: newProps.inputDeviceId,\n      });\n    }\n    if (newProps.outputDeviceId !== this.props.outputDeviceId || all(\n      device => device.deviceId !== this.state.outputDeviceId,\n      newProps.availableOutputDevices\n    )) {\n      this.setState({\n        outputDeviceId: newProps.outputDeviceId,\n      });\n    }\n  }\n  onSave = () => {\n    if (typeof this.props.onSave === 'function') {\n      const {\n        dialButtonVolume,\n        dialButtonMuted,\n        ringtoneVolume,\n        ringtoneMuted,\n        callVolume,\n        inputDeviceId,\n        outputDeviceId,\n      } = this.state;\n      this.props.onSave({\n        dialButtonVolume,\n        dialButtonMuted,\n        ringtoneVolume,\n        ringtoneMuted,\n        callVolume,\n        inputDeviceId,\n        outputDeviceId,\n      });\n    }\n  }\n  onReset = () => {\n    const {\n      dialButtonVolume,\n      dialButtonMuted,\n      ringtoneVolume,\n      ringtoneMuted,\n      callVolume,\n      inputDeviceId,\n      outputDeviceId,\n    } = this.props;\n    this.setState({\n      dialButtonVolume,\n      dialButtonMuted,\n      ringtoneVolume,\n      ringtoneMuted,\n      callVolume,\n      inputDeviceId,\n      outputDeviceId,\n    });\n  }\n  onDialButtonVolumeChange = (dialButtonVolume) => {\n    this.setState({\n      dialButtonVolume,\n    });\n  }\n  onDialButtonMutedChange = (dialButtonMuted) => {\n    this.setState({\n      dialButtonMuted,\n    });\n  }\n  onRingtoneVolumeChange = (ringtoneVolume) => {\n    this.setState({\n      ringtoneVolume,\n    });\n  }\n  onRingtoneMutedChange = (ringtoneMuted) => {\n    this.setState({\n      ringtoneMuted,\n    });\n  }\n  onCallVolumeChange = (callVolume) => {\n    this.setState({\n      callVolume,\n    });\n  }\n  onOutputDeviceIdChange = (device) => {\n    this.setState({\n      outputDeviceId: device.deviceId,\n    });\n  }\n  onInputDeviceIdChange = (device) => {\n    this.setState({\n      inputDeviceId: device.deviceId,\n    });\n  }\n  renderDeviceOption(device) {\n    return device.label;\n  }\n  renderDeviceValue(device) {\n    return device.deviceId;\n  }\n  renderOutputDevice = (value) => {\n    const device = find(\n      device => device.deviceId === value,\n      this.props.availableOutputDevices\n    );\n    return device && device.label || value;\n  }\n  renderInputDevice = (value) => {\n    const device = find(\n      device => device.deviceId === value,\n      this.props.availableInputDevices\n    );\n    return device && device.label || value;\n  }\n\n  render() {\n    const {\n      currentLocale,\n      onBackButtonClick,\n      className,\n      availableOutputDevices,\n      availableInputDevices,\n      supportDevices,\n      userMedia,\n      isWebRTC,\n      checkUserMedia,\n      outputDeviceDisabled,\n      inputDeviceDisabled,\n    } = this.props;\n    const {\n      dialButtonVolume,\n      dialButtonMuted,\n      ringtoneVolume,\n      ringtoneMuted,\n      callVolume,\n      outputDeviceId,\n      inputDeviceId,\n    } = this.state;\n    const hasChanges = (\n      this.props.dialButtonVolume !== dialButtonVolume ||\n      this.props.dialButtonMuted !== dialButtonMuted ||\n      this.props.ringtoneVolume !== ringtoneVolume ||\n      this.props.ringtoneMuted !== ringtoneMuted ||\n      this.props.callVolume !== callVolume ||\n      this.props.inputDeviceId !== inputDeviceId ||\n      this.props.outputDeviceId !== outputDeviceId\n    );\n\n    // TODO: improve UI\n    const permission = !userMedia ? (\n      <IconLine\n        noBorder\n        icon={\n          <Button onClick={checkUserMedia}>\n            {i18n.getString('checkMicPermission')}\n          </Button>\n        }>\n        {i18n.getString('micNoPermissionMessage')}\n      </IconLine>\n    ) : null;\n\n    // const webphoneVolume = isWebRTC ?\n    //   (\n    //     <div>\n    //       <InputField\n    //         label={i18n.getString('ringtoneVolume', currentLocale)}\n    //     >\n    //         {`${ringtoneVolume * 100}%`}\n    //       </InputField>\n    //       <InputField\n    //         label={i18n.getString('callVolume', currentLocale)}\n    //     >\n    //         {`${callVolume * 100}%`}\n    //       </InputField>\n    //     </div>\n    //   ) : null;\n\n    const outputDevice = supportDevices ? (\n      <InputField\n        label={i18n.getString('outputDevice', currentLocale)}\n        noBorder>\n        <Select\n          className={styles.select}\n          disabled={outputDeviceDisabled}\n          value={\n            availableOutputDevices.length ? outputDeviceId :\n              i18n.getString('noDevice', currentLocale)\n          }\n          onChange={this.onOutputDeviceIdChange}\n          options={availableOutputDevices}\n          dropdownAlign=\"left\"\n          renderFunction={this.renderDeviceOption}\n          valueFunction={this.renderDeviceValue}\n          renderValue={this.renderOutputDevice}\n          titleEnabled\n        />\n      </InputField>\n    ) : null;\n\n    const inputDevice = supportDevices ? (\n      <InputField\n        label={i18n.getString('inputDevice', currentLocale)}\n        noBorder>\n        <Select\n          className={styles.select}\n          disabled={inputDeviceDisabled}\n          value={\n            availableInputDevices.length ? inputDeviceId :\n              i18n.getString('noDevice', currentLocale)\n          }\n          onChange={this.onInputDeviceIdChange}\n          options={availableInputDevices}\n          dropdownAlign=\"left\"\n          renderFunction={this.renderDeviceOption}\n          valueFunction={this.renderDeviceValue}\n          renderValue={this.renderInputDevice}\n          titleEnabled\n        />\n      </InputField>\n    ) : null;\n\n    return (\n      <div className={classnames(styles.root, className)}>\n        <BackHeader onBackClick={onBackButtonClick}>\n          {i18n.getString('title', currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          {\n            // <InputField\n            //   label={i18n.getString('dialButtonVolume', currentLocale)}\n            // >\n            //   {`${dialButtonVolume * 100}%`}\n            // </InputField>\n            // webphoneVolume\n          }\n          {outputDevice}\n          {inputDevice}\n          {permission}\n          <SaveButton\n            currentLocale={currentLocale}\n            onClick={this.onSave}\n            disabled={!hasChanges}\n          />\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst devicePropType = {\n  deviceId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n};\n\nAudioSettingsPanel.propTypes = {\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  dialButtonVolume: PropTypes.number.isRequired,\n  ringtoneVolume: PropTypes.number.isRequired,\n  ringtoneMuted: PropTypes.bool.isRequired,\n  callVolume: PropTypes.number.isRequired,\n  dialButtonMuted: PropTypes.bool.isRequired,\n  onBackButtonClick: PropTypes.func.isRequired,\n  availableInputDevices: PropTypes.arrayOf(PropTypes.shape(devicePropType)).isRequired,\n  inputDeviceId: PropTypes.string.isRequired,\n  availableOutputDevices: PropTypes.arrayOf(PropTypes.shape(devicePropType)).isRequired,\n  outputDeviceId: PropTypes.string.isRequired,\n  supportDevices: PropTypes.bool.isRequired,\n  onSave: PropTypes.func.isRequired,\n  userMedia: PropTypes.bool.isRequired,\n  isWebRTC: PropTypes.bool.isRequired,\n  checkUserMedia: PropTypes.func.isRequired,\n  outputDeviceDisabled: PropTypes.bool,\n  inputDeviceDisabled: PropTypes.bool,\n};\n\nAudioSettingsPanel.defaultProps = {\n  className: null,\n  outputDeviceDisabled: false,\n  inputDeviceDisabled: false,\n};\n"]}