{"version":3,"sources":["components/CheckBox/index.js"],"names":["CheckBox","data","selected","onSelect","valueField","textField","className","props","isListObject","map","item","key","isSelected","checkStyle","styles","selectedCheckButton","onClick","extraInfo","renderExtraInfo","disabled","checkButton","text","propTypes","PropTypes","string","any","isRequired","array","func","defaultProps"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,QAAT,OAUE;AAAA,MAREC,IAQF,QAREA,IAQF;AAAA,MAPEC,QAOF,QAPEA,QAOF;AAAA,MANEC,QAMF,QANEA,QAMF;AAAA,MALEC,UAKF,QALEA,UAKF;AAAA,MAJEC,SAIF,QAJEA,SAIF;AAAA,MAHEC,SAGF,QAHEA,SAGF;AAAA,MAFKC,KAEL;;AACA,MAAMC,eAAe,CAAC,EAAEH,aAAaD,UAAf,CAAtB;AACA,SACE;AAAA;AAAA,MAAK,WAAWE,SAAhB;AAEIL,SAAKQ,GAAL,CAAS,UAACC,IAAD,EAAOC,GAAP,EAAe;AACtB,UAAMC,aAAaV,cAAcM,eAAeE,KAAKN,UAAL,CAAf,GAAkCM,IAAhD,CAAnB;AACA,UAAMG,aAAaD,aAAaE,iBAAOC,mBAApB,GAA0C,IAA7D;AACA,UAAMC,UAAU,SAAVA,OAAU;AAAA,eAAMb,SAASO,IAAT,CAAN;AAAA,OAAhB;AACA,UAAMO,YAAY,OAAOP,KAAKQ,eAAZ,KAAgC,UAAhC,IAA8CN,UAA9C,GAChBF,KAAKQ,eAAL,4BAA0BX,KAA1B,EADgB,GAEhB,IAFF;AAGA,aACE;AAAA;AAAA,UAAK,KAAKI,GAAV;AACE;AAAA;AAAA;AACE,qBAASK,OADX;AAEE,uBAAW,0BAAWF,iBAAOJ,IAAlB,EAAwBA,QAAQA,KAAKS,QAAb,GAAwBL,iBAAOK,QAA/B,GAA0C,IAAlE,CAFb;AAGE,iDAAK,WAAW,0BAAWL,iBAAOM,WAAlB,EAA+BP,UAA/B,CAAhB,GAHF;AAIE;AAAA;AAAA,cAAK,WAAWC,iBAAOO,IAAvB;AACIb,2BAAeE,KAAKL,SAAL,CAAf,GAAiCK;AADrC;AAJF,SADF;AASGO;AATH,OADF;AAaD,KApBD;AAFJ,GADF;AA2BD;;AAEDjB,SAASsB,SAAT,GAAqB;AACnBlB,cAAYmB,oBAAUC,MADH;AAEnBnB,aAAWkB,oBAAUC,MAFF;AAGnBtB,YAAUqB,oBAAUE,GAAV,CAAcC,UAHL;AAInBzB,QAAMsB,oBAAUI,KAAV,CAAgBD,UAJH;AAKnBvB,YAAUoB,oBAAUK,IAAV,CAAeF,UALN;AAMnBpB,aAAWiB,oBAAUC;AANF,CAArB;;AASAxB,SAAS6B,YAAT,GAAwB;AACtBxB,aAAW,IADW;AAEtBD,cAAY,IAFU;AAGtBE,aAAW;AAHW,CAAxB;;kBAMeN,Q","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\nfunction CheckBox(\n  {\n    data,\n    selected,\n    onSelect,\n    valueField,\n    textField,\n    className,\n    ...props\n  }\n) {\n  const isListObject = !!(textField && valueField);\n  return (\n    <div className={className}>\n      {\n        data.map((item, key) => {\n          const isSelected = selected === (isListObject ? item[valueField] : item);\n          const checkStyle = isSelected ? styles.selectedCheckButton : null;\n          const onClick = () => onSelect(item);\n          const extraInfo = typeof item.renderExtraInfo === 'function' && isSelected ?\n            item.renderExtraInfo({ ...props }) :\n            null;\n          return (\n            <div key={key}>\n              <div\n                onClick={onClick}\n                className={classnames(styles.item, item && item.disabled ? styles.disabled : null)}>\n                <div className={classnames(styles.checkButton, checkStyle)} />\n                <div className={styles.text}>\n                  { isListObject ? item[textField] : item }\n                </div>\n              </div>\n              {extraInfo}\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n}\n\nCheckBox.propTypes = {\n  valueField: PropTypes.string,\n  textField: PropTypes.string,\n  selected: PropTypes.any.isRequired,\n  data: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nCheckBox.defaultProps = {\n  textField: null,\n  valueField: null,\n  className: null,\n};\n\nexport default CheckBox;\n"]}