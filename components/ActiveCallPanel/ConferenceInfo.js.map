{"version":3,"sources":["components/ActiveCallPanel/ConferenceInfo.js"],"names":["MAXIMUM_AVATARS","WIDTH_PER_AVATAR","parseInt","styles","conferenceAvatarSize","AVATAR_MERGIN_LEFT","avatarMerginLeftSize","PEDDING_WIDTH","avatarPaddingSize","minWidthCalculator","count","KINDS_OF_WIDTH_THAT_NEED_ADAPATER","avartarCount","width","ConferenceInfo","props","onWindowResize","updateAvatarAmounts","state","avatarCount","_container","React","createRef","partyProfiles","avatarProfilesCount","length","_mounted","current","clientWidth","firstMatchWidth","find","it","_computeAvatarCountByWindowWidth","setState","nextProps","window","addEventListener","removeEventListener","nextState","oldpartyProfiles","showUpdate","Array","isArray","i","id","profiles","displayedProfiles","slice","remains","currentLocale","onClick","computeDisplayedProfiles","conferenceCallInfoContainer","avatarContainer","clickable","e","preventDefault","map","idx","avatarUrl","toUserName","avatar","backgroundColor","dynamicsFont","portrait","icon","info","i18n","getString","Component","propTypes","PropTypes","string","isRequired","arrayOf","shape","func","defaultProps"],"mappings":"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","file":"ConferenceInfo.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport debounce from 'ringcentral-integration/lib/debounce';\n\nimport CallAvatar from '../CallAvatar';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst MAXIMUM_AVATARS = 4;\n\nconst WIDTH_PER_AVATAR = parseInt(styles.conferenceAvatarSize, 0); // 51\n\nconst AVATAR_MERGIN_LEFT = parseInt(styles.avatarMerginLeftSize, 0); // -20\nconst PEDDING_WIDTH = parseInt(styles.avatarPaddingSize, 0); // 15\n\nconst minWidthCalculator = count =>\n  (WIDTH_PER_AVATAR * count) +\n  AVATAR_MERGIN_LEFT * (count - 1) + (PEDDING_WIDTH * 2) + 1 + 2;\n\n// when the container width reachs below item of width, display the avatar amount of count.\nconst KINDS_OF_WIDTH_THAT_NEED_ADAPATER = [\n  { avartarCount: 0, width: minWidthCalculator(1), },\n  { avartarCount: 1, width: minWidthCalculator(3), },\n  { avartarCount: 2, width: minWidthCalculator(MAXIMUM_AVATARS), },\n  { avartarCount: 3, width: minWidthCalculator(MAXIMUM_AVATARS + 1), },\n];\n\nexport default class ConferenceInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avatarCount: MAXIMUM_AVATARS,\n    };\n\n    this._container = React.createRef();\n  }\n\n  _computeAvatarCountByWindowWidth(props) {\n    const { partyProfiles } = props;\n    const avatarProfilesCount = (partyProfiles && partyProfiles.length) || 0;\n\n    if (!this._mounted) {\n      if (avatarProfilesCount >= MAXIMUM_AVATARS) {\n        return MAXIMUM_AVATARS;\n      }\n      return avatarProfilesCount;\n    }\n\n    const width = (\n      this._container &&\n      this._container.current &&\n      this._container.current.clientWidth\n    );\n\n    let avatarCount = avatarProfilesCount;\n\n    const firstMatchWidth = KINDS_OF_WIDTH_THAT_NEED_ADAPATER.find(it => width < it.width);\n\n    if (firstMatchWidth) {\n      avatarCount = firstMatchWidth.avartarCount;\n      if (avatarCount + 1 === avatarProfilesCount) {\n        avatarCount = avatarProfilesCount;\n      }\n    } else if (\n      avatarCount >= MAXIMUM_AVATARS\n    ) {\n      avatarCount = MAXIMUM_AVATARS;\n    }\n\n    return avatarCount;\n  }\n\n  onWindowResize = debounce(() => {\n    this.updateAvatarAmounts(this.props);\n  }, 100);\n\n  updateAvatarAmounts(props) {\n    if (!this._mounted) {\n      return;\n    }\n\n    const avatarCount = this._computeAvatarCountByWindowWidth(props);\n\n    if (avatarCount !== this.state.avatarCount) {\n      this.setState({\n        avatarCount,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateAvatarAmounts(nextProps);\n  }\n\n  componentDidMount() {\n    this._mounted = true;\n    window.addEventListener('resize', this.onWindowResize);\n    this.updateAvatarAmounts(this.props);\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener('resize', this.onWindowResize);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { partyProfiles } = nextProps;\n    const oldpartyProfiles = this.props.partyProfiles;\n    let showUpdate = true;\n    if (partyProfiles !== oldpartyProfiles) {\n      if (\n        Array.isArray(partyProfiles) && Array.isArray(oldpartyProfiles)\n        && partyProfiles.length === oldpartyProfiles.length\n      ) {\n        showUpdate = false;\n        for (let i = 0; i < partyProfiles.length; i += 1) {\n          if (partyProfiles[i].id !== oldpartyProfiles[i].id) {\n            showUpdate = true;\n            break;\n          }\n        }\n      }\n    } else if (nextState.avatarCount !== this.state.avatarCount) {\n      showUpdate = true;\n    } else {\n      showUpdate = false;\n    }\n\n    return showUpdate;\n  }\n\n  computeDisplayedProfiles({\n    profiles,\n    avatarCount,\n  }) {\n    const displayedProfiles =\n      profiles.length >= avatarCount\n        ? profiles.slice(0, avatarCount)\n        : profiles;\n\n    const remains = profiles.length - avatarCount;\n\n    return {\n      displayedProfiles,\n      remains,\n    };\n  }\n\n  render() {\n    const {\n      currentLocale,\n      partyProfiles,\n      onClick,\n    } = this.props;\n    const profiles = partyProfiles || [];\n\n    const { avatarCount } = this.state;\n\n    const {\n      displayedProfiles,\n      remains\n    } = this.computeDisplayedProfiles({ profiles, avatarCount });\n\n    return (\n      <div\n        className={styles.conferenceCallInfoContainer}\n        ref={this._container}\n        >\n        {\n           (displayedProfiles.length || (avatarCount === 0 && remains > 0))\n              ? (\n                <div\n                  className={classnames(styles.avatarContainer, styles.clickable)}\n                  onClick={(e) => { e.preventDefault(); onClick(); }}\n                >\n                  {\n                  displayedProfiles.map(({ avatarUrl, toUserName }, idx) =>\n                  (\n                    <div\n                      key={`${toUserName}_${idx}`}\n                      className={styles.avatar}>\n                      <CallAvatar\n                        avatarUrl={avatarUrl}\n                      />\n                    </div>\n                    )\n                  )\n                  }{\n                    remains > 0\n                      ? (\n                        <div\n                          className={classnames(styles.avatar, styles.remains)}\n                        >\n                          {`+${remains}`}\n                        </div>\n                      )\n                      : null\n                  }\n                </div>\n              )\n              : (\n                <div className={styles.avatarContainer}>\n                  <div className={styles.avatar} style={{ backgroundColor: '#fff' }}>\n                    <i className={classnames(dynamicsFont.portrait, styles.icon)} />\n                  </div>\n                </div>\n              )\n          }\n        <p className={styles.info}>\n          {i18n.getString('conferenceCall', currentLocale)}\n        </p>\n      </div>\n    );\n  }\n}\n\nConferenceInfo.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  partyProfiles: PropTypes.arrayOf(PropTypes.shape({\n    avatarUrl: PropTypes.string,\n    toUserName: PropTypes.string,\n  })),\n  onClick: PropTypes.func,\n};\n\nConferenceInfo.defaultProps = {\n  partyProfiles: null,\n  onClick: i => i,\n};\n"]}