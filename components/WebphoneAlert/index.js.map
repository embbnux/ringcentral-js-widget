{"version":3,"sources":["components/WebphoneAlert/index.js"],"names":["WebphoneAlert","props","message","view","i18n","getString","currentLocale","webphoneErrors","recordError","payload","errorCode","requestTimeout","serverTimeout","internalServerError","sipProvisionError","webphoneForbidden","unknownError","statusCode","stub","error","brandName","brand","name","propTypes","PropTypes","string","isRequired","object","shape","handleMessage","browserNotSupported","webphoneCountOverLimit","notOutboundCallWithoutDL","toVoiceMailError","connected","muteError","holdError","flipError","recordDisabled","transferError"],"mappings":";;;;;kBAMwBA,a;;AANxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MACnCC,OADmC,GACvBD,MAAMC,OADiB,CACnCA,OADmC;;AAE3C,MAAIC,OAAQ;AAAA;AAAA;AAAOC,mBAAKC,SAAL,CAAeH,OAAf,EAAwBD,MAAMK,aAA9B;AAAP,GAAZ;AACA;AACA,MAAIJ,YAAYK,yBAAeC,WAA/B,EAA4C;AAAA,gCACFP,MAAMC,OADJ,CAClCO,OADkC;AAAA,kEACT,EADS;AAAA,QACvBC,SADuB,yBACvBA,SADuB;;AAE1CP,WACE,8BAAC,0BAAD;AACE,eAASC,eAAKC,SAAL,CAAeH,OAAf,EAAwBD,MAAMK,aAA9B,CADX;AAEE,cAAQ,EAAEI,oBAAF;AAFV,MADF;AAMD;AACD,MACER,YAAYK,yBAAeI,cAA3B,IACAT,YAAYK,yBAAeK,aAD3B,IAEAV,YAAYK,yBAAeM,mBAF3B,IAGAX,YAAYK,yBAAeO,iBAH3B,IAIAZ,YAAYK,yBAAeQ,iBAJ3B,IAKAb,YAAYK,yBAAeS,YAN7B,EAOE;AAAA,iCACyCf,MAAMC,OAD/C,CACQO,OADR;AAAA,oEACkC,EADlC;AAAA,QACmBQ,UADnB,0BACmBA,UADnB;AAEA;;AACA,QAAMC,OAAOD,aACX,8BAAC,0BAAD;AACE,eAASb,eAAKC,SAAL,CAAe,WAAf,EAA4BJ,MAAMK,aAAlC,CADX;AAEE,cAAQ,EAAEI,WAAWO,UAAb;AAFV,MADW,GAKTb,eAAKC,SAAL,CAAe,QAAf,EAAyBJ,MAAMK,aAA/B,CALJ;AAMAH,WACE,8BAAC,0BAAD;AACE,eAASC,eAAKC,SAAL,CAAe,qBAAf,EAAsCJ,MAAMK,aAA5C,CADX;AAEE,cAAQ,EAAEa,OAAOD,IAAT,EAAeE,WAAWnB,MAAMoB,KAAN,CAAYC,IAAtC;AAFV,MADF;AAMD;AACD,SAAOnB,IAAP;AACD;;AAEDH,cAAcuB,SAAd,GAA0B;AACxBjB,iBAAekB,oBAAUC,MAAV,CAAiBC,UADR;AAExBL,SAAOG,oBAAUG,MAAV,CAAiBD,UAFA;AAGxBxB,WAASsB,oBAAUI,KAAV,CAAgB;AACvB1B,aAASsB,oBAAUC,MAAV,CAAiBC;AADH,GAAhB,EAENA;AALqB,CAA1B;;AAQA1B,cAAc6B,aAAd,GAA8B;AAAA,MAAG3B,OAAH,QAAGA,OAAH;AAAA,SAC3BA,YAAYK,yBAAeuB,mBAA5B,IACC5B,YAAYK,yBAAewB,sBAD5B,IAEC7B,YAAYK,yBAAeQ,iBAF5B,IAGCb,YAAYK,yBAAeyB,wBAH5B,IAIC9B,YAAYK,yBAAe0B,gBAJ5B,IAKC/B,YAAYK,yBAAe2B,SAL5B,IAMChC,YAAYK,yBAAe4B,SAN5B,IAOCjC,YAAYK,yBAAe6B,SAP5B,IAQClC,YAAYK,yBAAe8B,SAR5B,IASCnC,YAAYK,yBAAeC,WAT5B,IAUCN,YAAYK,yBAAe+B,cAV5B,IAWCpC,YAAYK,yBAAegC,aAX5B,IAYCrC,YAAYK,yBAAeI,cAZ5B,IAaCT,YAAYK,yBAAeK,aAb5B,IAcCV,YAAYK,yBAAeM,mBAd5B,IAeCX,YAAYK,yBAAeO,iBAf5B,IAgBCZ,YAAYK,yBAAeS,YAjBA;AAAA,CAA9B","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from 'ringcentral-integration/modules/Webphone/webphoneErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nexport default function WebphoneAlert(props) {\n  const { message } = props.message;\n  let view = (<span>{i18n.getString(message, props.currentLocale)}</span>);\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const { payload: { errorCode } = {} } = props.message;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  }\n  if (\n    message === webphoneErrors.requestTimeout ||\n    message === webphoneErrors.serverTimeout ||\n    message === webphoneErrors.internalServerError ||\n    message === webphoneErrors.sipProvisionError ||\n    message === webphoneErrors.webphoneForbidden ||\n    message === webphoneErrors.unknownError\n  ) {\n    const { payload: { statusCode } = {} } = props.message;\n    // sipProvisionError does not have statusCode\n    const stub = statusCode ? (\n      <FormattedMessage\n        message={i18n.getString('errorCode', props.currentLocale)}\n        values={{ errorCode: statusCode }}\n      />\n    ) : i18n.getString('occurs', props.currentLocale);\n    view = (\n      <FormattedMessage\n        message={i18n.getString('webphoneUnavailable', props.currentLocale)}\n        values={{ error: stub, brandName: props.brand.name }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  brand: PropTypes.object.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) => (\n  (message === webphoneErrors.browserNotSupported) ||\n  (message === webphoneErrors.webphoneCountOverLimit) ||\n  (message === webphoneErrors.webphoneForbidden) ||\n  (message === webphoneErrors.notOutboundCallWithoutDL) ||\n  (message === webphoneErrors.toVoiceMailError) ||\n  (message === webphoneErrors.connected) ||\n  (message === webphoneErrors.muteError) ||\n  (message === webphoneErrors.holdError) ||\n  (message === webphoneErrors.flipError) ||\n  (message === webphoneErrors.recordError) ||\n  (message === webphoneErrors.recordDisabled) ||\n  (message === webphoneErrors.transferError) ||\n  (message === webphoneErrors.requestTimeout) ||\n  (message === webphoneErrors.serverTimeout) ||\n  (message === webphoneErrors.internalServerError) ||\n  (message === webphoneErrors.sipProvisionError) ||\n  (message === webphoneErrors.unknownError)\n);\n"]}