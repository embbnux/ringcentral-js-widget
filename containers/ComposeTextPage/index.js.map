{"version":3,"sources":["containers/ComposeTextPage/index.js"],"names":["ComposeTextPage","state","props","currentLocale","locale","sendButtonDisabled","composeText","ready","messageSender","idle","messageText","length","toNumbers","typingToNumber","senderNumbers","senderNumbersList","senderNumber","searchContactList","contactSearch","searching","result","dispatch","formatPhone","phoneNumber","areaCode","regionSettings","countryCode","formatContactPhone","send","then","responses","messageStore","pushMessages","conversationId","conversation","id","router","history","push","clean","searchContact","search","searchString","updateSenderNumber","updateTypingToNumber","cleanTypingToNumber","addToNumber","removeToNumber","updateMessageText","propTypes","instanceOf","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["import { PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport ComposeText from 'ringcentral-integration/modules/ComposeText';\nimport MessageStore from 'ringcentral-integration/modules/MessageStore';\n\nimport RouterInteraction from '../../modules/RouterInteraction';\n\nimport ComposeTextPanel from '../../components/ComposeTextPanel';\n\nconst ComposeTextPage = connect((state, props) => ({\n  currentLocale: props.locale.currentLocale,\n  sendButtonDisabled: (\n    !(props.composeText.ready && props.messageSender.idle) ||\n    (props.composeText.messageText.length === 0) ||\n    (\n      props.composeText.toNumbers.length === 0 &&\n      props.composeText.typingToNumber.length === 0\n    )\n  ),\n  senderNumbers: props.messageSender.senderNumbersList,\n  senderNumber: props.composeText.senderNumber,\n  typingToNumber: props.composeText.typingToNumber,\n  toNumbers: props.composeText.toNumbers,\n  messageText: props.composeText.messageText,\n  searchContactList: props.contactSearch.searching.result,\n}), (dispatch, props) => {\n  const formatPhone = phoneNumber => (\n    formatNumber({\n      phoneNumber,\n      areaCode: props.regionSettings.areaCode,\n      countryCode: props.regionSettings.countryCode\n    })\n  );\n  const formatContactPhone = props.formatContactPhone ?\n    props.formatContactPhone :\n    formatPhone;\n  return {\n    send: () =>\n      props.composeText.send().then((responses) => {\n        if (!responses || responses.length === 0) {\n          return null;\n        }\n        props.messageStore.pushMessages(responses);\n        if (responses.length === 1) {\n          const conversationId =\n            responses[0] && responses[0].conversation && responses[0].conversation.id;\n          if (!conversationId) {\n            return null;\n          }\n          props.router.history.push(`/conversations/${conversationId}`);\n        } else {\n          props.router.history.push('/messages');\n        }\n        props.composeText.clean();\n        return null;\n      }),\n    formatPhone,\n    formatContactPhone,\n    searchContact: searchString => (\n      props.contactSearch.search({ searchString })\n    ),\n    updateSenderNumber: props.composeText.updateSenderNumber,\n    updateTypingToNumber: props.composeText.updateTypingToNumber,\n    cleanTypingToNumber: props.composeText.cleanTypingToNumber,\n    addToNumber: props.composeText.addToNumber,\n    removeToNumber: props.composeText.removeToNumber,\n    updateMessageText: props.composeText.updateMessageText,\n  };\n})(ComposeTextPanel);\n\nComposeTextPage.propTypes = {\n  router: PropTypes.instanceOf(RouterInteraction).isRequired,\n  composeText: PropTypes.instanceOf(ComposeText).isRequired,\n  messageStore: PropTypes.instanceOf(MessageStore).isRequired,\n};\n\nexport default ComposeTextPage;\n"]}