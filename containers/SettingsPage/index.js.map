{"version":3,"sources":["containers/SettingsPage/index.js"],"names":["mapToProps","_","accountInfo","auth","brand","callingSettingsUrl","extensionInfo","locale","regionSettings","regionSettingsUrl","version","rolesAndPermissions","presence","params","loggedIn","loginStatus","loginNumber","ready","phoneNumber","mainCompanyNumber","extensionNumber","countryCode","areaCode","showSpinner","showRegion","id","availableCountries","length","find","c","isoCode","currentLocale","brandId","ringoutEnabled","outboundSMS","permissions","OutboundSMS","InternalSMS","isCallQueueMember","dndStatus","userStatus","showPresenceSettings","mapToFunctions","onLogoutButtonClick","logout","setAvailable","setBusy","setDoNotDisturb","setInvisible","toggleAcceptCallQueueCalls","SettingsPage","propTypes","instanceOf","isRequired","string","default"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAaG;AAAA,MAZDC,WAYC,QAZDA,WAYC;AAAA,MAXDC,IAWC,QAXDA,IAWC;AAAA,MAVDC,KAUC,QAVDA,KAUC;AAAA,MATDC,kBASC,QATDA,kBASC;AAAA,MARDC,aAQC,QARDA,aAQC;AAAA,MAPDC,MAOC,QAPDA,MAOC;AAAA,MANDC,cAMC,QANDA,cAMC;AAAA,MALDC,iBAKC,QALDA,iBAKC;AAAA,MAJDC,OAIC,QAJDA,OAIC;AAAA,MAHDC,mBAGC,QAHDA,mBAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,MACC,QADDA,MACC;;AACD,MAAMC,WAAWX,KAAKY,WAAL,KAAqB,sBAAYD,QAAlD;AACA,MAAME,cAAeF,YACnBZ,YAAYe,KADO,IAEnBX,cAAcW,KAFI,GAIlB,4BAAa;AACXC,iBACEhB,YAAYiB,iBADd,SAEIb,cAAcc,eAHP;AAIXC,iBAAab,eAAea,WAJjB;AAKXC,cAAUd,eAAec;AALd,GAAb,CAJkB,GAWlB,EAXF;AAYA,SAAO;AACLC,iBAAa,EACXrB,YAAYe,KAAZ,IACAd,KAAKc,KADL,IAEAX,cAAcW,KAFd,IAGAV,OAAOU,KAHP,IAIAT,eAAeS,KAJf,IAKAN,oBAAoBM,KANT,CADR;AASLO,gBAAYV,YAAYV,MAAMqB,EAAN,KAAa,MAAzB,KACVjB,eAAekB,kBAAf,CAAkCC,MAAlC,GAA2C,CAA3C,IACA,CAAC,CAACnB,eAAekB,kBAAf,CAAkCE,IAAlC,CAAuC;AAAA,aAAKC,EAAEC,OAAF,KAAc,IAAnB;AAAA,KAAvC,CADF,IAEA,CAAC,CAACtB,eAAekB,kBAAf,CAAkCE,IAAlC,CAAuC;AAAA,aAAKC,EAAEC,OAAF,KAAc,IAAnB;AAAA,KAAvC,CAHQ,CATP;AAcLd,4BAdK;AAeLN,oBAfK;AAgBLqB,mBAAexB,OAAOwB,aAhBjB;AAiBLC,aAAS5B,MAAMqB,EAjBV;AAkBLpB,0CAlBK;AAmBLI,wCAnBK;AAoBLwB,oBAAgBtB,oBAAoBsB,cApB/B;AAqBLC,iBAAa,CAAC,CAACvB,oBAAoBwB,WAApB,CAAgCC,WAAlC,IACX,CAAC,CAACzB,oBAAoBwB,WAApB,CAAgCE,WAtB/B;AAuBLC,uBAAmBhC,cAAcgC,iBAvB5B;AAwBLC,eAAW3B,YAAYA,SAAS2B,SAxB3B;AAyBLC,gBAAY5B,YAAYA,SAAS4B,UAzB5B;AA0BLC,0BAAsB,CAAC,EAAE5B,UAAUA,OAAO4B,oBAAnB;AA1BlB,GAAP;AA4BD;;AAED,SAASC,cAAT,CAAwBzC,CAAxB,SAGG;AAAA;;AAAA,MAFDE,IAEC,SAFDA,IAEC;AAAA,MADDS,QACC,SADDA,QACC;;AACD,SAAO;AACL+B;AAAA,6EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACbxC,KAAKyC,MAAL,EADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;;AAAA;AAAA;AAAA;AAAA,OADK;AAILC,kBAAcjC,YAAYA,SAASiC,YAJ9B;AAKLC,aAASlC,YAAYA,SAASkC,OALzB;AAMLC,qBAAiBnC,YAAYA,SAASmC,eANjC;AAOLC,kBAAcpC,YAAYA,SAASoC,YAP9B;AAQLC,gCAA4BrC,YAAYA,SAASqC;AAR5C,GAAP;AAUD;AACD,IAAMC,eAAe,yBACnBlD,UADmB,EAEnB0C,cAFmB,0BAArB;;AAKA,IAAMS,YAAY;AAChBjD,eAAa,iBAAUkD,UAAV,wBAAkCC,UAD/B;AAEhBlD,QAAM,iBAAUiD,UAAV,iBAA2BC,UAFjB;AAGhBjD,SAAO,iBAAUgD,UAAV,kBAA4BC,UAHnB;AAIhB/C,iBAAe,iBAAU8C,UAAV,0BAAoCC,UAJnC;AAKhB9C,UAAQ,iBAAU6C,UAAV,mBAA6BC,UALrB;AAMhB7C,kBAAgB,iBAAU4C,UAAV,2BAAqCC,UANrC;AAOhBhD,sBAAoB,iBAAUiD,MAAV,CAAiBD,UAPrB;AAQhB5C,qBAAmB,iBAAU6C,MAAV,CAAiBD,UARpB;AAShB3C,WAAS,iBAAU4C,MAAV,CAAiBD,UATV;AAUhB1C,uBAAqB,iBAAUyC,UAAV,gCAA0CC,UAV/C;AAWhBzC,YAAU,iBAAUwC,UAAV;AAXM,CAAlB;;AAcAF,aAAaC,SAAb,GAAyBA,SAAzB;;QAGET,c,GAAAA,c;QACA1C,U,GAAAA,U;QACAmD,S,GAAAA,S;QACgBI,O,GAAhBL,Y","file":"index.js","sourcesContent":["import { PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport loginStatus from 'ringcentral-integration/modules/Auth/loginStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport AccountInfo from 'ringcentral-integration/modules/AccountInfo';\nimport Auth from 'ringcentral-integration/modules/Auth';\nimport Brand from 'ringcentral-integration/modules/Brand';\nimport ExtensionInfo from 'ringcentral-integration/modules/ExtensionInfo';\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\nimport RolesAndPermissions from 'ringcentral-integration/modules/RolesAndPermissions';\nimport Presence from 'ringcentral-integration/modules/Presence';\n\nimport SettingsPanel from '../../components/SettingsPanel';\n\nfunction mapToProps(_, {\n  accountInfo,\n  auth,\n  brand,\n  callingSettingsUrl,\n  extensionInfo,\n  locale,\n  regionSettings,\n  regionSettingsUrl,\n  version,\n  rolesAndPermissions,\n  presence,\n  params,\n}) {\n  const loggedIn = auth.loginStatus === loginStatus.loggedIn;\n  const loginNumber = (loggedIn &&\n    accountInfo.ready &&\n    extensionInfo.ready\n  ) ?\n    formatNumber({\n      phoneNumber: `${\n        accountInfo.mainCompanyNumber\n      }*${extensionInfo.extensionNumber}`,\n      countryCode: regionSettings.countryCode,\n      areaCode: regionSettings.areaCode,\n    }) :\n    '';\n  return {\n    showSpinner: !(\n      accountInfo.ready &&\n      auth.ready &&\n      extensionInfo.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      rolesAndPermissions.ready\n    ),\n    showRegion: loggedIn && brand.id === '1210' && (\n      regionSettings.availableCountries.length > 1 ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'US') ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'CA')\n    ),\n    loginNumber,\n    version,\n    currentLocale: locale.currentLocale,\n    brandId: brand.id,\n    callingSettingsUrl,\n    regionSettingsUrl,\n    ringoutEnabled: rolesAndPermissions.ringoutEnabled,\n    outboundSMS: !!rolesAndPermissions.permissions.OutboundSMS ||\n      !!rolesAndPermissions.permissions.InternalSMS,\n    isCallQueueMember: extensionInfo.isCallQueueMember,\n    dndStatus: presence && presence.dndStatus,\n    userStatus: presence && presence.userStatus,\n    showPresenceSettings: !!(params && params.showPresenceSettings),\n  };\n}\n\nfunction mapToFunctions(_, {\n  auth,\n  presence,\n}) {\n  return {\n    onLogoutButtonClick: async () => {\n      await auth.logout();\n    },\n    setAvailable: presence && presence.setAvailable,\n    setBusy: presence && presence.setBusy,\n    setDoNotDisturb: presence && presence.setDoNotDisturb,\n    setInvisible: presence && presence.setInvisible,\n    toggleAcceptCallQueueCalls: presence && presence.toggleAcceptCallQueueCalls,\n  };\n}\nconst SettingsPage = connect(\n  mapToProps,\n  mapToFunctions,\n)(SettingsPanel);\n\nconst propTypes = {\n  accountInfo: PropTypes.instanceOf(AccountInfo).isRequired,\n  auth: PropTypes.instanceOf(Auth).isRequired,\n  brand: PropTypes.instanceOf(Brand).isRequired,\n  extensionInfo: PropTypes.instanceOf(ExtensionInfo).isRequired,\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  callingSettingsUrl: PropTypes.string.isRequired,\n  regionSettingsUrl: PropTypes.string.isRequired,\n  version: PropTypes.string.isRequired,\n  rolesAndPermissions: PropTypes.instanceOf(RolesAndPermissions).isRequired,\n  presence: PropTypes.instanceOf(Presence),\n};\n\nSettingsPage.propTypes = propTypes;\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  propTypes,\n  SettingsPage as default,\n};\n"]}