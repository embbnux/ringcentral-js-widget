{"version":3,"sources":["containers/ActiveCallPage/index.js"],"names":["ActiveCallPage","props","state","badgeOffsetX","badgeOffsetY","connectedAt","Date","updatePositionOffset","x","y","setState","answer","session","id","reject","onMute","onUnmute","onHold","onUnhold","onRecord","onStopRecord","hangup","onKeyPadChange","sendDTMF","value","toVoiceMail","replyWithMessage","message","active","minimized","toggleMinimized","isRinging","direction","inbound","callStatus","connecting","phoneNumber","outbound","to","from","userName","currentLocale","formatPhone","children","startTime","isOnMute","isOnHold","isOnRecord","onAdd","propTypes","shape","string","number","bool","isRequired","func","node","defaultProps","undefined","mapToProps","_","webphone","locale","currentSession","mapToFunctions","regionSettings","router","areaCode","countryCode","mute","sessionId","unmute","hold","unhold","startRecord","stopRecord","history","push","ActiveCallContainer","instanceOf"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport React, { PropTypes, Component } from 'react';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport Webphone from 'ringcentral-integration/modules/Webphone';\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\n\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\n\nimport ActiveCallPanel from '../../components/ActiveCallPanel';\nimport IncomingCallPanel from '../../components/IncomingCallPanel';\nimport ActiveCallBadge from '../../components/ActiveCallBadge';\n\nclass ActiveCallPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      badgeOffsetX: 0,\n      badgeOffsetY: 0,\n      connectedAt: new Date(),\n    };\n\n    this.updatePositionOffset = (x, y) => {\n      this.setState({\n        badgeOffsetX: x,\n        badgeOffsetY: y,\n      });\n    };\n\n    this.answer = () =>\n      this.props.answer(this.props.session.id);\n    this.reject = () =>\n      this.props.reject(this.props.session.id);\n    this.onMute = () =>\n      this.props.onMute(this.props.session.id);\n    this.onUnmute = () =>\n      this.props.onUnmute(this.props.session.id);\n    this.onHold = () =>\n      this.props.onHold(this.props.session.id);\n    this.onUnhold = () =>\n      this.props.onUnhold(this.props.session.id);\n    this.onRecord = () =>\n      this.props.onRecord(this.props.session.id);\n    this.onStopRecord = () =>\n      this.props.onStopRecord(this.props.session.id);\n    this.hangup = () =>\n      this.props.hangup(this.props.session.id);\n    this.onKeyPadChange = value =>\n      this.props.sendDTMF(value, this.props.session.id);\n    this.toVoiceMail = () =>\n      this.props.toVoiceMail(this.props.session.id);\n    this.replyWithMessage = message =>\n      this.props.replyWithMessage(this.props.session.id, message);\n  }\n\n  render() {\n    const session = this.props.session;\n    const active = !!session.id;\n    if (!active) {\n      return null;\n    }\n    if (this.props.minimized) {\n      return (\n        <ActiveCallBadge\n          onClick={this.props.toggleMinimized}\n          offsetX={this.state.badgeOffsetX}\n          offsetY={this.state.badgeOffsetY}\n          updatePositionOffset={this.updatePositionOffset}\n        />\n      );\n    }\n    let isRinging = false;\n    if (\n      session.direction === callDirections.inbound &&\n      session.callStatus === sessionStatus.connecting\n    ) {\n      isRinging = true;\n    }\n    // isRinging = true;\n    const phoneNumber = session.direction === callDirections.outbound ?\n      session.to : session.from;\n    const userName = 'Unknow';\n    if (isRinging) {\n      return (\n        <IncomingCallPanel\n          currentLocale={this.props.currentLocale}\n          toggleMinimized={this.props.toggleMinimized}\n          userName={userName}\n          phoneNumber={phoneNumber}\n          answer={this.answer}\n          reject={this.reject}\n          replyWithMessage={this.replyWithMessage}\n          toVoiceMail={this.toVoiceMail}\n          formatPhone={this.props.formatPhone}\n        >\n          {this.props.children}\n        </IncomingCallPanel>\n      );\n    }\n    return (\n      <ActiveCallPanel\n        currentLocale={this.props.currentLocale}\n        formatPhone={this.props.formatPhone}\n        phoneNumber={phoneNumber}\n        userName={userName}\n        sessionId={session.id}\n        callStatus={session.callStatus}\n        startTime={session.startTime}\n        isOnMute={session.isOnMute}\n        isOnHold={session.isOnHold}\n        isOnRecord={session.isOnRecord}\n        toggleMinimized={this.props.toggleMinimized}\n        onMute={this.onMute}\n        onUnmute={this.onUnmute}\n        onHold={this.onHold}\n        onUnhold={this.onUnhold}\n        onRecord={this.onRecord}\n        onStopRecord={this.onStopRecord}\n        onKeyPadChange={this.onKeyPadChange}\n        hangup={this.hangup}\n        onAdd={this.props.onAdd}\n      >\n        {this.props.children}\n      </ActiveCallPanel>\n    );\n  }\n}\n\nActiveCallPage.propTypes = {\n  session: PropTypes.shape({\n    id: PropTypes.string,\n    direction: PropTypes.string,\n    startTime: PropTypes.number,\n    isOnMute: PropTypes.bool,\n    isOnHold: PropTypes.bool,\n    isOnRecord: PropTypes.bool,\n    to: PropTypes.string,\n    from: PropTypes.string,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  minimized: PropTypes.bool.isRequired,\n  toggleMinimized: PropTypes.func.isRequired,\n  onMute: PropTypes.func.isRequired,\n  onUnmute: PropTypes.func.isRequired,\n  onHold: PropTypes.func.isRequired,\n  onUnhold: PropTypes.func.isRequired,\n  onRecord: PropTypes.func.isRequired,\n  onStopRecord: PropTypes.func.isRequired,\n  hangup: PropTypes.func.isRequired,\n  answer: PropTypes.func.isRequired,\n  reject: PropTypes.func.isRequired,\n  sendDTMF: PropTypes.func.isRequired,\n  toVoiceMail: PropTypes.func.isRequired,\n  replyWithMessage: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  children: PropTypes.node,\n};\n\nActiveCallPage.defaultProps = {\n  children: undefined,\n};\n\nfunction mapToProps(_, {\n  webphone,\n  locale,\n}) {\n  const currentSession = webphone.currentSession || {};\n  return {\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    minimized: webphone.minimized,\n  };\n}\n\nfunction mapToFunctions(_, {\n  webphone,\n  regionSettings,\n  router,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    hangup: webphone.hangup,\n    answer: webphone.answer,\n    reject: webphone.reject,\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold: sessionId => webphone.unhold(sessionId),\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    onAdd: () => {\n      router.history.push('/');\n      webphone.toggleMinimized();\n    },\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    toVoiceMail: sessionId => webphone.toVoiceMail(sessionId),\n    replyWithMessage: (sessionId, message) => webphone.replyWithMessage(sessionId, message),\n    toggleMinimized: webphone.toggleMinimized,\n  };\n}\n\nconst ActiveCallContainer = connect(\n  mapToProps,\n  mapToFunctions,\n)(ActiveCallPage);\n\nActiveCallContainer.propTypes = {\n  webphone: PropTypes.instanceOf(Webphone).isRequired,\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n};\n\nexport default ActiveCallContainer;\n\n"]}