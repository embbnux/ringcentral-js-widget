{"version":3,"sources":["containers/MessagesPage/index.js"],"names":["MessageSpiner","spinerContainer","MessagesPage","props","onSearchChange","e","value","currentTarget","updateSearchingString","searchMessage","bind","getMessageRecipientNames","message","recipients","length","getRecipientsList","map","recipient","phoneNumber","extensionNumber","matcherContactName","matcherName","formatPhone","name","searchText","searchNumber","recipientName","indexOf","toLowerCase","searchString","searchingString","updateSearchResults","trim","replace","searchTextResults","searchMessagesText","reverse","searchContactresults","allMessages","filter","isMatchRecipients","results","searchMap","addSearchResultToResult","conversationId","push","forEach","searchingResults","getString","formatDateTime","messages","loadNextPageMessages","showSpinner","root","content","renderMessageList","propTypes","func","isRequired","isLoadingNextPage","bool","string","defaultProps","mapStateToProps","state","currentLocale","locale","messageStore","conversations","ready","contactMatcher","extensionInfo","dateTimeFormat","lastUpdatedAt","mapDispatchToProps","dispatch","matcherNames","dataMapping","matcher","join","utcTimestamp","areaCode","regionSettings","countryCode","myExtensionNumber"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { getRecipients } from 'ringcentral-integration/lib/messageHelper';\n\nimport Spinner from '../../components/Spinner';\nimport Panel from '../../components/Panel';\n\nimport MessageList from '../../components/MessageList';\nimport SearchInput from '../../components/SearchInput';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction MessageSpiner() {\n  return (\n    <div className={styles.spinerContainer}>\n      <Spinner />\n    </div>\n  );\n}\n\nclass MessagesPage extends Component {\n  constructor(props) {\n    super(props);\n    this.onSearchChange = (e) => {\n      const value = e.currentTarget.value;\n      this.props.updateSearchingString(value);\n    };\n\n    this.searchMessage = this.searchMessage.bind(this);\n    this.getMessageRecipientNames = this.getMessageRecipientNames.bind(this);\n  }\n\n  getMessageRecipientNames(message) {\n    let recipients = message.recipients;\n    if (!recipients || recipients.length === 0) {\n      recipients = this.props.getRecipientsList(message);\n    }\n    return recipients.map((recipient) => {\n      const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n      if (phoneNumber && this.props.matcherContactName) {\n        const matcherName = this.props.matcherContactName(phoneNumber);\n        if (matcherName) {\n          return matcherName;\n        }\n        return this.props.formatPhone(phoneNumber);\n      }\n      if (recipient.name) {\n        return recipient.name;\n      }\n      return this.props.formatPhone(phoneNumber);\n    });\n  }\n\n  isMatchRecipients(message, searchText, searchNumber) {\n    const recipients = this.props.getRecipientsList(message);\n    for (const recipient of recipients) {\n      const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n      let recipientName = null;\n      if (phoneNumber) {\n        if (searchNumber && searchNumber.length > 0 && phoneNumber.indexOf(searchNumber) >= 0) {\n          return true;\n        }\n        if (this.props.matcherContactName) {\n          const matcherName = this.props.matcherContactName(phoneNumber);\n          if (matcherName) {\n            recipientName = matcherName;\n          } else {\n            recipientName = phoneNumber;\n          }\n        }\n      }\n      if (!recipientName && recipient.name) {\n        recipientName = recipient.name;\n      }\n      if (recipientName && recipientName.toLowerCase().indexOf(searchText) >= 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  searchMessage() {\n    const searchString = this.props.searchingString;\n    if (searchString.length < 3) {\n      this.props.updateSearchResults([]);\n      return;\n    }\n    const searchText = searchString.toLowerCase().trim();\n    let searchNumber = searchString.replace(/[^\\d]/g, '');\n    if (searchString.length !== searchNumber.length && searchNumber.length < 2) {\n      searchNumber = null;\n    }\n    const searchTextResults = this.props.searchMessagesText(searchText).reverse();\n    const searchContactresults = this.props.allMessages.filter(message =>\n      this.isMatchRecipients(message, searchText, searchNumber)\n    ).reverse();\n    const results = [];\n    const searchMap = {};\n    const addSearchResultToResult = (message) => {\n      if (searchMap[message.conversationId]) {\n        return;\n      }\n      searchMap[message.conversationId] = 1;\n      results.push(message);\n    };\n    searchContactresults.forEach(addSearchResultToResult);\n    searchTextResults.forEach(addSearchResultToResult);\n    this.props.updateSearchResults(results);\n  }\n\n  renderMessageList() {\n    if (this.props.searchingString.length >= 3) {\n      return (\n        <MessageList\n          messages={this.props.searchingResults}\n          loadNextPageMessages={() => null}\n          loading={false}\n          placeholder={i18n.getString('noSearchResults')}\n          formatDateTime={this.props.formatDateTime}\n          getMessageRecipientNames={this.getMessageRecipientNames}\n        />\n      );\n    }\n    return (\n      <MessageList\n        messages={this.props.messages}\n        loadNextPageMessages={this.props.loadNextPageMessages}\n        placeholder={i18n.getString('noMessages')}\n        formatDateTime={this.props.formatDateTime}\n        getMessageRecipientNames={this.getMessageRecipientNames}\n      />\n    );\n  }\n\n  render() {\n    const showSpinner = this.props.showSpinner;\n    if (showSpinner) {\n      return (\n        <div className={styles.root}>\n          <MessageSpiner />\n        </div>\n      );\n    }\n    return (\n      <div className={styles.content}>\n        <SearchInput\n          value={this.props.searchingString}\n          onChange={this.onSearchChange}\n          onKeyUp={this.searchMessage}\n          maxLength={30}\n          placeholder={i18n.getString('search')}\n        />\n        <Panel>\n          {this.renderMessageList()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nMessagesPage.propTypes = {\n  messages: MessageList.propTypes.messages,\n  allMessages: MessageList.propTypes.messages,\n  searchingResults: MessageList.propTypes.messages,\n  loadNextPageMessages: PropTypes.func.isRequired,\n  updateSearchingString: PropTypes.func.isRequired,\n  isLoadingNextPage: PropTypes.bool,\n  showSpinner: PropTypes.bool.isRequired,\n  searchingString: PropTypes.string.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  getRecipientsList: PropTypes.func.isRequired,\n  searchMessagesText: PropTypes.func.isRequired,\n  updateSearchResults: PropTypes.func.isRequired,\n  matcherContactName: PropTypes.func,\n};\n\nMessagesPage.defaultProps = {\n  matcherContactName: null,\n};\n\nfunction mapStateToProps(state, props) {\n  return ({\n    currentLocale: props.locale.currentLocale,\n    messages: props.messages.messages,\n    allMessages: props.messageStore.conversations,\n    showSpinner: (\n      !props.messages.ready ||\n      (props.contactMatcher && !props.contactMatcher.ready) ||\n      !props.extensionInfo.ready ||\n      !props.dateTimeFormat.ready\n    ),\n    lastUpdatedAt: props.messages.lastUpdatedAt,\n    searchingString: props.messages.searchingString,\n    searchingResults: props.messages.searchingResults,\n  });\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  let matcherContactName = null;\n  if (props.contactMatcher && props.contactMatcher.ready) {\n    matcherContactName = (phoneNumber) => {\n      const matcherNames = props.contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name).join('&');\n      }\n      return null;\n    };\n  }\n  return {\n    loadNextPageMessages: props.messages.loadNextPageMessages,\n    updateSearchingString: props.messages.updateSearchingString,\n    updateSearchResults: props.messages.updateSearchResults,\n    formatDateTime: props.formatDateTime ||\n    (utcTimestamp => props.dateTimeFormat.formatDateTime({\n      utcTimestamp\n    })),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: props.regionSettings.areaCode,\n      countryCode: props.regionSettings.countryCode,\n    }),\n    getRecipientsList: message => getRecipients({\n      message,\n      myExtensionNumber: props.extensionInfo.extensionNumber,\n    }),\n    searchMessagesText: searchText =>\n      props.messageStore.searchMessagesText(searchText),\n    matcherContactName,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesPage);\n"]}