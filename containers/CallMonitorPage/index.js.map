{"version":3,"sources":["containers/CallMonitorPage/index.js"],"names":["mapToProps","_","phone","locale","brand","callMonitor","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","composeText","rolesAndPermissions","enableContactFallback","active","fullName","title","i18n","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","throttling","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","mapToFunctions","contactMatcher","contactSearch","routerInteraction","webphone","onViewContact","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","onLogCall","isLoggedContact","composeTextRoute","phoneNumber","contact","hasMatchNumber","ignoreCache","undefined","name","entityType","forceMatchNumber","call","redirect","logCall","onClickToSms","isDummyContact","push","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","webphoneAnswer","answer","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","CallMonitorPage","CallsPanel"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport { withPhone } from '../../lib/phoneContext';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  phone: {\n    locale,\n    brand,\n    callMonitor,\n    regionSettings,\n    connectivityMonitor,\n    rateLimiter,\n    dateTimeFormat,\n    callLogger,\n    composeText,\n    rolesAndPermissions,\n  },\n  enableContactFallback = false,\n}) {\n  return {\n    enableContactFallback,\n    active: true,\n    brand: brand.fullName,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callMonitor.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      callMonitor.ready &&\n      regionSettings.ready &&\n      connectivityMonitor.ready &&\n      dateTimeFormat.ready &&\n      (!callLogger || callLogger.ready) &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!composeText || composeText.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    dateTimeFormat,\n    routerInteraction,\n    webphone,\n  },\n  onViewContact,\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  onLogCall,\n  isLoggedContact,\n  composeTextRoute = '/composeText',\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact ?\n      async ({ phoneNumber, contact }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (hasMatchNumber) {\n          await onViewContact({ phoneNumber, contact });\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    webphoneResume: (...args) => (webphone && webphone.resume(...args)),\n  };\n}\n\nconst CallMonitorPage = withPhone(connect(mapToProps, mapToFunctions)(CallsPanel));\n\nexport default CallMonitorPage;\n"]}