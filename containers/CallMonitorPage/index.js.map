{"version":3,"sources":["containers/CallMonitorPage/index.js"],"names":["mapToProps","_","locale","callMonitor","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","composeText","rolesAndPermissions","enableContactFallback","active","title","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","throttling","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","mapToFunctions","onViewContact","onCreateContact","dateTimeFormatter","utcTimestamp","formatDateTime","contactMatcher","contactSearch","onLogCall","isLoggedContact","router","composeTextRoute","webphone","phoneNumber","contact","hasMatchNumber","ignoreCache","undefined","name","entityType","forceMatchNumber","call","redirect","logCall","onClickToSms","isDummyContact","history","push","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","webphoneAnswer","answer","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","CallMonitorPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  locale,\n  callMonitor,\n  regionSettings,\n  connectivityMonitor,\n  rateLimiter,\n  dateTimeFormat,\n  callLogger,\n  composeText,\n  rolesAndPermissions,\n  enableContactFallback = false,\n}) {\n  return {\n    enableContactFallback,\n    active: true,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callMonitor.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      callMonitor.ready &&\n      regionSettings.ready &&\n      connectivityMonitor.ready &&\n      dateTimeFormat.ready &&\n      (!callLogger || callLogger.ready) &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!composeText || composeText.ready)\n    ),\n  };\n}\nfunction mapToFunctions(_, {\n  dateTimeFormat,\n  onViewContact,\n  onCreateContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  callLogger,\n  contactMatcher,\n  contactSearch,\n  onLogCall,\n  isLoggedContact,\n  router,\n  composeTextRoute = '/composeText',\n  composeText,\n  webphone,\n}) {\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact ?\n      async ({ phoneNumber, contact }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (hasMatchNumber) {\n          await onViewContact({ phoneNumber, contact });\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.history.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    webphoneAnswer: (webphone && webphone.answer),\n    webphoneReject: (webphone && webphone.reject),\n    webphoneHangup: (webphone && webphone.hangup),\n    webphoneResume: (webphone && webphone.resume),\n  };\n}\n\nconst CallMonitorPage = connect(mapToProps, mapToFunctions)(CallsPanel);\n\nexport default CallMonitorPage;\n"]}