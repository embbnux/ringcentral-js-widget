{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["ConversationPage","formatPhone","props","formatNumber","formatDateTime","changeDefaultRecipient","getRecipientName","recipient","loadConversation","unloadConversation","phoneNumber","extensionNumber","matcherContactName","matcherName","name","id","conversationId","loadConversationById","currentLocale","messages","recipients","showSpinner","replyToReceivers","sendButtonDisabled","propTypes","string","isRequired","bool","func","defaultProps","childContextTypes","mapStateToProps","state","locale","params","conversation","pushing","dateTimeFormat","ready","contactMatcher","regionSettings","mapDispatchToProps","dispatch","matcherNames","dataMapping","length","map","matcher","join","utcTimestamp","areaCode","countryCode"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ConversationPanel from '../../components/ConversationPanel';\n\nclass ConversationPage extends Component {\n  getChildContext() {\n    return {\n      formatPhone: this.props.formatNumber,\n      formatDateTime: this.props.formatDateTime,\n      changeDefaultRecipient: this.props.changeDefaultRecipient,\n      getRecipientName: recipient => (this.getRecipientName(recipient)),\n    };\n  }\n\n  componentDidMount() {\n    this.loadConversation();\n  }\n\n  componentWillUnmount() {\n    this.props.unloadConversation();\n  }\n\n  getRecipientName(recipient) {\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    if (phoneNumber && this.props.matcherContactName) {\n      const matcherName = this.props.matcherContactName(phoneNumber);\n      if (matcherName) {\n        return matcherName;\n      }\n      return this.props.formatNumber(phoneNumber);\n    }\n    if (recipient.name) {\n      return recipient.name;\n    }\n    return this.props.formatNumber(phoneNumber);\n  }\n\n  loadConversation() {\n    const id = this.props.conversationId;\n    this.props.loadConversationById(id);\n  }\n\n  render() {\n    return (\n      <ConversationPanel\n        conversationId={this.props.conversationId}\n        currentLocale={this.props.currentLocale}\n        messages={this.props.messages}\n        recipients={this.props.recipients}\n        showSpinner={this.props.showSpinner}\n        replyToReceivers={this.props.replyToReceivers}\n        sendButtonDisabled={this.props.sendButtonDisabled}\n      />\n    );\n  }\n}\n\nConversationPage.propTypes = {\n  conversationId: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  messages: ConversationPanel.propTypes.messages,\n  recipients: ConversationPanel.propTypes.recipients,\n  replyToReceivers: PropTypes.func.isRequired,\n  unloadConversation: PropTypes.func.isRequired,\n  loadConversationById: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  formatNumber: PropTypes.func.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  matcherContactName: PropTypes.func,\n};\n\nConversationPage.defaultProps = {\n  matcherContactName: null,\n};\n\nConversationPage.childContextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  getRecipientName: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, props) {\n  return ({\n    currentLocale: props.locale.currentLocale,\n    conversationId: props.params.conversationId,\n    sendButtonDisabled: props.conversation.pushing,\n    showSpinner: (\n      !props.dateTimeFormat.ready ||\n      (props.contactMatcher && !props.contactMatcher.ready) ||\n      !props.conversation.ready ||\n      !props.regionSettings.ready\n    ),\n    recipients: props.conversation.recipients,\n    messages: props.conversation.messages,\n  });\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  let matcherContactName = null;\n  if (props.contactMatcher && props.contactMatcher.ready) {\n    matcherContactName = (phoneNumber) => {\n      const matcherNames = props.contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name).join('&');\n      }\n      return null;\n    };\n  }\n  return {\n    replyToReceivers: props.conversation.replyToReceivers,\n    changeDefaultRecipient: props.conversation.changeDefaultRecipient,\n    unloadConversation: () => props.conversation.unloadConversation(),\n    loadConversationById: id => props.conversation.loadConversationById(id),\n    formatDateTime: props.formatDateTime ||\n    (utcTimestamp => props.dateTimeFormat.formatDateTime({\n      utcTimestamp,\n    })),\n    formatNumber: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: props.regionSettings.areaCode,\n      countryCode: props.regionSettings.countryCode,\n    }),\n    matcherContactName,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationPage);\n"]}