{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["ConversationPage","formatPhone","props","formatNumber","formatDateTime","changeDefaultRecipient","changeMatchedNames","getRecipientName","recipient","getMatcherContactList","getMatcherContactNameList","loadConversation","unloadConversation","phoneNumber","extensionNumber","getMatcherContactName","matcherName","name","id","conversationId","loadConversationById","currentLocale","messages","recipients","showSpinner","replyToReceivers","sendButtonDisabled","propTypes","string","isRequired","bool","func","defaultProps","childContextTypes","mapStateToProps","state","locale","params","conversation","pushing","dateTimeFormat","ready","contactMatcher","regionSettings","mapDispatchToProps","dispatch","matcherNames","dataMapping","length","map","matcher","phoneNumbers","phoneType","join","utcTimestamp","areaCode","countryCode"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ConversationPanel from '../../components/ConversationPanel';\n\nclass ConversationPage extends Component {\n  getChildContext() {\n    return {\n      formatPhone: this.props.formatNumber,\n      formatDateTime: this.props.formatDateTime,\n      changeDefaultRecipient: this.props.changeDefaultRecipient,\n      changeMatchedNames: this.props.changeMatchedNames,\n      getRecipientName: recipient => (this.getRecipientName(recipient)),\n      getMatcherContactList: this.props.getMatcherContactList,\n      getMatcherContactNameList: this.props.getMatcherContactNameList,\n    };\n  }\n\n  componentDidMount() {\n    this.loadConversation();\n  }\n\n  componentWillUnmount() {\n    this.props.unloadConversation();\n  }\n\n  getRecipientName(recipient) {\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    if (phoneNumber && this.props.getMatcherContactName) {\n      const matcherName = this.props.getMatcherContactName(phoneNumber);\n      if (matcherName) {\n        return matcherName;\n      }\n      return this.props.formatNumber(phoneNumber);\n    }\n    if (recipient.name) {\n      return recipient.name;\n    }\n    return this.props.formatNumber(phoneNumber);\n  }\n\n  loadConversation() {\n    const id = this.props.conversationId;\n    this.props.loadConversationById(id);\n  }\n\n  render() {\n    return (\n      <ConversationPanel\n        conversationId={this.props.conversationId}\n        currentLocale={this.props.currentLocale}\n        messages={this.props.messages}\n        recipients={this.props.recipients}\n        showSpinner={this.props.showSpinner}\n        replyToReceivers={this.props.replyToReceivers}\n        sendButtonDisabled={this.props.sendButtonDisabled}\n      />\n    );\n  }\n}\n\nConversationPage.propTypes = {\n  conversationId: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  messages: ConversationPanel.propTypes.messages,\n  recipients: ConversationPanel.propTypes.recipients,\n  replyToReceivers: PropTypes.func.isRequired,\n  unloadConversation: PropTypes.func.isRequired,\n  loadConversationById: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  formatNumber: PropTypes.func.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  getMatcherContactName: PropTypes.func,\n  getMatcherContactList: PropTypes.func,\n  getMatcherContactNameList: PropTypes.func,\n  changeMatchedNames: PropTypes.func.isRequired,\n};\n\nConversationPage.defaultProps = {\n  getMatcherContactName: null,\n  getMatcherContactList: () => [],\n  getMatcherContactNameList: () => [],\n};\n\nConversationPage.childContextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  formatDateTime: PropTypes.func.isRequired,\n  getRecipientName: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  changeMatchedNames: PropTypes.func.isRequired,\n  getMatcherContactList: PropTypes.func.isRequired,\n  getMatcherContactNameList: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, props) {\n  return ({\n    currentLocale: props.locale.currentLocale,\n    conversationId: props.params.conversationId,\n    sendButtonDisabled: props.conversation.pushing,\n    showSpinner: (\n      !props.dateTimeFormat.ready ||\n      (props.contactMatcher && !props.contactMatcher.ready) ||\n      !props.conversation.ready ||\n      !props.regionSettings.ready\n    ),\n    recipients: props.conversation.recipients,\n    messages: props.conversation.messages,\n  });\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  let getMatcherContactName;\n  let getMatcherContactList;\n  let getMatcherContactNameList;\n  if (props.contactMatcher && props.contactMatcher.ready) {\n    getMatcherContactList = (phoneNumber) => {\n      const matcherNames = props.contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher =>\n          `${matcher.name} | ${matcher.phoneNumbers[0].phoneType}`\n        );\n      }\n      return [];\n    };\n    getMatcherContactNameList = (phoneNumber) => {\n      const matcherNames = props.contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name);\n      }\n      return [];\n    };\n    getMatcherContactName = (phoneNumber) => {\n      const matcherNames = getMatcherContactNameList(phoneNumber);\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.join('&');\n      }\n      return null;\n    };\n  }\n\n  return {\n    replyToReceivers: props.conversation.replyToReceivers,\n    changeDefaultRecipient: props.conversation.changeDefaultRecipient,\n    changeMatchedNames: props.conversation.changeMatchedNames,\n    unloadConversation: () => props.conversation.unloadConversation(),\n    loadConversationById: id => props.conversation.loadConversationById(id),\n    formatDateTime: props.formatDateTime ||\n    (utcTimestamp => props.dateTimeFormat.formatDateTime({\n      utcTimestamp,\n    })),\n    formatNumber: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: props.regionSettings.areaCode,\n      countryCode: props.regionSettings.countryCode,\n    }),\n    getMatcherContactName,\n    getMatcherContactList,\n    getMatcherContactNameList,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationPage);\n"]}