{"version":3,"sources":["containers/ConversationPage/index.js"],"names":["ConversationPage","formatPhone","props","formatNumber","changeDefaultRecipient","changeMatchedNames","getRecipientName","recipient","getMatcherContactList","getMatcherContactNameList","loadConversation","unloadConversation","phoneNumber","extensionNumber","getMatcherContactName","matcherName","name","id","conversationId","loadConversationById","countryCode","areaCode","disableLinks","currentLocale","messages","conversation","onLogConversation","isLoggedContact","recipients","showSpinner","replyToReceivers","sendButtonDisabled","autoLog","dateTimeFormatter","propTypes","string","isRequired","bool","func","defaultProps","childContextTypes","mapToProps","_","locale","params","conversationLogger","dateTimeFormat","contactMatcher","regionSettings","rateLimiter","connectivityMonitor","enableContactFallback","pushing","ready","allConversations","find","item","isThrottling","connectivity","mapToFunctions","formatDateTime","matcherNames","dataMapping","length","map","matcher","phoneNumbers","phoneType","join","redirect","options","logConversation"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport ConversationPanel from '../../components/ConversationPanel';\n\nclass ConversationPage extends Component {\n  getChildContext() {\n    return {\n      formatPhone: this.props.formatNumber,\n      changeDefaultRecipient: this.props.changeDefaultRecipient,\n      changeMatchedNames: this.props.changeMatchedNames,\n      getRecipientName: recipient => (this.getRecipientName(recipient)),\n      getMatcherContactList: this.props.getMatcherContactList,\n      getMatcherContactNameList: this.props.getMatcherContactNameList,\n    };\n  }\n\n  componentDidMount() {\n    this.loadConversation();\n  }\n\n  componentWillUnmount() {\n    this.props.unloadConversation();\n  }\n\n  getRecipientName(recipient) {\n    const phoneNumber = recipient.phoneNumber || recipient.extensionNumber;\n    if (phoneNumber && this.props.getMatcherContactName) {\n      const matcherName = this.props.getMatcherContactName(phoneNumber);\n      if (matcherName) {\n        return matcherName;\n      }\n      return this.props.formatNumber(phoneNumber);\n    }\n    if (recipient.name) {\n      return recipient.name;\n    }\n    return this.props.formatNumber(phoneNumber);\n  }\n\n  loadConversation() {\n    const id = this.props.conversationId;\n    this.props.loadConversationById(id);\n  }\n\n  render() {\n    return (\n      <ConversationPanel\n        countryCode={this.props.countryCode}\n        areaCode={this.props.areaCode}\n        disableLinks={this.props.disableLinks}\n        conversationId={this.props.conversationId}\n        currentLocale={this.props.currentLocale}\n        messages={this.props.messages}\n        conversation={this.props.conversation}\n        onLogConversation={this.props.onLogConversation}\n        isLoggedContact={this.props.isLoggedContact}\n        recipients={this.props.recipients}\n        showSpinner={this.props.showSpinner}\n        replyToReceivers={this.props.replyToReceivers}\n        sendButtonDisabled={this.props.sendButtonDisabled}\n        autoLog={this.props.autoLog}\n        dateTimeFormatter={this.props.dateTimeFormatter}\n      />\n    );\n  }\n}\n\nConversationPage.propTypes = {\n  conversationId: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  messages: ConversationPanel.propTypes.messages,\n  recipients: ConversationPanel.propTypes.recipients,\n  replyToReceivers: PropTypes.func.isRequired,\n  unloadConversation: PropTypes.func.isRequired,\n  loadConversationById: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  formatNumber: PropTypes.func.isRequired,\n  getMatcherContactName: PropTypes.func,\n  getMatcherContactList: PropTypes.func,\n  getMatcherContactNameList: PropTypes.func,\n  changeMatchedNames: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired,\n};\n\nConversationPage.defaultProps = {\n  getMatcherContactName: null,\n  getMatcherContactList: () => [],\n  getMatcherContactNameList: () => [],\n};\n\nConversationPage.childContextTypes = {\n  formatPhone: PropTypes.func.isRequired,\n  getRecipientName: PropTypes.func.isRequired,\n  changeDefaultRecipient: PropTypes.func.isRequired,\n  changeMatchedNames: PropTypes.func.isRequired,\n  getMatcherContactList: PropTypes.func.isRequired,\n  getMatcherContactNameList: PropTypes.func.isRequired,\n};\n\nfunction mapToProps(_, {\n  locale,\n  params,\n  conversation,\n  conversationLogger,\n  dateTimeFormat,\n  contactMatcher,\n  regionSettings,\n  messages,\n  rateLimiter,\n  connectivityMonitor,\n  enableContactFallback = false,\n}) {\n  return ({\n    enableContactFallback,\n    currentLocale: locale.currentLocale,\n    conversationId: params.conversationId,\n    sendButtonDisabled: conversation.pushing,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    showSpinner: !(\n      dateTimeFormat.ready &&\n      (!contactMatcher || contactMatcher.ready) &&\n      conversation.ready &&\n      regionSettings.ready &&\n      messages.ready &&\n      rateLimiter.ready &&\n      connectivityMonitor.ready &&\n      conversationLogger.ready\n    ),\n    recipients: conversation.recipients,\n    messages: conversation.messages,\n    conversation: messages.allConversations.find(item => (\n      item.conversationId === params.conversationId\n    )),\n    disableLinks: (\n      rateLimiter.isThrottling ||\n      !connectivityMonitor.connectivity\n    ),\n    autoLog: conversationLogger.autoLog,\n  });\n}\n\nfunction mapToFunctions(_, {\n  contactMatcher,\n  conversation,\n  dateTimeFormat,\n  dateTimeFormatter = (...args) => dateTimeFormat.formatDateTime(...args),\n  regionSettings,\n  isLoggedContact,\n  conversationLogger,\n  onLogConversation,\n}) {\n  let getMatcherContactName;\n  let getMatcherContactList;\n  let getMatcherContactNameList;\n  if (contactMatcher && contactMatcher.ready) {\n    getMatcherContactList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher =>\n          `${matcher.name} | ${matcher.phoneNumbers[0].phoneType}`\n        );\n      }\n      return [];\n    };\n    getMatcherContactNameList = (phoneNumber) => {\n      const matcherNames = contactMatcher.dataMapping[phoneNumber];\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.map(matcher => matcher.name);\n      }\n      return [];\n    };\n    getMatcherContactName = (phoneNumber) => {\n      const matcherNames = getMatcherContactNameList(phoneNumber);\n      if (matcherNames && matcherNames.length > 0) {\n        return matcherNames.join('&');\n      }\n      return null;\n    };\n  }\n\n  return {\n    replyToReceivers: conversation.replyToReceivers,\n    changeDefaultRecipient: conversation.changeDefaultRecipient,\n    changeMatchedNames: conversation.changeMatchedNames,\n    unloadConversation: () => conversation.unloadConversation(),\n    loadConversationById: id => conversation.loadConversationById(id),\n    dateTimeFormatter,\n    formatNumber: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    getMatcherContactName,\n    getMatcherContactList,\n    getMatcherContactNameList,\n    isLoggedContact,\n    onLogConversation: onLogConversation ||\n    (conversationLogger && (async ({ redirect = true, ...options }) => {\n      await conversationLogger.logConversation({\n        ...options,\n        redirect,\n      });\n    })),\n  };\n}\n\nexport default connect(\n  mapToProps,\n  mapToFunctions,\n)(ConversationPage);\n"]}