{"version":3,"sources":["containers/CallBadgeContainer/index.js"],"names":["CallBadge","props","state","badgeOffsetX","defaultOffsetX","badgeOffsetY","defaultOffsetY","updatePositionOffset","x","y","setState","onClick","isRinging","_isRinging","toggleMinimized","session","id","goToCallCtrl","direction","callDirections","inbound","callStatus","sessionStatus","connecting","active","minimized","hidden","i18n","getString","currentLocale","Component","propTypes","PropTypes","shape","string","startTime","number","isOnMute","bool","isOnHold","isOnRecord","to","from","isRequired","func","defaultProps","mapToProps","_","phone","webphone","locale","currentSession","activeSession","ringSession","mapToFunctions","sessionId","CallBadgeContainer"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\n\nimport ActiveCallBadge from '../../components/ActiveCallBadge';\nimport { withPhone } from '../../lib/phoneContext';\n\nimport i18n from './i18n';\n\nclass CallBadge extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      badgeOffsetX: props.defaultOffsetX || 0,\n      badgeOffsetY: props.defaultOffsetY || 0,\n    };\n\n    this.updatePositionOffset = (x, y) => {\n      this.setState({\n        badgeOffsetX: x,\n        badgeOffsetY: y,\n      });\n    };\n\n    this.onClick = () => {\n      const isRinging = this._isRinging();\n      if (isRinging) {\n        this.props.toggleMinimized(this.props.session.id);\n        return;\n      }\n      this.props.goToCallCtrl(this.props.session.id);\n    };\n  }\n\n  _isRinging() {\n    let isRinging = false;\n    const session = this.props.session;\n    if (\n      session.direction === callDirections.inbound &&\n      session.callStatus === sessionStatus.connecting\n    ) {\n      isRinging = true;\n    }\n    return isRinging;\n  }\n\n  render() {\n    const session = this.props.session;\n    const active = !!session.id;\n    if (!active) {\n      return null;\n    }\n    const isRinging = this._isRinging();\n    if (isRinging && !session.minimized) {\n      return null;\n    }\n    if (this.props.hidden) {\n      return null;\n    }\n    return (\n      <ActiveCallBadge\n        onClick={this.onClick}\n        offsetX={this.state.badgeOffsetX}\n        offsetY={this.state.badgeOffsetY}\n        updatePositionOffset={this.updatePositionOffset}\n        title={i18n.getString('activeCall', this.props.currentLocale)}\n      />\n    );\n  }\n}\n\nCallBadge.propTypes = {\n  session: PropTypes.shape({\n    id: PropTypes.string,\n    direction: PropTypes.string,\n    startTime: PropTypes.number,\n    isOnMute: PropTypes.bool,\n    isOnHold: PropTypes.bool,\n    isOnRecord: PropTypes.bool,\n    to: PropTypes.string,\n    from: PropTypes.string,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  toggleMinimized: PropTypes.func.isRequired,\n  goToCallCtrl: PropTypes.func.isRequired,\n  hidden: PropTypes.bool.isRequired,\n  defaultOffsetX: PropTypes.number,\n  defaultOffsetY: PropTypes.number,\n};\n\nCallBadge.defaultProps = {\n  defaultOffsetX: 0,\n  defaultOffsetY: 0,\n};\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n  },\n  hidden,\n  goToCallCtrl,\n  defaultOffsetX = 0,\n  defaultOffsetY = 0,\n}) {\n  const currentSession =\n    webphone.activeSession || webphone.ringSession || {};\n  return {\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    hidden,\n    goToCallCtrl,\n    defaultOffsetX,\n    defaultOffsetY,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n  },\n}) {\n  return {\n    toggleMinimized: sessionId => webphone.toggleMinimized(sessionId),\n  };\n}\n\nconst CallBadgeContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallBadge));\n\nexport default CallBadgeContainer;\n\n"]}