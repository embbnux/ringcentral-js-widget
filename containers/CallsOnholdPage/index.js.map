{"version":3,"sources":["containers/CallsOnholdPage/index.js"],"names":["CallsOnholdContainer","props","getCalls","calls","fromSessionId","call","webphoneSession","direction","callDirections","inbound","isConferenceSession","id","Component","propTypes","PropTypes","arrayOf","object","isRequired","string","func","mapToProps","_","phone","callMonitor","params","baseProps","mapToFunctions","webphone","conferenceCall","routerInteraction","getAvatarUrl","onMerge","sessionId","callsOnHoldClickMergeTrack","parseMergingSessions","sessionIdToMergeWith","sessions","confId","conferences","confSessionId","push","goBack","mergeSessions","onBackButtonClick","length","go","onAdd","callsOnHoldClickAddTrack","fromNumber","webphoneHangup","callsOnHoldClickHangupTrack","hangup","CallsOnholdPage"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport { createSelector } from 'reselect';\nimport { filter } from 'ramda';\n\nimport withPhone from '../../lib/withPhone';\nimport CallsOnholdPanel from '../../components/CallsOnholdPanel';\n\nimport {\n  mapToProps as mapToBaseProps,\n  mapToFunctions as mapToBaseFunctions,\n} from '../ActiveCallsPage';\n\n\nclass CallsOnholdContainer extends Component {\n  static propTypes = {\n    calls: PropTypes.arrayOf(PropTypes.object).isRequired,\n    fromSessionId: PropTypes.string.isRequired,\n    isConferenceSession: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getCalls = createSelector(\n      () => this.props.calls,\n      () => this.props.fromSessionId,\n      (calls, fromSessionId) => filter(\n        call => (\n          call.webphoneSession &&\n          call.direction !== callDirections.inbound\n          && !this.props.isConferenceSession(call.webphoneSession)\n          && call.webphoneSession.id !== fromSessionId\n        ),\n        calls\n      ),\n    );\n  }\n\n  render() {\n    return <CallsOnholdPanel {...this.props} calls={this.getCalls()} />;\n  }\n}\n\nfunction mapToProps(_, {\n  phone,\n  phone: {\n    callMonitor,\n  },\n  params,\n  ...props\n}) {\n  const { fromSessionId } = params;\n  const baseProps = mapToBaseProps(_, {\n    phone,\n    ...props,\n  });\n\n  return {\n    ...baseProps,\n    calls: callMonitor.calls,\n    fromSessionId,\n  };\n}\n\nfunction mapToFunctions(_, {\n  params,\n  phone,\n  phone: {\n    webphone,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  ...props\n}) {\n  const { fromSessionId } = params;\n\n  const baseProps = mapToBaseFunctions(_, {\n    params,\n    phone,\n    ...props,\n  });\n  return {\n    ...baseProps,\n    async onMerge(sessionId) {\n      // to track user click merge\n      callMonitor.callsOnHoldClickMergeTrack();\n\n      const sessions = await conferenceCall.parseMergingSessions({\n        sessionId,\n        sessionIdToMergeWith: fromSessionId,\n      });\n      if (sessions) {\n        const confId = conferenceCall.conferences && Object.keys(conferenceCall.conferences)[0];\n        if (confId) {\n          const confSessionId = conferenceCall.conferences[confId].sessionId;\n          routerInteraction.push(`/calls/active/${confSessionId}`);\n        } else {\n          routerInteraction.goBack();\n        }\n        await conferenceCall.mergeSessions(sessions);\n      }\n    },\n    onBackButtonClick() {\n      if (webphone.sessions.length) {\n        routerInteraction.goBack();\n        return;\n      }\n      phone.routerInteraction.go(-2);\n    },\n    onAdd() {\n      // to track use click add button\n      callMonitor.callsOnHoldClickAddTrack();\n      routerInteraction.push(`/conferenceCall/dialer/${params.fromNumber}/${params.fromSessionId}`);\n    },\n    getAvatarUrl,\n    isConferenceSession: (...args) => conferenceCall.isConferenceSession(...args),\n    async webphoneHangup(...args) {\n      // track user click hangup on calls onhold page\n      callMonitor.callsOnHoldClickHangupTrack();\n      return (webphone && webphone.hangup(...args));\n    },\n  };\n}\n\nconst CallsOnholdPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallsOnholdContainer));\n\nexport default CallsOnholdPage;\n"]}