{"version":3,"sources":["containers/CallCtrlPage/index.js"],"names":["mapToProps","_","phone","webphone","locale","contactMatcher","regionSettings","brand","forwardingNumber","contactSearch","conferenceCall","callingSettings","rolesAndPermissions","params","children","sessionId","currentSession","sessions","find","session","id","activeSession","contactMapping","dataMapping","fromMatches","from","toMatches","to","nameMatches","direction","callDirections","outbound","isWebRTC","callingMode","callingModes","isInboundCall","inbound","isOnConference","hasConferenceCall","isMerging","conferenceCallParties","conferenceCallId","lastCallInfo","isConferenceCallOverload","conferenceCallEquipped","hasConferenceCallPermission","isConferenceSession","conferenceData","conferences","conference","isOverload","partyProfiles","fromSessionId","mergingPair","status","sessionStatus","finished","fullName","currentLocale","areaCode","countryCode","flipNumbers","showBackButton","searchContactList","sortedResult","showSpinner","mapToFunctions","routerInteraction","callMonitor","getAvatarUrl","onBackButtonClick","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","getInitialLayout","layout","callCtrlLayouts","normalCtrl","conferenceCtrl","fromSession","x","activeSessionId","callStatus","onHold","mergeCtrl","formatPhone","phoneNumber","onHangup","hangup","mergeControlClickHangupTrack","onMute","mute","onUnmute","unmute","hold","onUnhold","unhold","onRecord","startRecord","onStopRecord","stopRecord","sendDTMF","value","updateSessionMatchedContact","contact","onFlip","flipNumber","flip","onTransfer","transferNumber","transfer","onPark","park","searchContact","debouncedSearch","searchString","onAdd","callControlClickAddTrack","isCallRecording","otherOutboundCalls","call","webphoneSession","allCalls","length","push","fromNumber","setMergeParty","onBeforeMerge","conferenceSession","onMerge","mergeSession","gotoParticipantsCtrl","callControlClickParticipantAreaTrack","loadConference","confId","closeMergingPair","afterHideMergeConfirm","confirmMergeClickCloseTrack","afterConfirmMerge","confirmMergeClickMergeTrack","afterOnMerge","callControlClickMergeTrack","CallCtrlContainer","CallCtrlPage","propTypes","PropTypes","func","isRequired","backButtonLabel","string","node","showContactDisplayPlaceholder","bool","sourceIcons","object","defaultProps","undefined","default"],"mappings":"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","file":"index.js","sourcesContent":["import { find, filter } from 'ramda';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\nimport { withPhone } from '../../lib/phoneContext';\nimport callCtrlLayouts from '../../enums/callCtrlLayouts';\nimport CallCtrlPage from './CallCtrlPage';\n\nfunction mapToProps(_, {\n  phone: {\n    webphone,\n    locale,\n    contactMatcher,\n    regionSettings,\n    brand,\n    forwardingNumber,\n    contactSearch,\n    conferenceCall,\n    callingSettings,\n    rolesAndPermissions,\n  },\n  params,\n  children,\n}) {\n  const sessionId = params && params.sessionId;\n  let currentSession;\n\n  if (sessionId) {\n    currentSession = webphone.sessions.find(session => session.id === sessionId) || {};\n  } else {\n    currentSession = webphone.activeSession || {};\n  }\n\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  const fromMatches = (contactMapping && contactMapping[currentSession.from]) || [];\n  const toMatches = (contactMapping && contactMapping[currentSession.to]) || [];\n  const nameMatches =\n    currentSession.direction === callDirections.outbound ? toMatches : fromMatches;\n\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  const isInboundCall = currentSession.direction === callDirections.inbound;\n\n  let isOnConference = false;\n  let hasConferenceCall = false;\n  let isMerging = false;\n  let conferenceCallParties;\n  let conferenceCallId = null;\n  const lastCallInfo = conferenceCall && conferenceCall.lastCallInfo;\n  let isConferenceCallOverload = false;\n  const conferenceCallEquipped =\n    !!(conferenceCall && rolesAndPermissions.hasConferenceCallPermission);\n  if (conferenceCallEquipped) {\n    isOnConference = conferenceCall.isConferenceSession(currentSession.id);\n    const conferenceData = Object.values(conferenceCall.conferences)[0];\n\n    isMerging = conferenceCall.isMerging;\n\n    if (conferenceData && isWebRTC) {\n      conferenceCallId = conferenceData.conference.id;\n      isConferenceCallOverload = conferenceCall.isOverload(conferenceCallId);\n    }\n\n    hasConferenceCall = !!conferenceData;\n    conferenceCallParties = conferenceCall.partyProfiles;\n\n    const { fromSessionId } = conferenceCall.mergingPair;\n    if (\n      (!isInboundCall &&\n        (\n          fromSessionId &&\n          fromSessionId !== currentSession.id &&\n          lastCallInfo &&\n          lastCallInfo.status &&\n          lastCallInfo.status !== sessionStatus.finished\n        ))\n    ) {\n      // for mergeCtrl page, we don't show any children (container) component.\n      children = null;\n    }\n  }\n\n  return {\n    brand: brand.fullName,\n    nameMatches,\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    flipNumbers: forwardingNumber.flipNumbers,\n    showBackButton: true, // callMonitor.calls.length > 0,\n    searchContactList: contactSearch.sortedResult,\n    showSpinner: isMerging,\n    conferenceCallEquipped,\n    hasConferenceCall,\n    conferenceCallParties,\n    conferenceCallId,\n    lastCallInfo,\n    children,\n    isOnConference,\n    isWebRTC,\n    isConferenceCallOverload,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    webphone,\n    regionSettings,\n    contactSearch,\n    conferenceCall,\n    routerInteraction,\n    callMonitor,\n  },\n  getAvatarUrl,\n  onBackButtonClick,\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    getInitialLayout({\n      conferenceCallEquipped,\n      isOnConference,\n      lastCallInfo,\n      session\n    }) {\n      let layout = callCtrlLayouts.normalCtrl;\n\n      if (!conferenceCallEquipped) {\n        return layout;\n      }\n\n      if (isOnConference) {\n        return callCtrlLayouts.conferenceCtrl;\n      }\n      const isInboundCall = session.direction === callDirections.inbound;\n\n      const { fromSessionId } = conferenceCall.mergingPair;\n      const fromSession = find(x => x.id === fromSessionId, webphone.sessions);\n\n      const activeSessionId = webphone && webphone.activeSession && webphone.activeSession.id;\n\n      if (!isOnConference &&\n         !isInboundCall &&\n        (\n          fromSession &&\n          (fromSessionId !== session.id) &&\n          lastCallInfo\n        ) &&\n        (\n          session.callStatus !== sessionStatus.onHold ||\n          (session.callStatus === sessionStatus.onHold && session.id === activeSessionId)\n        )\n      ) {\n        // enter merge ctrl page.\n        layout = callCtrlLayouts.mergeCtrl;\n      }\n\n      return layout;\n    },\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    onHangup(sessionId, layout) {\n      webphone.hangup(sessionId);\n      if (layout && layout === callCtrlLayouts.mergeCtrl) {\n        callMonitor.mergeControlClickHangupTrack();\n      }\n    },\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold(sessionId) {\n      webphone.unhold(sessionId);\n    },\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    updateSessionMatchedContact: (sessionId, contact) => (\n      webphone.updateSessionMatchedContact(sessionId, contact)\n    ),\n    getAvatarUrl,\n    onBackButtonClick,\n    onFlip: (flipNumber, sessionId) => webphone.flip(flipNumber, sessionId),\n    onTransfer: (transferNumber, sessionId) => webphone.transfer(transferNumber, sessionId),\n    onPark: sessionId => webphone.park(sessionId),\n    searchContact: searchString => (\n      contactSearch.debouncedSearch({ searchString })\n    ),\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n    onAdd(sessionId) {\n      // track user click add on call control\n      callMonitor.callControlClickAddTrack();\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return;\n      }\n      const otherOutboundCalls = filter(\n        call => call.direction === callDirections.outbound &&\n                (\n                  call.webphoneSession &&\n                  call.webphoneSession.id !== session.id\n                ),\n        callMonitor.allCalls\n      );\n      if (otherOutboundCalls.length) {\n        // goto 'calls on hold' page\n        routerInteraction.push(`/conferenceCall/callsOnhold/${session.fromNumber}/${session.id}`);\n      } else {\n        if (conferenceCall) {\n          conferenceCall.setMergeParty({ fromSessionId: sessionId });\n        }\n        // goto dialer directly\n        routerInteraction.push(`/conferenceCall/dialer/${session.fromNumber}/${sessionId}`);\n      }\n    },\n    onBeforeMerge(sessionId) {\n      const session = find(x => x.id === sessionId, webphone.sessions);\n      if (!session || webphone.isCallRecording({ session })) {\n        return false;\n      }\n      if (conferenceCall) {\n        const conferenceData = Object.values(conferenceCall.conferences)[0];\n        if (conferenceData) {\n          const conferenceSession = find(x => x.id === conferenceData.sessionId, webphone.sessions);\n          if (conferenceSession && webphone.isCallRecording({ session: conferenceSession })) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    async onMerge(sessionId) {\n      await conferenceCall.mergeSession({ sessionId });\n    },\n\n    gotoParticipantsCtrl() {\n      routerInteraction.push('/conferenceCall/participants');\n      // track user click participant area on call control\n      callMonitor.callControlClickParticipantAreaTrack();\n    },\n    loadConference(confId) {\n      if (conferenceCall) {\n        conferenceCall.loadConference(confId);\n      }\n    },\n    closeMergingPair() {\n      return conferenceCall && conferenceCall.closeMergingPair();\n    },\n    setMergeParty(...args) {\n      return conferenceCall && conferenceCall.setMergeParty(...args);\n    },\n    // user action track functions\n    afterHideMergeConfirm: () => callMonitor.confirmMergeClickCloseTrack(),\n    afterConfirmMerge: () => callMonitor.confirmMergeClickMergeTrack(),\n    afterOnMerge: () => callMonitor.callControlClickMergeTrack()\n  };\n}\n\nconst CallCtrlContainer = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(CallCtrlPage));\n\nCallCtrlContainer.propTypes = {\n  getAvatarUrl: PropTypes.func,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  backButtonLabel: PropTypes.string,\n  children: PropTypes.node,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n};\n\nCallCtrlContainer.defaultProps = {\n  getAvatarUrl: () => null,\n  showContactDisplayPlaceholder: false,\n  children: undefined,\n  sourceIcons: undefined,\n};\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  CallCtrlPage,\n  CallCtrlContainer as default,\n};\n"]}