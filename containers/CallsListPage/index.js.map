{"version":3,"sources":["containers/CallsListPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","callHistory","connectivityMonitor","rateLimiter","dateTimeFormat","call","composeText","showContactDisplayPlaceholder","enableContactFallback","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","fullName","autoLog","calls","latestCalls","disableLinks","connectivity","throttling","disableClickToDial","isIdle","loggingMap","showSpinner","ready","readTextPermission","readTextPermissions","mapToFunctions","contactMatcher","contactSearch","routerInteraction","webphone","dialerUI","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onViewContact","dateTimeFormatter","utcTimestamp","formatDateTime","dialerRoute","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","name","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","undefined","contact","redirect","logCall","type","id","onClickToDial","recipient","onClickToCall","onClickToSms","isDummyContact","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","onClickToSMS","CallsListPage","CallsListPanel"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport { withPhone } from '../../lib/phoneContext';\n\nimport CallsListPanel from '../../components/CallsListPanel';\n\n// TODO it is ActiveCallsPage's function is the same, and remove ActiveCallsPage after migration.\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n    callHistory,\n    connectivityMonitor,\n    rateLimiter,\n    dateTimeFormat,\n    call,\n    composeText,\n  },\n  showContactDisplayPlaceholder = false,\n  enableContactFallback = false,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    // showSpinner: false,\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    enableContactFallback,\n    calls: callHistory.latestCalls,\n    disableLinks: !connectivityMonitor.connectivity ||\n    rateLimiter.throttling,\n    disableClickToDial: !(call && call.isIdle),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      callHistory.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      dateTimeFormat.ready &&\n      connectivityMonitor.ready &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!call || call.ready) &&\n      (!composeText || composeText.ready) &&\n      (!callLogger || callLogger.ready)\n    ),\n    readTextPermission: rolesAndPermissions.readTextPermissions,\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n    dateTimeFormat,\n    call,\n    dialerUI,\n    callHistory,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onViewContact,\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  }),\n  dialerRoute = '/dialer',\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneToVoicemail: (...args) => (webphone && webphone.toVoiceMail(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n\n    dateTimeFormatter,\n    onViewContact: onViewContact || (({ contact: { type, id } }) => {\n      routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n    }),\n    onClickToDial: dialerUI ?\n      (recipient) => {\n        if (call.isIdle) {\n          routerInteraction.push(dialerRoute);\n          dialerUI.call({ recipient });\n          callHistory.onClickToCall();\n        }\n      } :\n      undefined,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        // if contact autocomplete, if no match fill the number only\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n        callHistory.onClickToSMS();\n      } :\n      undefined,\n  };\n}\n\nconst CallsListPage = withPhone(connect(mapToProps, mapToFunctions)(CallsListPanel));\n\nexport default CallsListPage;\n"]}