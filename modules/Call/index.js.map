{"version":3,"sources":["modules/Call/index.js"],"names":["Call","deps","dep","optional","alert","storage","callingSettings","softphone","ringout","webphone","numberValidate","regionSettings","rolesAndPermissions","options","actionTypes","callActionTypes","_alert","ensureExist","_storage","_storageKey","_reducer","_callingSettings","_ringout","_softphone","_webphone","_numberValidate","_regionSettings","_rolesAndPermissions","_callSettingMode","registerReducer","key","reducer","lastPhoneNumber","lastRecipient","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_initCallModule","initSuccess","_shouldReset","_resetCallModule","ready","_processCall","pending","callingMode","callingModes","connect","resetSuccess","disconnect","oldCallSettingMode","value","toNumberChanged","data","entityId","startTime","isIdle","toNumberMatched","cleanToNumberEntities","input","phoneNumber","recipient","fromNumber","isConference","session","extendedControls","toNumber","extension","trim","length","warning","message","callErrors","noToNumber","callSettingMode","_getValidatedNumbers","validatedNumbers","_makeCall","connectSuccess","connectError","payload","ringoutErrors","firstLegConnectFailed","connectFailed","danger","networkError","internalError","isWebphone","theFromNumber","myLocation","waitingValidateNumbers","push","number","parsedToNumber","parsedFromNumber","numbers","map","x","validateNumbers","validatedResult","result","errors","forEach","error","toNumberIndex","findIndex","fromNumberIndex","international","permissions","InternationalCalls","originalString","parsedFromNumberE164","e164","subAddress","join","homeCountry","availableCountries","find","country","isoCode","countryCode","homeCountryId","callingCode","makeCall","prompt","ringoutPrompt","state","status","callStatus","idle","getItem","toNumberEntities","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { combineReducers } from 'redux';\nimport extractControls from '@ringcentral-integration/phone-number/lib/extractControls';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport callingModes from '../CallingSettings/callingModes';\nimport proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastPhoneNumberReducer,\n  getLastRecipientReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n/**\n * @class\n * @description Call managing module\n */\n@Module({\n  deps: [\n    'Alert',\n    'Storage',\n    'Softphone',\n    'Ringout',\n    'NumberValidate',\n    'RegionSettings',\n    'CallingSettings',\n    'RolesAndPermissions',\n    { dep: 'Webphone', optional: true },\n    { dep: 'CallOptions', optional: true }\n  ]\n})\nexport default class Call extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {CallingSettings} params.callingSettings - callingSettings module instance\n   * @param {Softphone} params.softphone - softphone module instance\n   * @param {Ringout} params.ringout - ringout module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   */\n  constructor({\n    alert,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    webphone,\n    numberValidate,\n    regionSettings,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = this:: ensureExist(alert, 'alert');\n    this._storage = this:: ensureExist(storage, 'storage');\n    this._storageKey = 'callData';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = this:: ensureExist(callingSettings, 'callingSettings');\n    this._ringout = this:: ensureExist(ringout, 'ringout');\n    this._softphone = this:: ensureExist(softphone, 'softphone');\n    this._webphone = webphone;\n    this._numberValidate = this:: ensureExist(numberValidate, 'numberValidate');\n    this._regionSettings = this:: ensureExist(regionSettings, 'regionSettings');\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n\n    this._callSettingMode = null;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: combineReducers({\n        lastPhoneNumber: getLastPhoneNumberReducer(this.actionTypes),\n        lastRecipient: getLastRecipientReducer(this.actionTypes),\n      }),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      await this._initCallModule();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetCallModule();\n    } else if (this.ready) {\n      await this._processCall();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._numberValidate.ready &&\n      this._callingSettings.ready &&\n      this._storage.ready &&\n      this._regionSettings.ready &&\n      (!this._webphone || this._webphone.ready) &&\n      this._ringout.ready &&\n      this._softphone.ready &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n  _shouldReset() {\n    return (\n      (\n        !this._numberValidate.ready ||\n        !this._callingSettings.ready ||\n        !this._regionSettings.ready ||\n        (!!this._webphone && !this._webphone.ready) ||\n        !this._ringout.ready ||\n        !this._softphone.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  async _initCallModule() {\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      await this._webphone.connect();\n    }\n  }\n\n  _resetCallModule() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      this._webphone.disconnect();\n    }\n  }\n  async _processCall() {\n    const oldCallSettingMode = this._callSettingMode;\n    if (this._callingSettings.callingMode !== oldCallSettingMode && this._webphone) {\n      this._callSettingMode = this._callingSettings.callingMode;\n      if (oldCallSettingMode === callingModes.webphone) {\n        this._webphone.disconnect();\n      } else if (this._callSettingMode === callingModes.webphone) {\n        await this._webphone.connect();\n      }\n    }\n  }\n  @proxify\n  async onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  // save the click to dial entity, only when call took place\n  onToNumberMatch({ entityId, startTime }) {\n    if (this.isIdle) {\n      this.store.dispatch({\n        type: this.actionTypes.toNumberMatched,\n        data: { entityId, startTime },\n      });\n    }\n  }\n\n  cleanToNumberEntities() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanToNumberEntities,\n    });\n  }\n\n  @proxify\n  async call({\n    phoneNumber: input,\n    recipient,\n    fromNumber,\n    isConference = false,\n  }) {\n    let session = null;\n    if (this.isIdle) {\n      const {\n        phoneNumber,\n        extendedControls,\n      } = extractControls(input);\n      const toNumber = recipient && (recipient.phoneNumber || recipient.extension) || phoneNumber;\n      if (!toNumber || `${toNumber}`.trim().length === 0) {\n        this._alert.warning({\n          message: callErrors.noToNumber,\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          isConference,\n          phoneNumber,\n          recipient,\n          callSettingMode: this._callSettingMode, // for Track\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers({\n            toNumber,\n            fromNumber,\n            isConference,\n          });\n\n          if (validatedNumbers) {\n            session = await this._makeCall({\n              ...validatedNumbers,\n              extendedControls,\n            });\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess,\n              callSettingMode: this._callSettingMode // for Track\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError\n            });\n          }\n        } catch (error) {\n          if (!error.message && error.type && callErrors[error.type]) {\n            // validate format error\n            this._alert.warning({\n              message: callErrors[error.type],\n              payload: {\n                phoneNumber: error.phoneNumber\n              }\n            });\n          } else if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payload: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payload: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payload: error,\n            });\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError\n          });\n          throw error;\n        }\n      }\n    }\n    return session;\n  }\n\n  @proxify\n  async _getValidatedNumbers({\n    toNumber,\n    fromNumber,\n    isConference,\n  }) {\n    const isWebphone = (this._callingSettings.callingMode === callingModes.webphone);\n    const theFromNumber = fromNumber || (\n      isWebphone ?\n        this._callingSettings.fromNumber :\n        this._callingSettings.myLocation\n    );\n\n    if (isWebphone && (theFromNumber === null || theFromNumber === '')) {\n      return null;\n    }\n\n    const waitingValidateNumbers = [];\n\n    if (!isConference) {\n      waitingValidateNumbers.push({\n        type: 'toNumber',\n        number: toNumber,\n      });\n    }\n\n    if (\n      theFromNumber &&\n      theFromNumber.length > 0 &&\n      !(isWebphone && theFromNumber === 'anonymous')\n    ) {\n      waitingValidateNumbers.push({\n        type: 'fromNumber',\n        number: theFromNumber,\n      });\n    }\n\n    let parsedToNumber;\n    let parsedFromNumber;\n    if (waitingValidateNumbers.length) {\n      const numbers = waitingValidateNumbers.map(x => x.number);\n      const validatedResult = await this._numberValidate.validateNumbers(numbers);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          // this._alert.warning({\n          //   message: callErrors[error.type],\n          //   payload: {\n          //     phoneNumber: error.phoneNumber\n          //   }\n          // });\n          throw error;\n        });\n        return null;\n      }\n      const toNumberIndex = waitingValidateNumbers.findIndex(x => x.type === 'toNumber');\n      const fromNumberIndex = waitingValidateNumbers.findIndex(x => x.type === 'fromNumber');\n      parsedToNumber = validatedResult.numbers[toNumberIndex];\n      parsedFromNumber = validatedResult.numbers[fromNumberIndex];\n    }\n\n    if (\n      parsedToNumber &&\n      parsedToNumber.international &&\n      !this._rolesAndPermissions.permissions.InternationalCalls\n    ) {\n      const error = {\n        phoneNumber: parsedToNumber.originalString,\n        type: 'noInternational',\n      };\n      throw error;\n    }\n\n    // using e164 in response to call\n    let parsedFromNumberE164;\n    if (parsedFromNumber) {\n      parsedFromNumberE164 = parsedFromNumber.e164;\n      // add ext back if any\n      if (parsedFromNumber.e164 && parsedFromNumber.subAddress) {\n        parsedFromNumberE164 = [parsedFromNumber.e164, parsedFromNumber.subAddress].join('*');\n      }\n    }\n    if (isWebphone && theFromNumber === 'anonymous') {\n      parsedFromNumberE164 = 'anonymous';\n    }\n\n    return {\n      toNumber: parsedToNumber ? parsedToNumber.e164 : toNumber,\n      fromNumber: parsedFromNumberE164,\n    };\n  }\n\n  @proxify\n  async _makeCall({\n    toNumber,\n    fromNumber,\n    callingMode = this._callingSettings.callingMode,\n    extendedControls = [],\n  }) {\n    const homeCountry = this._regionSettings.availableCountries.find(\n      country => country.isoCode === this._regionSettings.countryCode\n    );\n    const homeCountryId = (homeCountry && homeCountry.callingCode) || '1';\n    let session;\n    switch (callingMode) {\n      case callingModes.softphone:\n        session = this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        session = await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      case callingModes.webphone:\n        if (this._webphone) {\n          session = await this._webphone.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n            extendedControls,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n    return session;\n  }\n\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastPhoneNumber() {\n    return this._storage.getItem(this._storageKey).lastPhoneNumber;\n  }\n  get lastRecipient() {\n    return this._storage.getItem(this._storageKey).lastRecipient;\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n\n  get toNumberEntities() {\n    return this.state.toNumberEntities;\n  }\n}\n"]}