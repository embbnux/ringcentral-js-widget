{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationLogIdentityFunction","conversationId","date","conversation","conversationLogId","ConversationLogger","deps","dep","optional","auth","contactMatcher","conversationMatcher","dateTimeFormat","extensionInfo","messageStore","rolesAndPermissions","storage","tabManager","isLoggedContact","isAutoUpdate","formatDateTime","accordWithLogRequirement","options","name","actionTypes","identityFunction","_auth","ensureExist","_contactMatcher","_conversationMatcher","_dateTimeFormat","_extensionInfo","_messageStore","_rolesAndPermissions","_storage","_tabManager","_isLoggedContact","_formatDateTime","_isAutoUpdate","_accordWithLogRequirement","_storageKey","_name","onMessageUpdated","_processConversationLogMap","registerReducer","key","reducer","addSelector","conversationStore","extensionNumber","dataMapping","conversationLogMapping","messages","reduce","allMessages","mapping","slice","sort","sortByDate","forEach","message","type","utcTimestamp","creationTime","createTime","conversationLogMatches","push","_selectors","conversationLogMap","logIds","output","numberMap","addIfNotExist","contact","number","phoneNumber","self","correspondents","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","_autoLogQueue","_autoLogPromise","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","ownerId","all","splice","map","_processConversationLog","length","_processQueue","result","concat","conversationLog","lastRecord","find","item","lastActivity","correspondentMatches","_getCorrespondentMatches","match","queries","_autoLogConversation","autoLog","messageTypes","sms","numbers","selfNumber","selfMatches","selfEntity","correspondentEntity","getLastMatchedCorrespondentEntity","triggerMatch","oldMap","active","id","accordWithProcessLogRequirement","_queueAutoLogConversation","log","redirect","idx","queueIndex","store","dispatch","setAutoLog","serviceFeatures","SMSReceiving","PagerReceiving","enabled","getItem","LoggerBase","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\n/**\n * @class\n * @description Conversation logger module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n    'ContactMatcher',\n    'ConversationMatcher',\n    'DateTimeFormat',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'ConversationLoggerOptions', optional: false }\n  ]\n})\nexport default class ConversationLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationMatcher} params.conversationMatcher - conversationMatcher module instance\n   * @param {DateTimeFormat} params.dateTimeFormat - dateTimeFormat module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {Function} params.isLoggedContact - get if contact is logged\n   * @param {Function} params.formatDateTime - data time format\n   */\n  constructor({\n    auth,\n    contactMatcher,\n    conversationMatcher,\n    dateTimeFormat,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    storage,\n    tabManager,\n    isLoggedContact = () => false,\n    isAutoUpdate = true,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    accordWithLogRequirement,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._contactMatcher = this:: ensureExist(contactMatcher, 'contactMatcher');\n    this._conversationMatcher = this:: ensureExist(conversationMatcher, 'conversationMatcher');\n    this._dateTimeFormat = this:: ensureExist(dateTimeFormat, 'dateTimeFormat');\n    this._extensionInfo = this:: ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this:: ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._storage = this:: ensureExist(storage, 'storage');\n    this._tabManager = tabManager;\n    this._isLoggedContact = isLoggedContact;\n    this._formatDateTime = formatDateTime;\n    this._isAutoUpdate = isAutoUpdate;\n    this._accordWithLogRequirement = accordWithLogRequirement;\n    this._storageKey = `${this._name}Data`;\n    this._messageStore.onMessageUpdated(() => {\n      this._processConversationLogMap();\n    });\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector('conversationLogMap',\n      () => this._messageStore.conversationStore,\n      () => this._extensionInfo.extensionNumber,\n      () => this._conversationMatcher.dataMapping,\n      (conversationStore, extensionNumber, conversationLogMapping = {}) => {\n        const messages = Object.values(conversationStore)\n          .reduce((allMessages, messages) => [...allMessages, ...messages], []);\n        const mapping = {};\n        messages.slice().sort(sortByDate)\n          .forEach((message) => {\n            const { conversationId } = message;\n            const date = this._formatDateTime({\n              type: 'date',\n              utcTimestamp: message.creationTime,\n            });\n            if (!mapping[conversationId]) {\n              mapping[conversationId] = {};\n            }\n            if (!mapping[conversationId][date]) {\n              const conversationLogId = getLogId({ conversationId, date });\n              mapping[conversationId][date] = {\n                conversationLogId,\n                conversationId,\n                creationTime: message.createTime, // for sorting\n                date,\n                type: message.type,\n                messages: [],\n                conversationLogMatches: conversationLogMapping[conversationLogId] || [],\n                ...getNumbersFromMessage({ extensionNumber, message }),\n              };\n            }\n            mapping[conversationId][date].messages.push(message);\n          });\n        return mapping;\n      },\n    );\n\n    this.addSelector('conversationLogIds',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const logIds = [];\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            logIds.push(conversationLogMap[conversationId][date].conversationLogId);\n          });\n        });\n        return logIds;\n      },\n    );\n    this.addSelector('uniqueNumbers',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(contact = {}) {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          if (number && !numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            const conversation = conversationLogMap[conversationId][date];\n            addIfNotExist(conversation.self);\n            conversation.correspondents.forEach(addIfNotExist);\n          });\n        });\n        return output;\n      },\n    );\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: this._selectors.uniqueNumbers,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: this._selectors.conversationLogIds,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n\n    this._lastProcessedConversationLogMap = null;\n    this._autoLogQueue = [];\n    this._autoLogPromise = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      this._storage.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._messageStore.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._readyCheckFunction()\n      );\n  }\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const { ownerId } = this._auth;\n    await sleep(300);\n    if (ownerId !== this._auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue.splice(0, 10)\n        .map(conversation => this._processConversationLog({ conversation }))\n    );\n    if (\n      ownerId === this._auth.ownerId &&\n      this._autoLogQueue.length > 0\n    ) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n  _queueAutoLogConversation({\n    conversation,\n  }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation) {\n    return (conversation.correspondents &&\n      conversation.correspondents.reduce((result, contact) => {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        return number && this._contactMatcher.dataMapping[number] ?\n          result.concat(this._contactMatcher.dataMapping[number]) :\n          result;\n      }, [])) || [];\n  }\n  getLastMatchedCorrespondentEntity(conversation) {\n    const conversationLog = this.conversationLogMap[conversation.conversationId];\n    if (!conversationLog) {\n      return null;\n    }\n    const lastRecord = Object.keys(conversationLog)\n      .map(date => (\n        this.conversationLogMap[conversation.conversationId][date]\n      )).sort(sortByDate).find(item => (\n        item.conversationLogMatches.length > 0\n      ));\n    if (\n      lastRecord &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n    ) {\n      const lastActivity = this._conversationMatcher.dataMapping[lastRecord.conversationLogId][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find(item => (\n        this._isLoggedContact(conversation, lastActivity, item)\n      ));\n    }\n    return null;\n  }\n  async _processConversationLog({\n    conversation,\n  }) {\n    // await this._conversationMatcher.triggerMatch();\n    await this._conversationMatcher.match({ queries: [conversation.conversationLogId] });\n    if (\n      this._isAutoUpdate &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId].length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers = [];\n      const numberMap = {};\n      /* eslint { \"no-inner-declarations\": 0 } */\n      function addIfNotExist(contact) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n      addIfNotExist(conversation.self);\n      conversation.correspondents.forEach(addIfNotExist);\n      await this._contactMatcher.match({ queries: numbers });\n      const selfNumber = conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches = (selfNumber &&\n        this._contactMatcher.dataMapping[conversation.self]) || [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity = (selfMatches &&\n        selfMatches.length === 1 &&\n        selfMatches[0]) ||\n        null;\n\n      let correspondentEntity = this.getLastMatchedCorrespondentEntity(conversation);\n\n      correspondentEntity = correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n  accordWithProcessLogRequirement(...rest) {\n    return (!this._accordWithLogRequirement ||\n      this._accordWithLogRequirement(...rest));\n  }\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (this.ready && this._lastProcessedConversations !== this.conversationLogMap) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._tabManager || this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach((conversationId) => {\n          Object.keys(this._lastProcessedConversations[conversationId]).forEach((date) => {\n            const conversation = this._lastProcessedConversations[conversationId][date];\n            if (\n              !oldMap[conversationId] ||\n              !oldMap[conversationId][date] ||\n              conversation.messages[0].id !== oldMap[conversationId][date].messages[0].id\n            ) {\n              if (this.accordWithProcessLogRequirement(conversation)) {\n                this._queueAutoLogConversation({\n                  conversation,\n                });\n              }\n            }\n          });\n        });\n      }\n    }\n  }\n\n  async _autoLogConversation({ conversation, selfEntity, correspondentEntity }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation({\n    conversationId, correspondentEntity, redirect, ...options\n  }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(Object.keys(this.conversationLogMap[conversationId])\n        .map(date => this.conversationLogMap[conversationId][date])\n        .sort(sortByDate)\n        .map((conversation, idx) => {\n          const queueIndex = this._autoLogQueue\n            .find(item => item.conversationLogId === conversation.conversationLogId);\n          if (queueIndex > -1) {\n            this._autoLogQueue.splice(queueIndex, 1);\n          }\n          return this.log({\n            ...options,\n            conversation,\n            correspondentEntity,\n            redirect: redirect && idx === 0, // only direct on the first item\n          });\n        }));\n    }\n  }\n\n  get available() {\n    const {\n      SMSReceiving,\n      PagerReceiving,\n    } = this._rolesAndPermissions.serviceFeatures;\n    return !!(\n      (SMSReceiving && SMSReceiving.enabled) ||\n      (PagerReceiving && PagerReceiving.enabled)\n    );\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get conversationLogMap() {\n    return this._selectors.conversationLogMap();\n  }\n\n  get conversationLogIds() {\n    return this._selectors.conversationLogIds();\n  }\n  getConversationLogId(message) {\n    if (!message) {\n      return;\n    }\n    const { conversationId } = message;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"]}