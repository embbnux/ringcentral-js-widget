{"version":3,"sources":["modules/Alert/index.js"],"names":["Alert","deps","dep","optional","ttl","options","_autoDismiss","now","Date","ids","state","messages","filter","item","timestamp","map","id","length","dismiss","_reducer","actionTypes","_ttl","message","payload","level","alertLevels","info","allowDuplicates","store","dispatch","type","alert","uuid","v4","setTimeout","danger","warning","success","concat","dismissAll","moduleStatuses","ready","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport alertLevels from './alertLevels';\nimport getAlertReducer from './getAlertReducer';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @class\n * @description Alert messages managing module.\n */\n@Module({\n  deps: [{ dep: 'AlertOptions', optional: true }]\n})\nexport default class Alert extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Number} params.ttl - Default time-to-live for alert messages.\n   */\n  constructor({\n    ttl = 5000,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._reducer = getAlertReducer(this.actionTypes);\n    this._ttl = ttl;\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  _onStateChange() {\n    /* do nothing */\n  }\n\n  // this module has no dependency, and is always ready\n  // eslint-disable-next-line class-methods-use-this\n  get status() {\n    return moduleStatuses.ready;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  get ready() {\n    return true;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  /**\n   * @function\n   * @description Scans the messages for expired ones and dismiss them.\n   */\n  _autoDismiss = () => {\n    const now = Date.now();\n    const ids = this.state.messages\n      .filter(item => item.ttl > 0 && now - item.timestamp > item.ttl)\n      .map(item => item.id);\n    if (ids.length) {\n      this.dismiss(ids);\n    }\n  }\n\n  /**\n   * @function\n   * @description Add alert message to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {alertLevels} options.level\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  @proxify\n  async alert({\n    message,\n    payload,\n    level = alertLevels.info,\n    ttl = this._ttl,\n    allowDuplicates = true,\n  }) {\n    this.store.dispatch({\n      type: this.actionTypes.alert,\n      message,\n      payload,\n      level,\n      ttl,\n      allowDuplicates,\n      id: uuid.v4(),\n      timestamp: Date.now(),\n    });\n    if (ttl > 0) {\n      setTimeout(this._autoDismiss, ttl + 10);\n    }\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"danger\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  danger(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.danger,\n    });\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"warning\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  warning(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.warning,\n    });\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"info\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  info(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.info,\n    });\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"success\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  success(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.success,\n    });\n  }\n  /**\n   * @function\n   * @description Dismiss the message from the state.\n   * @param {Array<String>|String} ids - The id, or array of ids to be dismissed.\n   */\n  @proxify\n  async dismiss(ids) {\n    this.store.dispatch({\n      type: this.actionTypes.dismiss,\n      ids: [].concat(ids),\n    });\n  }\n  /**\n   * @function\n   * @description Dismiss all messages.\n   */\n  @proxify\n  async dismissAll() {\n    this.store.dispatch({\n      type: this.actionTypes.dismissAll,\n    });\n  }\n}\n"]}