{"version":3,"sources":["modules/Conference/index.js"],"names":["DEFAULT_MASK","Conference","deps","dep","optional","client","regionSettings","storage","rolesAndPermissions","options","name","fetchFunction","mask","account","extension","conferencing","get","actionTypes","_dialInNumberStorageKey","_additionalNumbersStorageKey","_regionSetting","_rolesAndPermissions","_lastCountryCode","_storage","registerReducer","key","reducer","updateDialInNumber","updateAdditionalNumbers","data","ready","countryCode","matchedPhoneNumber","phoneNumbers","find","e","country","isoCode","phoneNumber","dialInNumber","allowJoinBeforeHost","_client","put","_store","dispatch","type","fetchSuccess","additionalNumbers","store","inviteWithText","joinAsHost","_tabManager","active","getItem","permissions","OrganizeConference","DataFetcher","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import mask from 'json-mask';\nimport { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport createSimpleReducer from '../../lib/createSimpleReducer';\nimport actionTypes from './actionTypes';\nimport proxify from '../../lib/proxy/proxify';\n\nconst DEFAULT_MASK = 'phoneNumber,hostCode,participantCode,phoneNumbers(country(callingCode,id,isoCode,name),phoneNumber,location),allowJoinBeforeHost';\n\n/**\n * @class\n * @description Conference managing module\n */\n@Module({\n  deps: [\n    'Client', 'Storage', 'RegionSettings', 'RolesAndPermissions', { dep: 'ConferenceOptions', optional: true }\n  ]\n})\nexport default class Conference extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    regionSettings,\n    storage,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      name: 'conference',\n      client,\n      fetchFunction: async () => mask(\n        await client.account().extension().conferencing().get(),\n        DEFAULT_MASK,\n      ),\n      actionTypes,\n      storage,\n      ...options,\n    });\n    this._dialInNumberStorageKey = 'conferenceDialInNumber';\n    this._additionalNumbersStorageKey = 'conferenceAdditionalNumbers';\n    this._regionSetting = regionSettings;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._lastCountryCode = null;\n    this._storage.registerReducer({\n      key: this._dialInNumberStorageKey,\n      reducer: createSimpleReducer(this.actionTypes.updateDialInNumber, 'dialInNumber'),\n    });\n    this._storage.registerReducer({\n      key: this._additionalNumbersStorageKey,\n      reducer: createSimpleReducer(this.actionTypes.updateAdditionalNumbers, 'additionalNumbers'),\n    });\n  }\n\n  async _onStateChange() {\n    super._onStateChange();\n    if (!this.data\n      || !this._regionSetting.ready\n      || this._lastCountryCode === this._regionSetting.countryCode) {\n      return;\n    }\n    this._lastCountryCode = this._regionSetting.countryCode;\n    const matchedPhoneNumber = this.data.phoneNumbers.find(\n      e => e.country.isoCode === this._lastCountryCode\n    );\n    if (matchedPhoneNumber && matchedPhoneNumber.phoneNumber !== this.dialInNumber) {\n      this.updateDialInNumber(matchedPhoneNumber.phoneNumber);\n    }\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._rolesAndPermissions.ready;\n  }\n\n  @proxify\n  async updateEnableJoinBeforeHost(allowJoinBeforeHost) {\n    const data = await this._client.account().extension().conferencing()\n      .put({ allowJoinBeforeHost });\n    this._store.dispatch({ type: this.actionTypes.fetchSuccess, data });\n  }\n\n  @proxify\n  updateDialInNumber(dialInNumber) {\n    this._store.dispatch({ type: this.actionTypes.updateDialInNumber, dialInNumber });\n  }\n\n  @proxify\n  updateAdditionalNumbers(additionalNumbers) {\n    this._store.dispatch({ type: this.actionTypes.updateAdditionalNumbers, additionalNumbers });\n  }\n\n  // for track invite with text\n  @proxify\n  onInviteWithText() {\n    this.store.dispatch({\n      type: this.actionTypes.inviteWithText\n    });\n  }\n  // for track join as host\n  @proxify\n  onJoinAsHost() {\n    this.store.dispatch({\n      type: this.actionTypes.joinAsHost\n    });\n  }\n\n  get additionalNumbers() {\n    return this._storage.getItem(this._additionalNumbersStorageKey) || [];\n  }\n\n  get dialInNumber() {\n    return this._storage.getItem(this._dialInNumberStorageKey) ||\n      (this.data && this.data.phoneNumber);\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.OrganizeConference;\n  }\n\n  _shouldFetch() {\n    return !this._tabManager || this._tabManager.active;\n  }\n}\n"]}