{"version":3,"sources":["modules/CallLogger/getDataReducer.js"],"names":["getLogOnRingingReducer","getAutoLogReducer","getTransferredCallsReducer","getDataReducer","DEFAULT_OPACITY","types","state","type","logOnRinging","setLogOnRinging","initialState","autoLog","setAutoLog","opacity","sessionId","transferredMiddleNumber","addTransferredCall","slice","length","transferredCallsMap"],"mappings":";;;;;;;;;;;;;;QAIgBA,sB,GAAAA,sB;QAOAC,iB,GAAAA,iB;QAOAC,0B,GAAAA,0B;kBAaQC,c;;AA/BxB;;;;AAEA,IAAMC,kBAAkB,EAAxB;;AAEO,SAASJ,sBAAT,CAAgCK,KAAhC,EAAuC;AAC5C,SAAO,YAA0C;AAAA,QAAzCC,KAAyC,uEAAjC,IAAiC;AAAA;AAAA,QAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;;AAC/C,QAAID,SAASF,MAAMI,eAAnB,EAAoC,OAAO,CAAC,CAACD,YAAT;AACpC,WAAOF,KAAP;AACD,GAHD;AAID;;AAEM,SAASL,iBAAT,CAA2BI,KAA3B,EAAuD;AAAA,MAArBK,YAAqB,uEAAN,IAAM;;AAC5D,SAAO,YAA6C;AAAA,QAA5CJ,KAA4C,uEAApCI,YAAoC;AAAA;AAAA,QAApBH,IAAoB,SAApBA,IAAoB;AAAA,QAAdI,OAAc,SAAdA,OAAc;;AAClD,QAAIJ,SAASF,MAAMO,UAAnB,EAA+B,OAAO,CAAC,CAACD,OAAT;AAC/B,WAAOL,KAAP;AACD,GAHD;AAID;;AAEM,SAASJ,0BAAT,CAAoCG,KAApC,EAAsE;AAAA,MAA3BQ,OAA2B,uEAAjBT,eAAiB;;AAC3E,SAAO,YAA8D;AAAA,QAA7DE,KAA6D,uEAArD,EAAqD;AAAA;AAAA,QAA/CC,IAA+C,SAA/CA,IAA+C;AAAA,QAAzCO,SAAyC,SAAzCA,SAAyC;AAAA,QAA9BC,uBAA8B,SAA9BA,uBAA8B;;AACnE,QAAIR,SAASF,MAAMW,kBAAnB,EAAuC;AACrC,wDACMV,MAAMW,KAAN,CAAYX,MAAMY,MAAN,IAAgBL,OAAhB,GAA0B,CAA1B,GAA8B,CAA1C,EAA6CA,OAA7C,CADN,sCAEKC,SAFL,EAEiB,EAAEC,gDAAF,EAFjB;AAID;AACD,WAAOT,KAAP;AACD,GARD;AASD;;AAED;AACe,SAASH,cAAT,CAAwBE,KAAxB,EAAkD;AAAA,MAAnBK,YAAmB,uEAAJ,EAAI;;AAC/D,SAAO,4BAAgB;AACrBC,aAASV,kBAAkBI,KAAlB,EAAyBK,aAAaC,OAAtC,CADY;AAErBH,kBAAcR,uBAAuBK,KAAvB,CAFO;AAGrBc,yBAAqBjB,2BAA2BG,KAA3B;AAHA,GAAhB,CAAP;AAKD","file":"getDataReducer.js","sourcesContent":["import { combineReducers } from 'redux';\n\nconst DEFAULT_OPACITY = 20;\n\nexport function getLogOnRingingReducer(types) {\n  return (state = true, { type, logOnRinging }) => {\n    if (type === types.setLogOnRinging) return !!logOnRinging;\n    return state;\n  };\n}\n\nexport function getAutoLogReducer(types, initialState = true) {\n  return (state = initialState, { type, autoLog }) => {\n    if (type === types.setAutoLog) return !!autoLog;\n    return state;\n  };\n}\n\nexport function getTransferredCallsReducer(types, opacity = DEFAULT_OPACITY) {\n  return (state = [], { type, sessionId, transferredMiddleNumber }) => {\n    if (type === types.addTransferredCall) {\n      return [\n        ...(state.slice(state.length >= opacity ? 1 : 0, opacity)),\n        { [sessionId]: { transferredMiddleNumber } }\n      ];\n    }\n    return state;\n  };\n}\n\n/* istanbul ignore next */\nexport default function getDataReducer(types, initialState = {}) {\n  return combineReducers({\n    autoLog: getAutoLogReducer(types, initialState.autoLog),\n    logOnRinging: getLogOnRingingReducer(types),\n    transferredCallsMap: getTransferredCallsReducer(types)\n  });\n}\n"]}