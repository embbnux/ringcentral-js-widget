{"version":3,"sources":["modules/MessageStore/getDataReducer.js"],"names":["getConversationListReducer","getConversationStoreReducer","getTimestampReducer","getSyncInfoReducer","getDataReducer","messageHelper","types","state","type","records","conversationId","conversationStore","messageIds","newState","stateMap","conversationsISyncSuccess","conversationsFSyncSuccess","updateMessages","length","forEach","oldConversation","push","id","index","record","message","normalizeRecord","newCreationTime","creationTime","isDeleted","messageIsDeleted","messageId","oldMessageList","exsitedMessageList","filter","m","messageIsAcceptable","c","sort","sortByCreationTime","deleteConversation","sliceConversations","indexOf","resetSuccess","updatedConversations","newMessages","concat","oldMessageIndex","findIndex","r","lastModifiedTime","noSorted","keys","reduce","acc","key","messages","persist","timestamp","syncInfo","conversationList"],"mappings":"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","file":"getDataReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport * as messageHelper from '../../lib/messageHelper';\n\nexport function getConversationListReducer(types) {\n  return (state = [], {\n    type, records, conversationId, conversationStore, messageIds\n  }) => {\n    const newState = [];\n    const stateMap = {};\n    switch (type) {\n      case types.conversationsISyncSuccess:\n      case types.conversationsFSyncSuccess:\n      case types.updateMessages:\n        if (type !== types.conversationsFSyncSuccess) {\n          if (!records || records.length === 0) {\n            return state;\n          }\n          state.forEach((oldConversation) => {\n            newState.push(oldConversation);\n            stateMap[oldConversation.id] = {\n              index: newState.length - 1\n            };\n          });\n        }\n        records.forEach((record) => {\n          const message = messageHelper.normalizeRecord(record);\n          const id = message.conversationId;\n          const newCreationTime = message.creationTime;\n          const isDeleted = messageHelper.messageIsDeleted(message);\n          if (stateMap[id]) {\n            const oldConversation = newState[stateMap[id].index];\n            const creationTime = oldConversation.creationTime;\n            if (creationTime < newCreationTime && !isDeleted) {\n              newState[stateMap[id].index] = {\n                id,\n                creationTime: newCreationTime,\n                type: message.type,\n                messageId: message.id,\n              };\n            }\n            // when user deleted a coversation message\n            if (isDeleted && message.id === oldConversation.messageId) {\n              const oldMessageList = conversationStore[id] || [];\n              const exsitedMessageList = oldMessageList.filter(m => m.id !== message.id);\n              if (exsitedMessageList.length > 0) {\n                newState[stateMap[id].index] = {\n                  id,\n                  creationTime: exsitedMessageList[0].creationTime,\n                  type: exsitedMessageList[0].type,\n                  messageId: exsitedMessageList[0].id,\n                };\n                return;\n              }\n              // when user delete conversation\n              newState[stateMap[id].index] = null;\n              delete stateMap[id];\n            }\n            return;\n          }\n          if (isDeleted || !messageHelper.messageIsAcceptable(message)) {\n            return;\n          }\n          newState.push({\n            id,\n            creationTime: newCreationTime,\n            type: message.type,\n            messageId: message.id,\n          });\n          stateMap[id] = {\n            index: newState.length - 1\n          };\n        });\n        return newState.filter(c => !!c).sort(messageHelper.sortByCreationTime);\n      case types.deleteConversation:\n        return state.filter(c => c.id !== conversationId);\n\n      case types.sliceConversations:\n        return state.filter(({ messageId }) => messageIds.indexOf(messageId) > -1);\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getConversationStoreReducer(types) {\n  return (state = {}, {\n    type, records, conversationId, messageIds\n  }) => {\n    let newState = {};\n    const updatedConversations = {};\n    switch (type) {\n      case types.conversationsISyncSuccess:\n      case types.conversationsFSyncSuccess:\n      case types.updateMessages:\n        if (type !== types.conversationsFSyncSuccess) {\n          if (!records || records.length === 0) {\n            return state;\n          }\n          newState = {\n            ...state,\n          };\n        }\n        records.forEach((record) => {\n          const message = messageHelper.normalizeRecord(record);\n          const id = message.conversationId;\n          const newMessages = newState[id] ? [].concat(newState[id]) : [];\n          const oldMessageIndex = newMessages.findIndex(r => r.id === record.id);\n          if (messageHelper.messageIsDeleted(message)) {\n            newState[id] = newMessages.filter(m => m.id !== message.id);\n            if (newState[id].length === 0) {\n              delete newState[id];\n            }\n            return;\n          }\n          if (oldMessageIndex > -1) {\n            if (newMessages[oldMessageIndex].lastModifiedTime < message.lastModifiedTime) {\n              newMessages[oldMessageIndex] = message;\n            }\n          } else if (messageHelper.messageIsAcceptable(message)) {\n            newMessages.push(message);\n          }\n          updatedConversations[id] = 1;\n          newState[id] = newMessages;\n        });\n        Object.keys(updatedConversations).forEach((id) => {\n          const noSorted = newState[id];\n          newState[id] = noSorted.sort(messageHelper.sortByCreationTime);\n        });\n        return newState;\n      case types.deleteConversation:\n        if (!state[conversationId]) {\n          return state;\n        }\n        newState = { ...state };\n        delete newState[conversationId];\n        return newState;\n      case types.sliceConversations: {\n        const keys = Object.keys(state);\n        return keys.reduce((acc, key) => {\n          const messages = state[key];\n          const persist = messages.filter(({ id }) => messageIds.indexOf(id) > -1);\n          if (!persist.length) {\n            return acc;\n          }\n          acc[key] = persist;\n          return acc;\n        }, {});\n      }\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.conversationsFSyncSuccess:\n      case types.conversationsISyncSuccess:\n        return timestamp;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSyncInfoReducer(types) {\n  return (state = null, { type, syncInfo }) => {\n    switch (type) {\n      case types.conversationsFSyncSuccess:\n      case types.conversationsISyncSuccess:\n        return syncInfo;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDataReducer(types) {\n  return combineReducers({\n    conversationList: getConversationListReducer(types),\n    conversationStore: getConversationStoreReducer(types),\n    syncInfo: getSyncInfoReducer(types),\n    timestamp: getTimestampReducer(types),\n  });\n}\n"]}