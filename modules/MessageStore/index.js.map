{"version":3,"sources":["modules/MessageStore/index.js"],"names":["messageHelper","DEFAULT_CONVERSATIONS_LOAD_LENGTH","DEFAULT_CONVERSATION_LOAD_LENGTH","DEFAULT_TTL","DEFAULT_RETRY","DEFAULT_DAYSPAN","getSyncParams","recordCount","conversationLoadLength","dateFrom","dateTo","syncToken","syncType","syncTypes","iSync","params","recordCountPerConversation","fSync","toISOString","MessageStore","deps","dep","optional","auth","alert","client","subscription","storage","tabManager","rolesAndPermissions","connectivityMonitor","ttl","polling","disableCache","timeToRetry","daySpan","conversationsLoadLength","options","actionTypes","_auth","ensureExist","_alert","_client","_subscription","_rolesAndPermissions","_storage","_dataStorageKey","_tabManager","_connectivityMonitor","_ttl","_timeToRetry","_polling","_conversationsLoadLength","_conversationLoadLength","_daySpan","_reducer","registerReducer","key","reducer","data","_promise","_lastSubscriptionMessage","_newInboundMessageNotificationHandlers","_messageUpdatedHandlers","_dispatchedMessageIds","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_connectivity","connectivity","_init","_isDataReady","initSuccess","_shouldReset","_clearTimeout","resetSuccess","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","status","moduleStatuses","initializing","syncInfo","_hasPermission","_shouldFetch","fetchData","console","error","_retry","_startPolling","active","accountExtesionEndPoint","message","test","event","body","changes","passive","receivedRecordsLength","account","extension","messageSync","list","records","length","olderRecordsExist","olderDateTo","Date","creationTime","_syncFunction","olderRecordResult","concat","conversationsISyncSuccess","conversationsFSyncSuccess","conversationsSync","ownerId","setDate","getDate","actionType","getSyncActionType","timestamp","now","conversationStore","_dispatchMessageHandlers","conversationsSyncError","_syncData","t","_timeoutId","setTimeout","pageNumber","_fetchData","handler","push","slice","sort","a","b","getTime","record","id","direction","availability","messageStatus","readStatus","lastModifiedTime","_messageDispatched","forEach","some","m","updateMessages","pushMessages","messageId","messageStore","put","updateRequest","delete","response","messageIds","ids","decodeURIComponent","join","platform","service","url","responses","_updateMessageApi","result","UPDATE_MESSAGE_ONCE_COUNT","leftIds","rightIds","map","_batchUpdateMessagesApi","results","res","json","_updateMessagesApi","rightResults","conversationId","messageList","unreadMessageIds","filter","messageIsUnread","updatedMessages","warning","messageStoreErrors","readFailed","markMessages","unreadFailed","deleteMessageApi","deleteConversation","deleteFailed","clickToSMS","fromType","clickToCall","state","getItem","hasReadMessagesPermission","Pollable","proxify","getter","conversationList","conversationItem","unreadCounts","allConversations","conversations","messageIsTextMessage","conversation","textConversations","reduce","messageIsFax","faxMessages","messageIsVoicemail","voicemailMessages","voiceUnreadCounts","textUnreadCounts","faxUnreadCounts","readTextPermissions","voicemailPermissions","readFaxPermissions"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport syncTypes from '../../enums/syncTypes';\nimport * as messageHelper from '../../lib/messageHelper';\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport getDataReducer from './getDataReducer';\nimport messageStoreErrors from './errors';\n\nconst DEFAULT_CONVERSATIONS_LOAD_LENGTH = 10;\nconst DEFAULT_CONVERSATION_LOAD_LENGTH = 100;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\nconst DEFAULT_DAYSPAN = 7; // default to load 7 days's messages\n\nfunction getSyncParams({\n  recordCount, conversationLoadLength, dateFrom, dateTo, syncToken\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const params = {\n    recordCountPerConversation: conversationLoadLength,\n    syncType: syncTypes.fSync,\n  };\n  if (recordCount) {\n    params.recordCount = recordCount;\n  }\n  if (dateFrom) {\n    params.dateFrom = dateFrom.toISOString();\n  }\n  if (dateTo) {\n    params.dateTo = dateTo.toISOString();\n  }\n  return params;\n}\n\n/**\n * @class\n\n * @description Messages data managing module\n * fetch conversations\n * handle new message subscription\n */\n@Module({\n  deps: [\n    'Alert',\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'MessageStoreOptions', optional: true }\n  ]\n})\nexport default class MessageStore extends Pollable {\n  constructor({\n    auth,\n    alert,\n    client,\n    subscription,\n    storage,\n    tabManager,\n    rolesAndPermissions,\n    connectivityMonitor,\n    ttl = DEFAULT_TTL,\n    polling = false,\n    disableCache = false,\n    timeToRetry = DEFAULT_RETRY,\n    daySpan = DEFAULT_DAYSPAN,\n    conversationsLoadLength = DEFAULT_CONVERSATIONS_LOAD_LENGTH,\n    conversationLoadLength = DEFAULT_CONVERSATION_LOAD_LENGTH,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._client = this::ensureExist(client, 'client');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._rolesAndPermissions =\n      this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n\n    if (!disableCache) {\n      this._storage = storage;\n    }\n\n    this._dataStorageKey = 'messageStoreData';\n\n    this._tabManager = tabManager;\n    this._connectivityMonitor = connectivityMonitor;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._conversationsLoadLength = conversationsLoadLength;\n    this._conversationLoadLength = conversationLoadLength;\n\n    this._daySpan = daySpan;\n\n    if (this._storage) {\n      this._reducer = getReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._dataStorageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes, false),\n      });\n    }\n\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    // setting up event handlers for message\n    this._newInboundMessageNotificationHandlers = [];\n    this._messageUpdatedHandlers = [];\n    this._dispatchedMessageIds = [];\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this._init();\n    } else if (this._isDataReady()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      //\n    } else if (this._shouldReset()) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this.ready) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this._subscription.ready &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._auth.loggedIn ||\n        (this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready) ||\n        !this._rolesAndPermissions.ready ||\n        (this._tabManager && !this._tabManager.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _isDataReady() {\n    return this.status === moduleStatuses.initializing &&\n      this.syncInfo !== null;\n  }\n\n  async _init() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        console.error('fetchData error:', e);\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe('/account/~/extension/~/message-store');\n  }\n\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this.fetchData({ passive: true });\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n\n  async _syncFunction({\n    recordCount,\n    conversationLoadLength,\n    dateFrom,\n    dateTo,\n    syncToken,\n    receivedRecordsLength = 0\n  }) {\n    const params = getSyncParams({\n      recordCount,\n      conversationLoadLength,\n      dateFrom,\n      dateTo,\n      syncToken,\n    });\n    const {\n      records,\n      syncInfo,\n    } = await this._client.account().extension().messageSync().list(params);\n    receivedRecordsLength += records.length;\n    if (!syncInfo.olderRecordsExist || receivedRecordsLength >= recordCount) {\n      return { records, syncInfo };\n    }\n    await sleep(500);\n    const olderDateTo = new Date(records[records.length - 1].creationTime);\n    const olderRecordResult = await this._syncFunction({\n      conversationLoadLength,\n      dateFrom,\n      dateTo: olderDateTo,\n    });\n    return {\n      records: records.concat(olderRecordResult.records),\n      syncInfo,\n    };\n  }\n\n  getSyncActionType({ dateTo, syncToken }) {\n    if (syncToken) {\n      return this.actionTypes.conversationsISyncSuccess;\n    }\n    return this.actionTypes.conversationsFSyncSuccess;\n  }\n\n  async _syncData({\n    dateTo,\n    conversationsLoadLength = this._conversationsLoadLength,\n    conversationLoadLength = this._conversationLoadLength,\n    passive = false,\n  } = {}) {\n    this.store.dispatch({\n      type: this.actionTypes.conversationsSync,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const dateFrom = new Date();\n      dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n      let syncToken = dateTo ? null : this.syncInfo && this.syncInfo.syncToken;\n      const recordCount = conversationsLoadLength * conversationLoadLength;\n      let data;\n      try {\n        data = await this._syncFunction({\n          recordCount,\n          conversationLoadLength,\n          dateFrom,\n          syncToken,\n          dateTo,\n        });\n      } catch (error) {\n        if (\n          error && (\n            error.message === 'Parameter [syncToken] value is invalid' ||\n            error.message === 'Parameter [syncToken] is invalid'\n          )\n        ) {\n          data = await this._syncFunction({\n            recordCount,\n            conversationLoadLength,\n            dateFrom,\n            syncToken: null,\n            dateTo,\n          });\n          syncToken = null;\n        } else {\n          throw error;\n        }\n      }\n      if (this._auth.ownerId === ownerId) {\n        const actionType = this.getSyncActionType({ dateTo, syncToken });\n        this.store.dispatch({\n          type: actionType,\n          recordCount,\n          records: data.records,\n          syncInfo: data.syncInfo,\n          timestamp: Date.now(),\n          conversationStore: this.conversationStore,\n        });\n        // this is only executed in passive sync mode (aka. invoked by subscription)\n        if (passive) {\n          this._dispatchMessageHandlers(data.records);\n        }\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        console.error(error);\n        this.store.dispatch({\n          type: this.actionTypes.conversationsSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n\n  async _fetchData({\n    dateTo,\n    conversationsLoadLength,\n    conversationLoadLength,\n    passive = false,\n  } = {}) {\n    try {\n      await this._syncData({\n        dateTo,\n        conversationsLoadLength,\n        conversationLoadLength,\n        passive,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  _startPolling(t = (this.timestamp + this.ttl + 10) - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if ((!this._tabManager || this._tabManager.active) && this.pageNumber === 1) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n\n  @proxify\n  async fetchData({ passive = false } = {}) {\n    if (!this._promise) {\n      this._promise = this._fetchData({ passive });\n    }\n    await this._promise;\n  }\n\n  onNewInboundMessage(handler) {\n    if (typeof handler === 'function') {\n      this._newInboundMessageNotificationHandlers.push(handler);\n    }\n  }\n\n  onMessageUpdated(handler) {\n    if (typeof handler === 'function') {\n      this._messageUpdatedHandlers.push(handler);\n    }\n  }\n\n  /**\n   * Dispatch events to different handlers\n   */\n  _dispatchMessageHandlers(records) {\n    // Sort all records by creation time\n    records = records.slice().sort((a, b) =>\n      (new Date(a.creationTime)).getTime() - (new Date(b.creationTime)).getTime()\n    );\n    for (const record of records) {\n      const {\n        id,\n        direction,\n        availability,\n        messageStatus,\n        readStatus,\n        lastModifiedTime,\n        creationTime,\n      } = record || {};\n      // Notify when new message incoming\n      // fix mix old messages and new messages logic error.\n      if (!this._messageDispatched(record)) {\n        // Mark last 10 messages that dispatched\n        // To present dispatching same record twice\n        this._dispatchedMessageIds =\n        [{ id, lastModifiedTime }].concat(this._dispatchedMessageIds).slice(0, 20);\n        this._messageUpdatedHandlers.forEach(handler => handler(record));\n        // For new inbound message notification\n        if (\n          direction === 'Inbound' &&\n          readStatus === 'Unread' &&\n          messageStatus === 'Received' &&\n          availability === 'Alive' &&\n          (new Date(creationTime)).getTime() > (new Date(lastModifiedTime)).getTime() - (600 * 1000)\n        ) {\n          this._newInboundMessageNotificationHandlers.forEach(handler => handler(record));\n        }\n      }\n    }\n  }\n\n  _messageDispatched(message) {\n    return this._dispatchedMessageIds.some(\n      m => m.id === message.id && m.lastModifiedTime === message.lastModifiedTime\n    );\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async deleteMessageApi(messageId) {\n    const response = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n    return response;\n  }\n\n  async _batchUpdateMessagesApi(messageIds, body) {\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  async _updateMessagesApi(messageIds, status) {\n    if (messageIds.length === 1) {\n      const result = await this._updateMessageApi(messageIds[0], status);\n      return [result];\n    }\n    const UPDATE_MESSAGE_ONCE_COUNT = 20;\n    const leftIds = messageIds.slice(0, UPDATE_MESSAGE_ONCE_COUNT);\n    const rightIds = messageIds.slice(UPDATE_MESSAGE_ONCE_COUNT);\n    const body = leftIds.map(() => (\n      { body: { readStatus: status } }\n    ));\n    const responses = await this._batchUpdateMessagesApi(leftIds, body);\n    const results = [];\n    responses.forEach((res) => {\n      if (res.response().status === 200) {\n        results.push(res.json());\n      }\n    });\n    if (rightIds.length > 0) {\n      const rightResults = await this._updateMessagesApi(rightIds, status);\n      if (rightResults.length > 0) {\n        results.concat(rightResults);\n      }\n    }\n    return results;\n  }\n\n  @proxify\n  async readMessages(conversationId) {\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return null;\n    }\n    const unreadMessageIds = messageList.filter(messageHelper.messageIsUnread).map(m => m.id);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.readFailed,\n      });\n    }\n    return null;\n  }\n\n  @proxify\n  async unreadMessage(messageId) {\n    //  for track mark message\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: [message],\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.unreadFailed,\n      });\n    }\n  }\n\n  @proxify\n  async onUnmarkMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n  }\n\n  @proxify\n  async deleteConversationMessages(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    const messageList = this.conversationStore[conversationId];\n    if (!messageList || messageList.length === 0) {\n      return;\n    }\n    const messageId = messageList.map(m => m.id).join(',');\n    try {\n      await this.deleteMessageApi(messageId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.deleteFailed,\n      });\n    }\n  }\n\n  @proxify\n  async deleteConversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    try {\n      await this._client.account()\n        .extension()\n        .messageStore()\n        .delete({\n          conversationId\n        });\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.deleteFailed,\n      });\n    }\n  }\n\n  // for track click to sms in message list\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n\n  // for track click to call in message list\n  @proxify\n  onClickToCall({ fromType = '' }) {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n      fromType\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get data() {\n    return this._storage ?\n      this._storage.getItem(this._dataStorageKey) :\n      this.state.data;\n  }\n\n  get timestamp() {\n    return this.data && this.data.timestamp;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get syncInfo() {\n    return this.data && this.data.syncInfo;\n  }\n\n  get conversationStore() {\n    return this.data && this.data.conversationStore;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n\n  @getter\n  allConversations = createSelector(\n    () => this.data && this.data.conversationList,\n    () => this.conversationStore,\n    (conversationList = [], conversationStore) =>\n      conversationList.map(\n        (conversationItem) => {\n          const messageList = conversationStore[conversationItem.id] || [];\n          return {\n            ...messageList[0],\n            unreadCounts: messageList.filter(messageHelper.messageIsUnread).length,\n          };\n        }\n      )\n  )\n\n  @getter\n  textConversations = createSelector(\n    () => this.allConversations,\n    conversations =>\n      conversations.filter(\n        conversation => messageHelper.messageIsTextMessage(conversation)\n      )\n  )\n\n  @getter\n  textUnreadCounts = createSelector(\n    () => this.textConversations,\n    conversations =>\n      conversations.reduce((a, b) => a + b.unreadCounts, 0)\n  )\n\n  @getter\n  faxMessages = createSelector(\n    () => this.allConversations,\n    conversations =>\n      conversations.filter(\n        conversation => messageHelper.messageIsFax(conversation)\n      )\n  )\n\n  @getter\n  faxUnreadCounts = createSelector(\n    () => this.faxMessages,\n    conversations =>\n      conversations.reduce((a, b) => a + b.unreadCounts, 0)\n  )\n\n  @getter\n  voicemailMessages = createSelector(\n    () => this.allConversations,\n    conversations =>\n      conversations.filter(\n        conversation => messageHelper.messageIsVoicemail(conversation)\n      )\n  )\n\n  @getter\n  voiceUnreadCounts = createSelector(\n    () => this.voicemailMessages,\n    conversations =>\n      conversations.reduce((a, b) => a + b.unreadCounts, 0)\n  )\n\n  @getter\n  unreadCounts = createSelector(\n    () => this.voiceUnreadCounts,\n    () => this.textUnreadCounts,\n    () => this.faxUnreadCounts,\n    (voiceUnreadCounts, textUnreadCounts, faxUnreadCounts) => {\n      let unreadCounts = 0;\n      if (this._rolesAndPermissions.readTextPermissions) {\n        unreadCounts += textUnreadCounts;\n      }\n      if (this._rolesAndPermissions.voicemailPermissions) {\n        unreadCounts += voiceUnreadCounts;\n      }\n      if (this._rolesAndPermissions.readFaxPermissions) {\n        unreadCounts += faxUnreadCounts;\n      }\n      return unreadCounts;\n    }\n  )\n}\n"]}