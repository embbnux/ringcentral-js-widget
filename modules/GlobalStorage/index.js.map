{"version":3,"sources":["modules/GlobalStorage/index.js"],"names":["GlobalStorage","deps","dep","optional","options","name","storedData","storageKey","prefix","_storage","_StorageProvider","getData","key","_reducers","removeItem","store","dispatch","type","actionTypes","initSuccess","data","_storageHandler","value","ready","sync","on","subscribe","status","moduleStatuses","pending","currentData","setItem","StorageBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;;;;;IAQqBA,a,WAHpB,gBAAO;AACNC,QAAM,CAAC,EAAEC,KAAK,sBAAP,EAA+BC,UAAU,IAAzC,EAAD;AADA,CAAP,C;;;AAIC;;;AAGA,+BAEG;AAAA,QADEC,OACF;AAAA;AAAA;AAECC,YAAM;AAFP,OAGID,OAHJ;AAKF;;;;iCACY;AAAA;;AACX,UAAIE,aAAa,IAAjB;AACA,UAAMC,cACD,KAAKC,MAAL,GAAiB,KAAKA,MAAtB,SAAkC,EADjC,mBAAN;AAEA,WAAKC,QAAL,GAAgB,IAAI,KAAKC,gBAAT,CAA0B;AACxCH;AADwC,OAA1B,CAAhB;AAGAD,mBAAa,KAAKG,QAAL,CAAcE,OAAd,EAAb;AACA,WAAK,IAAMC,GAAX,IAAkBN,UAAlB,EAA8B;AAC5B,YAAI,CAAC,KAAKO,SAAL,CAAeD,GAAf,CAAL,EAA0B;AACxB,iBAAON,WAAWM,GAAX,CAAP;AACA,eAAKH,QAAL,CAAcK,UAAd,CAAyBF,GAAzB;AACD;AACF;AACD,WAAKG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKC,WAAL,CAAiBC,WADL;AAElBZ,8BAFkB;AAGlBa,cAAMd;AAHY,OAApB;AAKA,WAAKe,eAAL,GAAuB,iBAAoB;AAAA,YAAjBT,GAAiB,SAAjBA,GAAiB;AAAA,YAAZU,KAAY,SAAZA,KAAY;;AACzC,YAAI,OAAKC,KAAT,EAAgB;AACdjB,qBAAWM,GAAX,IAAkBU,KAAlB;AACA,iBAAKP,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAM,OAAKC,WAAL,CAAiBM,IADL;AAElBZ,oBAFkB;AAGlBU;AAHkB,WAApB;AAKD;AACF,OATD;AAUA,WAAKb,QAAL,CAAcgB,EAAd,CAAiB,SAAjB,EAA4B,KAAKJ,eAAjC;AACA,WAAKN,KAAL,CAAWW,SAAX,CAAqB,YAAM;AACzB,YAAI,OAAKC,MAAL,KAAgBC,yBAAeC,OAAnC,EAA4C;AAC1C;AACA,cAAMC,cAAc,OAAKV,IAAzB;AACA,eAAK,IAAMR,IAAX,IAAkBkB,WAAlB,EAA+B;AAC7B,gBAAIxB,WAAWM,IAAX,MAAoBkB,YAAYlB,IAAZ,CAAxB,EAA0C;AACxC,qBAAKH,QAAL,CAAcsB,OAAd,CAAsBnB,IAAtB,EAA2BkB,YAAYlB,IAAZ,CAA3B;AACAN,yBAAWM,IAAX,IAAkBkB,YAAYlB,IAAZ,CAAlB;AACD;AACF;AACF;AACF,OAXD;AAYD;;;EAtDwCoB,qB;kBAAtBhC,a","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport StorageBase from '../../lib/StorageBase';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\n/**\n * @class\n * @description Alternative implementation of the Storage class.\n *  Allows registeration of reducers so that persisted states can be computed with reducers.\n */\n@Module({\n  deps: [{ dep: 'GlobalStorageOptions', optional: true }]\n})\nexport default class GlobalStorage extends StorageBase {\n  /**\n   * @constructor\n   */\n  constructor({\n    ...options\n  }) {\n    super({\n      name: 'globalStorage',\n      ...options,\n    });\n  }\n  initialize() {\n    let storedData = null;\n    const storageKey =\n      `${this.prefix ? `${this.prefix}-` : ''}GlobalStorage`;\n    this._storage = new this._StorageProvider({\n      storageKey,\n    });\n    storedData = this._storage.getData();\n    for (const key in storedData) {\n      if (!this._reducers[key]) {\n        delete storedData[key];\n        this._storage.removeItem(key);\n      }\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n      storageKey,\n      data: storedData,\n    });\n    this._storageHandler = ({ key, value }) => {\n      if (this.ready) {\n        storedData[key] = value;\n        this.store.dispatch({\n          type: this.actionTypes.sync,\n          key,\n          value,\n        });\n      }\n    };\n    this._storage.on('storage', this._storageHandler);\n    this.store.subscribe(() => {\n      if (this.status !== moduleStatuses.pending) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n}\n"]}