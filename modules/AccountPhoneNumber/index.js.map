{"version":3,"sources":["modules/AccountPhoneNumber/index.js"],"names":["simplifyPhoneNumber","number","AccountPhoneNumber","deps","dep","optional","client","rolesAndPermissions","options","name","getDataReducer","fetchFunction","account","phoneNumber","list","params","map","readyCheckFn","_rolesAndPermissions","ready","ensureExist","permissions","ReadCompanyPhoneNumbers","DataFetcher","selector","data","numbers","numberMap","forEach","extension","extensionNumber","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AAOA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;;;;AAIA,SAASA,mBAAT,CAA6BC,MAA7B,EAAqC;AACnC,SAAO,yBAAUA,MAAV,CAAP;AACD;;AAED;;;;IAWqBC,kB,WAPpB,gBAAO;AACNC,QAAM,CACJ,QADI,EAEJ,qBAFI,EAGJ,EAAEC,KAAK,2BAAP,EAAoCC,UAAU,IAA9C,EAHI;AADA,CAAP,C;;;AAQC;;;;;AAKA,oCAIG;AAAA;;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,mBAEC,QAFDA,mBAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM,oBAFP;AAGCH,oBAHD;AAICI,gDAJD;AAKCC;AAAA,6FAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmB,yBAAU;AAAA,2BAC1CL,OAAOM,OAAP,GAAiBC,WAAjB,GAA+BC,IAA/B,CAAoCC,MAApC,CAD0C;AAAA,mBAAV,CAAnB;;AAAA;AAAA,gCAEPf,mBAFO;AAAA,iEAEXgB,GAFW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA,SALD;AAQCC,oBAAc;AAAA,eAAM,MAAKC,oBAAL,CAA0BC,KAAhC;AAAA;AARf,OASIX,OATJ;;AAAA;;AAAA;;AAYD,UAAKU,oBAAL,GAAmCE,qBAAP,aAAmBb,mBAAnB,EAAwC,qBAAxC,CAA5B;AAZC;AAaF;;;;wBAyBoB;AACnB,aAAO,CAAC,CAAC,KAAKW,oBAAL,CAA0BG,WAA1B,CAAsCC,uBAA/C;AACD;;;EAlD6CC,qB,2EAyB7CC,kB;;;;;WACS,CACR;AAAA,aAAM,OAAKC,IAAX;AAAA,KADQ,EAER;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAFQ,C;;8FAKTD,kB;;;;;WAC2B,CAC1B;AAAA,aAAM,OAAKE,OAAX;AAAA,KAD0B,EAE1B,UAACA,OAAD,EAAa;AACX,UAAMC,YAAY,EAAlB;AACAD,cAAQE,OAAR,CAAgB,UAAC3B,MAAD,EAAY;AAC1B,YAAIA,OAAO4B,SAAP,IAAoB5B,OAAO4B,SAAP,CAAiBC,eAAzC,EAA0D;AACxD,cAAI,CAACH,UAAU1B,OAAO4B,SAAP,CAAiBC,eAA3B,CAAL,EAAkD;AAChDH,sBAAU1B,OAAO4B,SAAP,CAAiBC,eAA3B,IAA8C,EAA9C;AACD;AACDH,oBAAU1B,OAAO4B,SAAP,CAAiBC,eAA3B,EAA4CC,IAA5C,CAAiD9B,MAAjD;AACD;AACF,OAPD;AAQA,aAAO0B,SAAP;AACD,KAbyB,C;;;kBAhCTzB,kB","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport DataFetcher from '../../lib/DataFetcher';\nimport removeUri from '../../lib/removeUri';\nimport { selector } from '../../lib/selector';\nimport ensureExist from '../../lib/ensureExist';\nimport { getDataReducer } from './getReducer';\n\n/**\n * @typedef ExtensionData\n * @type {object}\n * @property {number} id\n * @property {string} extensionNumber\n */\n\n/**\n * @typedef {Object} SimplePhoneNumber\n * @property {ExtensionData} extension\n * @property {number} id\n * @property {string} location\n * @property {string} paymentType\n * @property {string} phoneNumber\n * @property {string} status\n * @property {string} type\n * @property {string} usageType\n */\n\n/**\n * @typedef {Object} PhoneNumber\n * @property {string} uri\n * @property {number} id\n * @property {string} location\n * @property {string} paymentType\n * @property {string} phoneNumber\n * @property {string} status\n * @property {string} type\n * @property {string} usageType\n */\n\n/**\n * @param {PhoneNumber} number\n * @returns {SimplePhoneNumber}\n */\nfunction simplifyPhoneNumber(number) {\n  return removeUri(number);\n}\n\n/**\n * @class\n * @description Accound phone number module to get account phone number list\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'AccountPhoneNumberOptions', optional: true }\n  ]\n})\nexport default class AccountPhoneNumber extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      name: 'accountPhoneNumber',\n      client,\n      getDataReducer,\n      fetchFunction: async () => (await fetchList(params => (\n        client.account().phoneNumber().list(params)\n      ))).map(simplifyPhoneNumber),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      ...options,\n    });\n\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  @selector\n  numbers = [\n    () => this.data,\n    data => data || [],\n  ]\n\n  @selector\n  extensionToPhoneNumberMap = [\n    () => this.numbers,\n    (numbers) => {\n      const numberMap = {};\n      numbers.forEach((number) => {\n        if (number.extension && number.extension.extensionNumber) {\n          if (!numberMap[number.extension.extensionNumber]) {\n            numberMap[number.extension.extensionNumber] = [];\n          }\n          numberMap[number.extension.extensionNumber].push(number);\n        }\n      });\n      return numberMap;\n    },\n  ]\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadCompanyPhoneNumbers;\n  }\n}\n"]}