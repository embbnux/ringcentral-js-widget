{"version":3,"sources":["modules/ActiveCallControl/helpers.js"],"names":["isHangUp","isReject","normalizeSession","requestURI","confictError","code","callResults","disconnected","direction","callDirections","inbound","activeCallControlStatus","setUp","proceeding","call","activeSessionStatus","telephonySessionId","partyId","from","to","result","telephonyStatus","startTime","sessionId","isOnMute","isOnHold","isOnRecording","formatValue","phoneNumber","fromNumber","fromUserName","name","toNumber","toUserName","id","callStatus","creationTime","isForwarded","isOnFlip","isOnTransfer","isReplied","isToVoicemail","lastHoldingTime","minimized","recordStatus","recording","idle","removed","activeSession","recordingId","prefix","hangUp","reject","hold","unHold","transfer","flip","getPartyData","mute","record","stopRecord","error","conflictErrRgx","conflictMsgRgx","test","message","apiResponse","_text"],"mappings":"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","file":"helpers.js","sourcesContent":["import recordStatus from '../../modules/Webphone/recordStatus';\nimport callResults from '../../enums/callResults';\nimport callDirections from '../../enums/callDirections';\nimport activeCallControlStatus from '../../enums/activeCallControlStatus';\n\n\nexport function isHangUp(code) {\n  return (code === callResults.disconnected);\n}\nexport function isReject({ direction, code }) {\n  return (direction === callDirections.inbound) &&\n    (code === activeCallControlStatus.setUp || code === activeCallControlStatus.proceeding);\n}\nexport function normalizeSession({\n  call,\n  activeSessionStatus = {}\n}) {\n  const {\n    telephonySessionId,\n    partyId,\n    direction,\n    from,\n    to,\n    result,\n    telephonyStatus,\n    startTime,\n    sessionId,\n  } = call;\n  const {\n    isOnMute,\n    isOnHold,\n    isReject,\n    isOnRecording,\n  } = activeSessionStatus;\n  const formatValue = {\n    telephonySessionId,\n    partyId,\n    direction,\n    from: from && from.phoneNumber,\n    fromNumber: from && from.phoneNumber,\n    fromUserName: from && from.name,\n    to: to && to.phoneNumber,\n    toNumber: to && to.phoneNumber,\n    toUserName: to && to.name,\n    id: sessionId,\n    sessionId,\n    callStatus: telephonyStatus || result,\n    startTime,\n    creationTime: startTime,\n    isOnMute,\n    isForwarded: false,\n    isOnFlip: false,\n    isOnHold,\n    isOnTransfer: false,\n    isReplied: false,\n    isToVoicemail: false,\n    lastHoldingTime: 0,\n    minimized: false,\n    recordStatus: isOnRecording ? recordStatus.recording : recordStatus.idle,\n    removed: false,\n    isReject,\n  };\n  return {\n    ...formatValue,\n  };\n}\nexport function requestURI(activeSession) {\n  const {\n    telephonySessionId,\n    partyId,\n    recordingId\n  } = activeSession;\n  const prefix = `/account/~/telephony/sessions/${telephonySessionId}`;\n  return {\n    hangUp: `${prefix}`,\n    reject: `${prefix}/parties/${partyId}/reject`,\n    hold: `${prefix}/parties/${partyId}/hold`,\n    unHold: `${prefix}/parties/${partyId}/unhold`,\n    transfer: `${prefix}/parties/${partyId}/transfer`,\n    flip: `${prefix}/parties/${partyId}/flip`,\n    getPartyData: `${prefix}/parties/${partyId}`,\n    mute: `${prefix}/parties/${partyId}`,\n    record: `${prefix}/parties/${partyId}/recordings`,\n    stopRecord: `${prefix}/parties/${partyId}/recordings/${recordingId}`\n  };\n}\nexport function confictError(error) {\n  const conflictErrRgx = /409/g;\n  const conflictMsgRgx = /Incorrect State/g;\n  return conflictErrRgx.test(error.message) &&\n    conflictMsgRgx.test(error.apiResponse._text);\n}\n"]}