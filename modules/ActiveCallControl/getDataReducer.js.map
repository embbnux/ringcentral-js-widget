{"version":3,"sources":["modules/ActiveCallControl/getDataReducer.js"],"names":["getDataReducer","updateActiveSessionStatus","state","party","sessionId","newState","muted","standAlone","code","status","direction","isOnMute","isOnHold","activeCallControlStatus","hold","isReject","setActiveSessionStatus","obj","getActiveSessionIdReducer","types","type","setActiveSessionId","resetSuccess","removeActiveSession","getRecordingIdsStatusReducer","response","startRecord","recordFail","getActiveSessionsStatusReducer","activeSessionsMap","updateActiveSessions","stopRecord","isOnRecording","mute","unmute","unhold","getTimestampReducer","timestamp","activeSessionId","activeSessionsStatus","recordingIds"],"mappings":"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","file":"getDataReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { isHangUp, isReject } from './helpers';\nimport activeCallControlStatus from '../../enums/activeCallControlStatus';\n\n\nfunction updateActiveSessionStatus({\n  state,\n  party,\n  sessionId\n}) {\n  const newState = { ...state };\n  const {\n    muted,\n    standAlone,\n    status: {\n      code\n    },\n    direction,\n  } = party;\n  if (isHangUp(code) && newState[sessionId]) {\n    delete newState[sessionId];\n  } else {\n    newState[sessionId] = {\n      ...newState[sessionId],\n      standAlone,\n      sessionId,\n      isOnMute: muted,\n      isOnHold: code === activeCallControlStatus.hold,\n      isReject: isReject({ direction, code })\n    };\n  }\n  return newState;\n}\n\nfunction setActiveSessionStatus(state, sessionId, obj) {\n  const newState = { ...state };\n  newState[sessionId] = {\n    ...newState[sessionId],\n    ...obj\n  };\n  return newState;\n}\nfunction getActiveSessionIdReducer(types) {\n  return (state = null, { type, sessionId }) => {\n    switch (type) {\n      case types.setActiveSessionId: {\n        return sessionId;\n      }\n      case types.resetSuccess:\n      case types.removeActiveSession: {\n        return null;\n      }\n      default:\n        return state;\n    }\n  };\n}\nfunction getRecordingIdsStatusReducer(types) {\n  return (state = {}, { type, sessionId, response }) => {\n    switch (type) {\n      case types.startRecord: {\n        const newState = { ...state };\n        newState[sessionId] = {\n          ...response\n        };\n        return newState;\n      }\n      case types.recordFail:\n      case types.removeActiveSession:\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\nfunction getActiveSessionsStatusReducer(types) {\n  return (state = {}, {\n    type, sessionId, party, activeSessionsMap\n  }) => {\n    switch (type) {\n      case types.updateActiveSessions: {\n        let newState = null;\n        for (const sessionId in activeSessionsMap) {\n          if (sessionId) {\n            newState = updateActiveSessionStatus({\n              state,\n              party: activeSessionsMap[sessionId],\n              sessionId\n            });\n          }\n        }\n        return newState;\n      }\n      case types.updateActiveSessionStatus: {\n        return updateActiveSessionStatus({\n          state,\n          party,\n          sessionId\n        });\n      }\n      case types.startRecord:\n      case types.stopRecord: {\n        return setActiveSessionStatus(state, sessionId, { isOnRecording: type === types.startRecord });\n      }\n      case types.mute:\n      case types.unmute: {\n        return setActiveSessionStatus(state, sessionId, { isOnMute: type === types.mute });\n      }\n      case types.hold:\n      case types.unhold: {\n        return setActiveSessionStatus(state, sessionId, { isOnHold: type === types.hold });\n      }\n      case types.removeActiveSession: {\n        const newState = { ...state };\n        if (newState[sessionId]) {\n          delete newState[sessionId];\n        }\n        return newState;\n      }\n      case types.resetSuccess: {\n        return {};\n      }\n      default:\n        return state;\n    }\n  };\n}\nfunction getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.updateActiveSessions:\n        return timestamp;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\nexport default function getDataReducer(types) {\n  return combineReducers({\n    activeSessionId: getActiveSessionIdReducer(types),\n    activeSessionsStatus: getActiveSessionsStatusReducer(types),\n    recordingIds: getRecordingIdsStatusReducer(types),\n    timestamp: getTimestampReducer(types),\n  });\n}\n"]}