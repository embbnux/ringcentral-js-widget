{"version":3,"sources":["modules/ActiveCallControl/index.js"],"names":["DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","telephonySessionsEndPoint","storageKey","subscribeEvent","ActiveCallControl","deps","dep","optional","client","auth","ttl","timeToRetry","storage","subscription","connectivityMonitor","rolesAndPermissions","tabManager","callMonitor","polling","disableCache","alert","numberValidate","accountInfo","options","actionTypes","_client","_storage","_subscription","ensureExist","_connectivityMonitor","_rolesAndPermissions","_callMonitor","_tabManager","_ttl","_timeToRetry","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_alert","_numberValidate","_accountInfo","_reducer","registerReducer","key","reducer","data","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_connectivity","connectivity","_init","initSuccess","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","loggedIn","pending","resetSuccess","active","_fetchData","_syncData","_startPolling","_retry","t","timestamp","Date","now","_clearTimeout","_timeoutId","setTimeout","fetchData","activeSessionsMap","activeSessions","sessionId","getPartyData","result","updateActiveSessions","_hasPermission","_shouldFetch","message","test","event","body","parties","updateActiveSessionStatus","party","removeActiveSession","setActiveSessionId","url","query","service","_platform","send","method","activeSession","mute","patch","muted","warning","callControlError","muteConflictError","generalError","unMuteConflictError","record","post","_response","response","JSON","parse","_text","startRecord","recordFail","recordingId","recordingIds","id","stopRecord","hangUp","delete","_onCallEndFunc","reject","hold","holdConflictError","unHold","unHoldConflictError","transferNumber","transfer","validateNumbers","validatedResult","errors","forEach","error","callErrors","payload","phoneNumber","validPhoneNumber","numbers","e164","indexOf","mainCompanyNumber","join","flipValue","flip","callFlipId","item","get","errRgx","ringoutEnabled","getItem","state","activeSessionId","activeSessionsStatus","status","moduleStatuses","Pollable","getter","calls","accumulator","call","activeSessionStatus","reduce"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport getter from '../../lib/getter';\n\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport callErrors from '../Call/callErrors';\n\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getActiveCallControlReducer from './getActiveCallControlReducer';\nimport getDataReducer from './getDataReducer';\nimport { normalizeSession, requestURI, confictError } from './helpers';\nimport callControlError from './callControlError';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst telephonySessionsEndPoint = /\\/telephony\\/sessions$/;\nconst storageKey = 'activeCallControl';\nconst subscribeEvent = '/account/~/extension/~/telephony/sessions';\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'ConnectivityMonitor',\n    'RolesAndPermissions',\n    'CallMonitor',\n    'Alert',\n    'NumberValidate',\n    'AccountInfo',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'ActiveCallControlOptions', optional: true }\n  ]\n})\nexport default class ActiveCallControl extends Pollable {\n  constructor({\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    storage,\n    subscription,\n    connectivityMonitor,\n    rolesAndPermissions,\n    tabManager,\n    callMonitor,\n    polling = false,\n    disableCache = false,\n    alert,\n    numberValidate,\n    accountInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = this:: ensureExist(subscription, 'subscription');\n    this._connectivityMonitor = this:: ensureExist(connectivityMonitor, 'connectivityMonitor');\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._callMonitor = this:: ensureExist(callMonitor, 'callMonitor');\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = storageKey;\n    this._polling = polling;\n    this._alert = alert;\n    this._numberValidate = numberValidate;\n    this._accountInfo = accountInfo;\n\n    if (this._storage) {\n      this._reducer = getActiveCallControlReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getActiveCallControlReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._connectivity = this._connectivityMonitor.connectivity;\n      await this._init();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      this._connectivityMonitor.ready &&\n      this._callMonitor.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._tabManager && !this._tabManager.ready) ||\n        !this._connectivityMonitor.ready ||\n        !this._callMonitor.ready ||\n        !this._rolesAndPermissions.ready\n      ) &&\n      this.ready\n    );\n  }\n\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.ringoutEnabled;\n  }\n  _shouldFetch() {\n    return (\n      !this._tabManager || this._tabManager.active\n    );\n  }\n  async fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    await this._promise;\n  }\n  async _fetchData() {\n    try {\n      await this._syncData();\n      if (this._polling) {\n        this._startPolling();\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n  _startPolling(t = (this.timestamp + this.ttl + 10) - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this.ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else if (this.timestamp && Date.now() - this.timestamp < this.ttl) {\n        this._startPolling();\n      } else {\n        this._startPolling(this.timeToRetry);\n      }\n    }, t);\n  }\n  async _syncData() {\n    try {\n      const activeSessionsMap = {};\n      for (const sessionId in this.activeSessions) {\n        if (sessionId) {\n          const result = await this.getPartyData(this.activeSessions[sessionId], sessionId);\n          activeSessionsMap[sessionId] = result;\n        }\n      }\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessions,\n        activeSessionsMap,\n        timestamp: Date.now(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async _init() {\n    if (!this._hasPermission) return;\n    if (this._shouldFetch()) {\n      try {\n        await this.fetchData();\n      } catch (e) {\n        this._retry();\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    } else {\n      this._retry();\n    }\n    this._subscription.subscribe(subscribeEvent);\n  }\n\n  _subscriptionHandler() {\n    if (this._storage && this._tabManager && !this._tabManager.active) {\n      return;\n    }\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      telephonySessionsEndPoint.test(message.event) &&\n      message.body\n    ) {\n      this._lastSubscriptionMessage = message;\n      const {\n        sessionId,\n        parties\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.updateActiveSessionStatus,\n        sessionId,\n        party: parties[0]\n      });\n    }\n  }\n  removeActiveSession(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeActiveSession,\n      sessionId\n    });\n  }\n  // count it as load (should only call on container init step)\n  setActiveSessionId(sessionId) {\n    this.store.dispatch({\n      type: this.actionTypes.setActiveSessionId,\n      sessionId,\n    });\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this.fetchData();\n      }\n    }\n  }\n  async patch({ url = null, query = null, body = null }) {\n    try {\n      await this._client.service._platform.send({\n        method: 'PATCH', url, query, body\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async mute(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).mute;\n      await this.patch({\n        url,\n        body: {\n          muted: true\n        }\n      });\n      // this.store.dispatch({\n      //   type: this.actionTypes.mute,\n      //   sessionId,\n      // });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.muteConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async unmute(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).mute;\n      await this.patch({\n        url,\n        body: {\n          muted: false\n        }\n      });\n      // this.store.dispatch({\n      //   type: this.actionTypes.unmute,\n      //   sessionId,\n      // });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unMuteConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async startRecord(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).record;\n      const _response = await this._client.service._platform.post(url);\n      const response = JSON.parse(_response._text);\n      this.store.dispatch({\n        type: this.actionTypes.startRecord,\n        sessionId,\n        response\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.recordFail,\n        sessionId,\n      });\n    }\n  }\n  async stopRecord(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const recordingId = this.recordingIds[sessionId].id;\n      activeSession.recordingId = recordingId;\n      const url = requestURI(activeSession).stopRecord;\n      this.patch({\n        url,\n        body: {\n          active: false\n        }\n      });\n      this.store.dispatch({\n        type: this.actionTypes.stopRecord,\n        sessionId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async hangUp(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).hangUp;\n      await this._client.service._platform.delete(url);\n      if (typeof this._onCallEndFunc === 'function') {\n        this._onCallEndFunc();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.removeActiveSession,\n        sessionId,\n      });\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.generalError\n      });\n    }\n  }\n  async reject(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).reject;\n      await this._client.service._platform.post(url);\n      this.store.dispatch({\n        type: this.actionTypes.removeActiveSession,\n        sessionId,\n      });\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.generalError\n      });\n    }\n  }\n  async hold(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).hold;\n      await this._client.service._platform.post(url);\n      // this.store.dispatch({\n      //   type: this.actionTypes.hold,\n      //   sessionId,\n      // });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.holdConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async unHold(sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).unHold;\n      await this._client.service._platform.post(url);\n      // this.store.dispatch({\n      //   type: this.actionTypes.unhold,\n      //   sessionId,\n      // });\n    } catch (error) {\n      if (confictError(error)) {\n        this._alert.warning({\n          message: callControlError.unHoldConflictError\n        });\n      } else {\n        this._alert.warning({\n          message: callControlError.generalError\n        });\n      }\n    }\n  }\n  async transfer(transferNumber, sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).transfer;\n      const validatedResult = await this._numberValidate.validateNumbers([transferNumber]);\n      if (!validatedResult.result) {\n        validatedResult.errors.forEach((error) => {\n          this._alert.warning({\n            message: callErrors[error.type],\n            payload: {\n              phoneNumber: error.phoneNumber\n            }\n          });\n        });\n        return;\n      }\n      const validPhoneNumber = validatedResult.numbers[0] && validatedResult.numbers[0].e164;\n      let phoneNumber = validPhoneNumber;\n      if (validPhoneNumber.indexOf('+') === -1) {\n        phoneNumber = [this._accountInfo.mainCompanyNumber, validPhoneNumber].join('*');\n      }\n      await this._client.service._platform.post(url, {\n        phoneNumber\n      });\n    } catch (error) {\n      this._alert.warning({\n        message: callControlError.generalError\n      });\n    }\n  }\n\n  async flip(flipValue, sessionId) {\n    try {\n      const activeSession = this.activeSessions[sessionId];\n      const url = requestURI(activeSession).flip;\n      await this._client.service._platform.post(url, {\n        callFlipId: flipValue\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  async forward() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n  async getCallSessionStatus() {\n    // No implement at the moment\n    // Need to check the API document\n  }\n  async getPartyData(item, sessionId) {\n    const url = requestURI(item).getPartyData;\n    try {\n      const _response = await this._client.service._platform.get(url);\n      const response = JSON.parse(_response._text);\n      return response;\n    } catch (error) {\n      const errRgx = /4[0-9][0-9]/g;\n      if (errRgx.test(error.message)) {\n        this.removeActiveSession(sessionId);\n      }\n      throw error;\n    }\n  }\n  get data() {\n    return (this._storage && this._storage.ready && this._storage.getItem(this._storageKey)) ||\n      this.state;\n  }\n  get activeSessionId() {\n    return this.data.activeSessionId || null;\n  }\n  get recordingIds() {\n    return this.data.recordingIds || null;\n  }\n  get activeSessionsStatus() {\n    return this.data.activeSessionsStatus || {};\n  }\n  get timestamp() {\n    return this.data.timestamp;\n  }\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n  get ttl() {\n    return this._ttl;\n  }\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n  @getter\n  recordingId = createSelector(\n    () => this.activeSessionId,\n    () => this.recordingIds,\n    (activeSessionId, recordingIds) => recordingIds[activeSessionId]\n  );\n  @getter\n  activeSession = createSelector(\n    () => this.activeSessionId,\n    () => this.activeSessions,\n    (activeSessionId, activeSessions) => activeSessions[activeSessionId]\n  );\n\n  @getter\n  activeSessions = createSelector(\n    () => this._callMonitor.calls,\n    () => this.activeSessionsStatus,\n    (calls, activeSessionsStatus) => {\n      const reducer = (accumulator, call) => {\n        const {\n          sessionId\n        } = call;\n        const activeSessionStatus = activeSessionsStatus[sessionId];\n        accumulator[sessionId] = normalizeSession({\n          call,\n          activeSessionStatus\n        });\n        return accumulator;\n      };\n      return calls.reduce(reducer, {});\n    }\n  );\n}\n"]}