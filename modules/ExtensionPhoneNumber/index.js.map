{"version":3,"sources":["modules/ExtensionPhoneNumber/index.js"],"names":["ExtensionPhoneNumber","deps","dep","optional","client","rolesAndPermissions","options","name","fetchFunction","account","extension","phoneNumber","list","params","number","country","map","readyCheckFn","_rolesAndPermissions","ready","cleanOnReset","ensureExist","permissions","ReadUserPhoneNumbers","DataFetcher","getter","data","numbers","phoneNumbers","filter","p","usageType","find","features","indexOf","status"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { createSelector } from 'reselect';\n\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport removeUri from '../../lib/removeUri';\nimport DataFetcher from '../../lib/DataFetcher';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\n\n/**\n * @class\n * @description Extension phone number list module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'ExtensionPhoneNumberOptions', optional: true }\n  ]\n})\nexport default class ExtensionPhoneNumber extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      name: 'extensionPhoneNumber',\n      client,\n      fetchFunction: async () => (await fetchList(params => (\n        client.account().extension().phoneNumber().list(params)\n      ))).map(number => ({\n        ...number,\n        country: removeUri(number.country),\n      })),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      cleanOnReset: true,\n      ...options,\n    });\n\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  @getter\n  numbers = createSelector(\n    () => this.data,\n    data => data || [],\n  )\n\n  @getter\n  companyNumbers = createSelector(\n    () => this.numbers,\n    phoneNumbers => phoneNumbers.filter(p => p.usageType === 'CompanyNumber'),\n  )\n\n  @getter\n  mainCompanyNumber = createSelector(\n    () => this.numbers,\n    phoneNumbers => phoneNumbers.find(p => p.usageType === 'MainCompanyNumber'),\n  )\n\n  @getter\n  directNumbers = createSelector(\n    () => this.numbers,\n    phoneNumbers => phoneNumbers.filter(p => p.usageType === 'DirectNumber'),\n  )\n\n  @getter\n  callerIdNumbers = createSelector(\n    () => this.numbers,\n    phoneNumbers => phoneNumbers.filter(p => (\n      (p.features && p.features.indexOf('CallerId') !== -1) ||\n      (p.usageType === 'ForwardedNumber' && p.status === 'PortedIn')\n    )),\n  )\n\n  @getter\n  smsSenderNumbers = createSelector(\n    () => this.numbers,\n    phoneNumbers =>\n      phoneNumbers.filter(\n        p => (p.features && p.features.indexOf('SmsSender') !== -1)\n      ),\n  )\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadUserPhoneNumbers;\n  }\n}\n"]}