{"version":3,"sources":["modules/GlipPersons/getReducer.js"],"names":["getGlipPersonsStatusReducer","getGlipPersonStoreReducer","getGlipPostsReducer","types","state","status","idle","type","fetch","fetching","fetchError","fetchSuccess","batchFetchSuccess","person","persons","newState","id","forEach","p","cleanUp","resetSuccess","reducers","glipPostsStatus"],"mappings":";;;;;;;;;;QAIgBA,2B,GAAAA,2B;QAeAC,yB,GAAAA,yB;kBA+BQC,mB;;AAlDxB;;AACA;;;;AACA;;;;;;AAEO,SAASF,2BAAT,CAAqCG,KAArC,EAA4C;AACjD,SAAO,YAAmC;AAAA,QAAlCC,KAAkC,uEAA1BC,iBAAOC,IAAmB;AAAA;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AACxC,YAAQA,IAAR;AACE,WAAKJ,MAAMK,KAAX;AACE,eAAOH,iBAAOI,QAAd;AACF,WAAKN,MAAMO,UAAX;AACA,WAAKP,MAAMQ,YAAX;AACA,WAAKR,MAAMS,iBAAX;AACE,eAAOP,iBAAOC,IAAd;AACF;AACE,eAAOF,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEM,SAASH,yBAAT,CAAmCE,KAAnC,EAA0C;AAC/C,SAAO,YAED;AAAA,QAFEC,KAEF,uEAFU,EAEV;AAAA;AAAA,QADJG,IACI,SADJA,IACI;AAAA,QADEM,MACF,SADEA,MACF;AAAA,QADUC,OACV,SADUA,OACV;;AACJ,QAAIC,iBAAJ;AACA,YAAQR,IAAR;AACE,WAAKJ,MAAMQ,YAAX;AACEI,8CACKX,KADL;AAGAW,iBAASF,OAAOG,EAAhB,IAAsBH,MAAtB;AACA,eAAOE,QAAP;AACF,WAAKZ,MAAMS,iBAAX;AACEG,8CACKX,KADL;AAGAU,gBAAQG,OAAR,CAAgB,UAACC,CAAD,EAAO;AACrB,cAAIA,EAAEF,EAAN,EAAU;AACRD,qBAASG,EAAEF,EAAX,IAAiBE,CAAjB;AACD;AACF,SAJD;AAKA,eAAOH,QAAP;AACF,WAAKZ,MAAMgB,OAAX;AACA,WAAKhB,MAAMiB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOhB,KAAP;AArBJ;AAuBD,GA3BD;AA4BD;;AAEc,SAASF,mBAAT,CAA6BC,KAA7B,EAAmD;AAAA,MAAfkB,QAAe,uEAAJ,EAAI;;AAChE,SAAO,uDACFA,QADE;AAELhB,YAAQ,sCAAuBF,KAAvB,CAFH;AAGLmB,qBAAiBtB,4BAA4BG,KAA5B;AAHZ,KAAP;AAKD","file":"getReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport status from './status';\n\nexport function getGlipPersonsStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetch:\n        return status.fetching;\n      case types.fetchError:\n      case types.fetchSuccess:\n      case types.batchFetchSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPersonStoreReducer(types) {\n  return (state = {}, {\n    type, person, persons\n  }) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[person.id] = person;\n        return newState;\n      case types.batchFetchSuccess:\n        newState = {\n          ...state,\n        };\n        persons.forEach((p) => {\n          if (p.id) {\n            newState[p.id] = p;\n          }\n        });\n        return newState;\n      case types.cleanUp:\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getGlipPostsReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    glipPostsStatus: getGlipPersonsStatusReducer(types),\n  });\n}\n"]}