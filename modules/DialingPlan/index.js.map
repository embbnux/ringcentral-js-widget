{"version":3,"sources":["modules/DialingPlan/index.js"],"names":["DialingPlan","deps","dep","optional","client","rolesAndPermissions","options","name","polling","fetchFunction","params","platform","service","get","response","json","id","p","isoCode","callingCode","map","readyCheckFn","_rolesAndPermissions","ready","ensureExist","_selectors","plans","state","status","moduleStatuses","permissions","ReadCompanyInfo","DataFetcher","getter","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAWqBA,W,WAPpB,gBAAO;AACNC,QAAM,CACJ,QADI,EAEJ,qBAFI,EAGJ,EAAEC,KAAK,oBAAP,EAA6BC,UAAU,IAAvC,EAHI;AADA,CAAP,C;;;AAQC;;;;;AAKA,6BAIG;AAAA;;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,mBAEC,QAFDA,mBAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM,aAFP;AAGCH,oBAHD;AAICI,eAAS,IAJV;AAKCC;AAAA,6FAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmB;AAAA,yGAAU,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCC,sCADoC,GACzBP,OAAOQ,OAAP,CAAeD,QAAf,EADyB;AAAA;AAAA,qCAEnBA,SAASE,GAAT,CAAa,yBAAb,EAAwCH,MAAxC,CAFmB;;AAAA;AAEpCI,sCAFoC;AAAA,+DAGnCA,SAASC,IAAT,EAHmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAV;;AAAA;AAAA;AAAA;AAAA,sBAAnB;;AAAA;AAAA,iCAIP;AAAA,2BAAM;AACZC,0BAAIC,EAAED,EADM;AAEZE,+BAASD,EAAEC,OAFC;AAGZC,mCAAaF,EAAEE;AAHH,qBAAN;AAAA,mBAJO;;AAAA,mEAIXC,GAJW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA,SALD;AAcCC,oBAAc;AAAA,eAAM,MAAKC,oBAAL,CAA0BC,KAAhC;AAAA;AAdf,OAeIjB,OAfJ;;AAAA;;AAkBD,UAAKgB,oBAAL,GAAkCE,qBAAN,aAAkBnB,mBAAlB,EAAuC,qBAAvC,CAA5B;AAlBC;AAmBF;;;;wBAQW;AACV,aAAO,KAAKoB,UAAL,CAAgBC,KAAhB,EAAP;AACD;;;wBAEY;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsBC,yBAAeN,KAA5C;AACD;;;wBAEoB;AACnB,aAAO,CAAC,CAAC,KAAKD,oBAAL,CAA0BQ,WAA1B,CAAsCC,eAA/C;AACD;;;EAnDsCC,qB,yEA+BtCC,gB;;;;;WACO,8BACN;AAAA,aAAM,OAAKC,IAAX;AAAA,KADM,EAEN;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAFM,C;;;kBAhCWlC,W","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport DataFetcher from '../../lib/DataFetcher';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\n\n/**\n * @class\n * @description Dial plan list managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'DialingPlanOptions', optional: true }\n  ]\n})\nexport default class DialingPlan extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      name: 'dialingPlan',\n      client,\n      polling: true,\n      fetchFunction: async () => (await fetchList(async (params) => {\n        const platform = client.service.platform();\n        const response = await platform.get('/account/~/dialing-plan', params);\n        return response.json();\n      })).map(p => ({\n        id: p.id,\n        isoCode: p.isoCode,\n        callingCode: p.callingCode,\n      })),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      ...options,\n    });\n\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  @getter\n  plans = createSelector(\n    () => this.data,\n    data => data || [],\n  )\n\n  get plans() {\n    return this._selectors.plans();\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadCompanyInfo;\n  }\n}\n\n"]}