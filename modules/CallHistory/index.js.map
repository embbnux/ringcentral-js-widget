{"version":3,"sources":["modules/CallHistory/index.js"],"names":["CallHistory","deps","dep","optional","accountInfo","callLog","callMonitor","locale","storage","activityMatcher","contactMatcher","tabManager","options","_accountInfo","ensureExist","_callLog","_storage","_activityMatcher","_contactMatcher","_callMonitor","_tabManager","_locale","_debouncedSearch","callsSearch","_reducer","actionTypes","_endedCallsStorageKey","registerReducer","key","reducer","endedCalls","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_processCallHistory","pending","_lastProcessedNumbers","active","_lastProcessedIds","monitorCalls","calls","callLogCalls","_lastProcessedMonitorCalls","filter","find","call","sessionId","currentCall","currentCalls","_lastProcessedCalls","ids","forEach","recentlyEndedCalls","_shouldTriggerContactMatch","triggerMatch","_shouldTriggerActivityMatch","_getEndedCalls","length","_addEndedCalls","shouldRemove","_shouldRemoveEndedCalls","_removeEndedCalls","dispatch","type","init","initSuccess","reset","resetSuccess","map","result","addEndedCalls","timestamp","Date","now","sync","removeEndedCalls","clickToSMS","clickToCall","input","updateSearchInput","args","apply","searchInput","data","effectSearchStr","toLowerCase","trim","phoneNumber","matches","matchesMatched","some","entities","id","name","indexOf","phone","sort","sortByStartTime","filterSuccess","state","status","moduleStatuses","filterCalls","getItem","RcModule","proxify","selector","countryCode","callFrom","from","callTo","to","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromNumber","extensionNumber","toNumber","fromMatches","toMatches","activityMatches","matched","toNumberEntity","filteredEndedCalls","newCalls","output","numberMap","addIfNotExist","number","push","addNumbersFromCall","concat"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport { sortByStartTime, getPhoneNumberMatches } from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getCallHistoryReducer, { getEndedCallsReducer } from './getCallHistoryReducer';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport debounce from '../../lib/debounce';\nimport { selector } from '../../lib/selector';\n\n// const DEBOUNDCE_THRESHOLD = 800;\n// const DEBOUNDCE_IMMEDIATE = false;\n\n/**\n * @class\n * @description Call history managing module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'CallLog',\n    'CallMonitor',\n    'Locale',\n    { dep: 'Storage', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'CallHistoryOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n  ]\n})\nexport default class CallHistory extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {CallLog} params.callLog - callLog module instance\n   * @param {CallMonitor} params.callMonitor - callMonitor module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   */\n  constructor({\n    accountInfo,\n    callLog,\n    callMonitor,\n    locale,\n    storage,\n    activityMatcher,\n    contactMatcher,\n    tabManager,\n    // debThreshold,\n    // debImmediate,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._accountInfo = this:: ensureExist(accountInfo, 'accountInfo');\n    this._callLog = this:: ensureExist(callLog, 'callLog');\n    this._storage = storage;\n    this._activityMatcher = activityMatcher;\n    this._contactMatcher = contactMatcher;\n    this._callMonitor = callMonitor;\n    this._tabManager = tabManager;\n    this._locale = locale;\n    this._debouncedSearch = debounce(this.callsSearch, 230, false)\n\n    if (this._storage) {\n      this._reducer = getCallHistoryReducer(this.actionTypes);\n      this._endedCallsStorageKey = 'callHistoryEndedCalls';\n      this._storage.registerReducer({\n        key: this._endedCallsStorageKey,\n        reducer: getEndedCallsReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getCallHistoryReducer(this.actionTypes, {\n        endedCalls: getEndedCallsReducer(this.actionTypes),\n      });\n    }\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          (!this._tabManager || this._tabManager.ready) &&\n          this._callLog.ready &&\n          this._accountInfo.ready\n        ),\n      });\n    }\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          (!this._tabManager || this._tabManager.ready) &&\n          this._callLog.ready\n        ),\n      });\n    }\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._processCallHistory();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._callLog.ready &&\n      (!this._callMonitor || this._callMonitor.ready) &&\n      this._accountInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._callLog.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        !this._accountInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldTriggerContactMatch(uniqueNumbers) {\n    if (\n      this._lastProcessedNumbers !== uniqueNumbers &&\n      (!this._tabManager || this._tabManager.active)\n    ) {\n      this._lastProcessedNumbers = uniqueNumbers;\n      if (this._contactMatcher && this._contactMatcher.ready) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _shouldTriggerActivityMatch(sessionIds) {\n    if (\n      this._lastProcessedIds !== sessionIds &&\n      (!this._tabManager || this._tabManager.active)\n    ) {\n      this._lastProcessedIds = sessionIds;\n      if (this._activityMatcher && this._activityMatcher.ready) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _getEndedCalls() {\n    if (this._callMonitor) {\n      const monitorCalls = this._callMonitor.calls;\n      const callLogCalls = this._callLog.calls;\n      if (this._lastProcessedMonitorCalls !== monitorCalls) {\n        const endedCalls = (this._lastProcessedMonitorCalls || [])\n          .filter(call => (\n            !monitorCalls.find(currentCall => call.sessionId === currentCall.sessionId) &&\n            // if the call's callLog has been fetch, skip\n            !callLogCalls.find(currentCall => call.sessionId === currentCall.sessionId)\n          ));\n        this._lastProcessedMonitorCalls = monitorCalls;\n        return endedCalls;\n      }\n    }\n    return null;\n  }\n\n  _shouldRemoveEndedCalls() {\n    const currentCalls = this._callLog.calls;\n    if (currentCalls !== this._lastProcessedCalls) {\n      this._lastProcessedCalls = currentCalls;\n      const ids = {};\n      currentCalls.forEach((call) => {\n        ids[call.sessionId] = true;\n      });\n      return this.recentlyEndedCalls.filter(call => ids[call.sessionId]);\n    }\n    return null;\n  }\n\n  _processCallHistory() {\n    const uniqueNumbers = this.uniqueNumbers;\n    if (this._shouldTriggerContactMatch(uniqueNumbers)) {\n      this._contactMatcher.triggerMatch();\n    }\n    const sessionIds = this.sessionIds;\n    if (this._shouldTriggerActivityMatch(sessionIds)) {\n      this._activityMatcher.triggerMatch();\n    }\n\n    const endedCalls = this._getEndedCalls();\n    if (endedCalls && endedCalls.length) {\n      this._addEndedCalls(endedCalls);\n    }\n\n    const shouldRemove = this._shouldRemoveEndedCalls();\n    if (shouldRemove && shouldRemove.length) {\n      this._removeEndedCalls(shouldRemove);\n    }\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n    this._lastProcessedMonitorCalls = null;\n    this._lastProcessedNumbers = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _addEndedCalls(endedCalls) {\n    endedCalls.map((call) => {\n      call.result = 'Disconnected';\n      return call;\n    });\n    this.store.dispatch({\n      type: this.actionTypes.addEndedCalls,\n      endedCalls,\n      timestamp: Date.now(),\n    });\n    this._callLog.sync();\n  }\n\n  _removeEndedCalls(endedCalls) {\n    this.store.dispatch({\n      type: this.actionTypes.removeEndedCalls,\n      endedCalls,\n    });\n  }\n\n  // for track click to sms in call history\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n  // for track click to call in call history\n  @proxify\n  onClickToCall() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n    });\n  }\n\n  @proxify\n  updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  @selector\n  normalizedCalls = [\n    () => this._callLog.calls,\n    () => this._accountInfo.countryCode,\n    (calls, countryCode) => (\n      calls.map((call) => {\n        const callFrom = {\n          ...call.from,\n        };\n        if (callFrom.phoneNumber) {\n          callFrom.phoneNumber = normalizeNumber({\n            phoneNumber: callFrom.phoneNumber,\n            countryCode,\n          });\n        }\n        const callTo = {\n          ...call.to,\n        };\n        if (callTo.phoneNumber) {\n          callTo.phoneNumber = normalizeNumber({\n            phoneNumber: callTo.phoneNumber,\n            countryCode,\n          });\n        }\n        return {\n          ...call,\n          from: callFrom,\n          to: callTo,\n        };\n      }).sort(sortByStartTime)\n    ),\n  ]\n\n  @selector\n  calls = [\n    () => this.normalizedCalls,\n    () => this.recentlyEndedCalls,\n    () => (this._contactMatcher && this._contactMatcher.dataMapping),\n    () => (this._activityMatcher && this._activityMatcher.dataMapping),\n    () => (this._callMonitor && this._callMonitor.callMatched),\n    (\n      normalizedCalls,\n      endedCalls,\n      contactMapping = {},\n      activityMapping = {},\n      callMatched = {}\n    ) => {\n      const sessionIds = {};\n      const calls = normalizedCalls.map((call) => {\n        sessionIds[call.sessionId] = true;\n        const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n        const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        const activityMatches = (activityMapping[call.sessionId]) || [];\n        const matched = callMatched[call.sessionId];\n        return {\n          ...call,\n          fromMatches,\n          toMatches,\n          activityMatches,\n          toNumberEntity: matched,\n        };\n      });\n      const filteredEndedCalls = endedCalls\n        .filter(call => !sessionIds[call.sessionId])\n        .map((call) => {\n          const activityMatches = (activityMapping[call.sessionId]) || [];\n          const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n          const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          return {\n            ...call,\n            activityMatches,\n            fromMatches,\n            toMatches,\n          };\n        });\n      return [\n        ...filteredEndedCalls,\n        ...calls\n      ].sort(sortByStartTime);\n    }\n  ]\n\n  @proxify\n  debouncedSearch(...args) {\n    this._debouncedSearch.apply(this, args);\n  }\n\n  @proxify\n  callsSearch() {\n    if (this.searchInput === '') {\n      return;\n    }\n    const calls = this.calls;\n    const searchInput = this.searchInput;\n    let data = [];\n    const effectSearchStr = searchInput.toLowerCase().trim();\n\n    data = calls.filter((call) => {\n      const { phoneNumber, matches } = getPhoneNumberMatches(call);\n      const matchesMatched = matches.some((entities) => {\n        if (!entities || !entities.id) return false;\n        if (entities.name && entities.name.toLowerCase().indexOf(effectSearchStr) > -1) return true;\n        if (entities.phone && entities.phone.indexOf(effectSearchStr) > -1) return true;\n        return false;\n      });\n\n      if (matchesMatched) {\n        return true;\n      }\n      if (phoneNumber && phoneNumber.indexOf(effectSearchStr) > -1) {\n        return true;\n      }\n      return false;\n    }).sort(sortByStartTime);\n\n    this.store.dispatch({\n      type: this.actionTypes.filterSuccess,\n      data\n    });\n  }\n\n  @selector\n  latestCalls = [\n    () => this.filterCalls,\n    () => this._activityMatcher && this._activityMatcher.dataMapping,\n    (calls, dataMapping) => {\n      if (dataMapping) {\n        const newCalls = calls.map(call => ({\n          ...call,\n          activityMatches: dataMapping[call.sessionId] || []\n        }));\n        return newCalls;\n      }\n      return calls;\n    },\n  ]\n\n\n  @selector\n  uniqueNumbers = [\n    () => this.normalizedCalls,\n    () => this.recentlyEndedCalls,\n    (normalizedCalls, endedCalls) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(number) {\n        if (!numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      function addNumbersFromCall(call) {\n        if (call.from && call.from.phoneNumber) {\n          addIfNotExist(call.from.phoneNumber);\n        } else if (call.from && call.from.extensionNumber) {\n          addIfNotExist(call.from.extensionNumber);\n        }\n        if (call.to && call.to.phoneNumber) {\n          addIfNotExist(call.to.phoneNumber);\n        } else if (call.to && call.to.extensionNumber) {\n          addIfNotExist(call.to.extensionNumber);\n        }\n      }\n      normalizedCalls.forEach(addNumbersFromCall);\n      endedCalls.forEach(addNumbersFromCall);\n      return output;\n    },\n  ]\n\n  @selector\n  sessionIds = [\n    () => this._callLog.calls,\n    () => this.recentlyEndedCalls,\n    (calls, endedCalls) => {\n      const sessionIds = {};\n      return calls.map((call) => {\n        sessionIds[call.sessionId] = true;\n        return call.sessionId;\n      }).concat(\n        endedCalls\n          .filter(call => !sessionIds[call.sessionId])\n          .map(call => call.sessionId)\n      );\n    },\n  ]\n\n  get filterCalls() {\n    if (this.searchInput === '') {\n      return this.calls;\n    }\n    return this.state.filterCalls;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get recentlyEndedCalls() {\n    if (this._storage) {\n      return this._storage.getItem(this._endedCallsStorageKey);\n    }\n    return this.state.endedCalls;\n  }\n}\n"]}