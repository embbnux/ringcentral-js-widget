{"version":3,"sources":["modules/CallHistory/getCallHistoryReducer.js"],"names":["getEndedCallsReducer","getSearchInputReducer","getCallsFilterReducer","getCallHistoryReducer","DEFAULT_CLEAN_TIME","types","state","type","endedCalls","timestamp","addEndedCalls","newState","slice","call","callWithDuration","duration","Math","floor","startTime","idx","item","sessionId","push","removeEndedCalls","filter","find","shouldRemove","Date","getTime","resetSuccess","input","updateSearchInput","data","filterSuccess","reducers","searchInput","filterCalls","status"],"mappings":";;;;;;;;;;QAMgBA,oB,GAAAA,oB;QAmCAC,qB,GAAAA,qB;QAaAC,qB,GAAAA,qB;kBAYQC,qB;;AAlExB;;AACA;;AACA;;;;;;AAEA,IAAMC,qBAAqB,KAAK,EAAL,GAAU,EAAV,GAAe,IAA1C,C,CAAgD;;AAEzC,SAASJ,oBAAT,CAA8BK,KAA9B,EAAqC;AAC1C,SAAO,YAAiD;AAAA,QAAhDC,KAAgD,uEAAxC,EAAwC;AAAA;AAAA,QAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,QAA5BC,UAA4B,QAA5BA,UAA4B;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AACtD,YAAQF,IAAR;AACE,WAAKF,MAAMK,aAAX;AAA0B;AACxB,cAAMC,WAAWL,MAAMM,KAAN,EAAjB;AACA,8BAAQ,UAACC,IAAD,EAAU;AAChB,gBAAMC,8CACDD,IADC;AAEJE,wBAAUC,KAAKC,KAAL,CAAW,CAACR,YAAYI,KAAKK,SAAlB,IAA+B,IAA1C;AAFN,cAAN;AAIA,gBAAMC,MAAM,sBAAU;AAAA,qBAAQC,KAAKC,SAAL,KAAmBR,KAAKQ,SAAhC;AAAA,aAAV,EAAqDV,QAArD,CAAZ;AACA,gBAAIQ,MAAM,CAAC,CAAX,EAAc;AACZ;AACAR,uBAASQ,GAAT,IAAgBL,gBAAhB;AACD,aAHD,MAGO;AACLH,uBAASW,IAAT,CAAcR,gBAAd;AACD;AACF,WAZD,EAYGN,UAZH;AAaA,iBAAOG,QAAP;AACD;AACD,WAAKN,MAAMkB,gBAAX;AACE,eAAOjB,MAAMkB,MAAN,CAAa;AAAA,iBAClB,CAAChB,WAAWiB,IAAX,CAAgB;AAAA,mBAAgBC,aAAaL,SAAb,KAA2BR,KAAKQ,SAAhD;AAAA,WAAhB,CAAD;AACE;AACC,cAAIM,IAAJ,EAAD,CAAaC,OAAb,KAAyBf,KAAKK,SAA9B,GAA0Cd,kBAH1B;AAAA,SAAb,CAAP;AAMF,WAAKC,MAAMwB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOvB,KAAP;AA5BJ;AA8BD,GA/BD;AAgCD;;AAEM,SAASL,qBAAT,CAA+BI,KAA/B,EAAsC;AAC3C,SAAO,YAAsC;AAAA,QAArCC,KAAqC,uEAA7B,EAA6B;AAAA;AAAA,QAAvBC,IAAuB,SAAvBA,IAAuB;AAAA,4BAAjBuB,KAAiB;AAAA,QAAjBA,KAAiB,+BAAT,EAAS;;AAC3C,YAAQvB,IAAR;AACE,WAAKF,MAAM0B,iBAAX;AACE,eAAOD,KAAP;AACF,WAAKzB,MAAMwB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOvB,KAAP;AANJ;AAQD,GATD;AAUD;;AAEM,SAASJ,qBAAT,CAA+BG,KAA/B,EAAsC;AAC3C,SAAO,YAAqC;AAAA,QAApCC,KAAoC,uEAA5B,EAA4B;AAAA;AAAA,QAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,2BAAhByB,IAAgB;AAAA,QAAhBA,IAAgB,8BAAT,EAAS;;AAC1C,YAAQzB,IAAR;AACE,WAAKF,MAAM4B,aAAX;AACE,eAAOD,IAAP;AACF;AACE,eAAO1B,KAAP;AAJJ;AAMD,GAPD;AAQD;;AAED;AACe,SAASH,qBAAT,CAA+BE,KAA/B,EAAsC6B,QAAtC,EAAgD;AAC7D,SAAO,uDACFA,QADE;AAELC,iBAAalC,sBAAsBI,KAAtB,CAFR;AAGL+B,iBAAalC,sBAAsBG,KAAtB,CAHR;AAILgC,YAAQ,sCAAuBhC,KAAvB;AAJH,KAAP;AAMD","file":"getCallHistoryReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { forEach, findIndex } from 'ramda';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nconst DEFAULT_CLEAN_TIME = 24 * 60 * 60 * 1000; // 1day\n\nexport function getEndedCallsReducer(types) {\n  return (state = [], { type, endedCalls, timestamp }) => {\n    switch (type) {\n      case types.addEndedCalls: {\n        const newState = state.slice();\n        forEach((call) => {\n          const callWithDuration = {\n            ...call,\n            duration: Math.floor((timestamp - call.startTime) / 1000),\n          };\n          const idx = findIndex(item => item.sessionId === call.sessionId, newState);\n          if (idx > -1) {\n            // replace old one if found\n            newState[idx] = callWithDuration;\n          } else {\n            newState.push(callWithDuration);\n          }\n        }, endedCalls);\n        return newState;\n      }\n      case types.removeEndedCalls:\n        return state.filter(call => (\n          !endedCalls.find(shouldRemove => shouldRemove.sessionId === call.sessionId) || (\n            // clean current overdue ended call (default clean time: 1day).\n            (new Date()).getTime() - call.startTime > DEFAULT_CLEAN_TIME\n          )\n        ));\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSearchInputReducer(types) {\n  return (state = '', { type, input = '' }) => {\n    switch (type) {\n      case types.updateSearchInput:\n        return input;\n      case types.resetSuccess:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCallsFilterReducer(types) {\n  return (state = [], { type, data = [] }) => {\n    switch (type) {\n      case types.filterSuccess:\n        return data;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallHistoryReducer(types, reducers) {\n  return combineReducers({\n    ...reducers,\n    searchInput: getSearchInputReducer(types),\n    filterCalls: getCallsFilterReducer(types),\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}