{"version":3,"sources":["modules/Conversations/getReducer.js"],"names":["getSearchInputReducer","getTypeFilterReducer","getOldConversationsReducer","getFetchConversationsStatusReducer","getCurrentPageReducer","getCurrentConversationIdReducer","getOldMessagesReducer","getFetchMessagesStatusReducer","getMessageTextsReducer","getConversationStatusReducer","getCorrespondentMatch","getCorrespondentResponse","getReducer","types","state","type","input","updateSearchInput","resetSuccess","messageTypes","all","typeFilter","updateTypeFilter","records","conversationId","fetchOldConverstaionsSuccess","concat","map","normalizeRecord","deleteConversation","filter","c","cleanOldConversatioans","initSuccess","status","idle","fetchOldConverstaions","fetching","fetchOldConverstaionsError","isIncreaseCurrentPage","increaseCurrentPage","resetCurrentPage","updateCurrentConversationId","fetchOldMessagesSuccess","fetchOldMessages","fetchOldMessagesError","text","updateMessageText","msg","removeMessageText","reply","pushing","replySuccess","replyError","entitys","entity","addEntity","newState","removeEntity","filteredState","item","rawId","id","responses","phoneNumber","addResponses","formatResponses","reduce","accumulator","response","to","from","direction","conversation","number","extensionNumber","removeResponse","searchInput","oldConversations","currentPage","fetchConversationsStatus","currentConversationId","oldMessages","fetchMessagesStatus","messageTexts","conversationStatus","correspondentMatch","correspondentResponse"],"mappings":"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","file":"getReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nimport messageTypes from '../../enums/messageTypes';\nimport { normalizeRecord } from '../../lib/messageHelper';\nimport status from './status';\n\nexport function getSearchInputReducer(types) {\n  return (state = '', { type, input = '' }) => {\n    switch (type) {\n      case types.updateSearchInput:\n        return input;\n      case types.resetSuccess:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTypeFilterReducer(types) {\n  return (state = messageTypes.all, { type, typeFilter }) => {\n    switch (type) {\n      case types.updateTypeFilter:\n        return typeFilter;\n      case types.resetSuccess:\n        return messageTypes.all;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getOldConversationsReducer(types) {\n  return (state = [], { type, records, conversationId }) => {\n    switch (type) {\n      case types.fetchOldConverstaionsSuccess:\n        return [].concat(state).concat(records.map(normalizeRecord));\n      case types.deleteConversation:\n        return state.filter(c => c.conversationId !== conversationId);\n      case types.cleanOldConversatioans:\n      case types.resetSuccess:\n      case types.updateTypeFilter:\n      case types.initSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getFetchConversationsStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetchOldConverstaions:\n        return status.fetching;\n      case types.fetchOldConverstaionsSuccess:\n      case types.fetchOldConverstaionsError:\n      case types.resetSuccess:\n      case types.updateTypeFilter:\n      case types.initSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCurrentPageReducer(types) {\n  return (state = 1, { type, isIncreaseCurrentPage }) => {\n    switch (type) {\n      case types.increaseCurrentPage:\n        return state + 1;\n      case types.fetchOldConverstaionsSuccess:\n        return isIncreaseCurrentPage ? state + 1 : state;\n      case types.updateTypeFilter:\n      case types.resetSuccess:\n      case types.initSuccess:\n      case types.resetCurrentPage:\n        return 1;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getCurrentConversationIdReducer(types) {\n  return (state = null, { type, conversationId }) => {\n    switch (type) {\n      case types.updateCurrentConversationId:\n        return conversationId;\n      case types.initSuccess:\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getOldMessagesReducer(types) {\n  return (state = [], { type, records }) => {\n    switch (type) {\n      case types.fetchOldMessagesSuccess:\n        return [].concat(state).concat(records.map(normalizeRecord));\n      case types.updateCurrentConversationId:\n      case types.resetSuccess:\n      case types.initSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getFetchMessagesStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetchOldMessages:\n        return status.fetching;\n      case types.fetchOldMessagesSuccess:\n      case types.fetchOldMessagesError:\n      case types.updateCurrentConversationId:\n      case types.resetSuccess:\n      case types.initSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getMessageTextsReducer(types) {\n  return (state = [], { type, text, conversationId }) => {\n    switch (type) {\n      case types.updateMessageText:\n        return [{ conversationId, text }].concat(\n          state.filter(msg => typeof msg === 'object' && msg.conversationId !== conversationId),\n        );\n      case types.removeMessageText:\n        return state.filter(msg => typeof msg === 'object' && msg.conversationId !== conversationId);\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getConversationStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.reply:\n        return status.pushing;\n      case types.replySuccess:\n      case types.replyError:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\nexport function getCorrespondentMatch(types) {\n  return (state = [], {\n    type,\n    entitys = [],\n    entity = {}\n  }) => {\n    switch (type) {\n      case types.addEntity: {\n        const newState = [...entitys];\n        return newState;\n      }\n      case types.removeEntity: {\n        const newState = [...state];\n        const filteredState = newState.filter(item =>\n          (item.rawId !== entity.id && item.id !== entity.id));\n        return filteredState;\n      }\n      default:\n        return state;\n    }\n  };\n}\nexport function getCorrespondentResponse(types) {\n  return (state = {}, {\n    type,\n    responses = [],\n    phoneNumber = ''\n  }) => {\n    switch (type) {\n      case types.addResponses: {\n        const formatResponses = responses.reduce((accumulator, response) => {\n          const {\n            to,\n            from,\n            direction,\n            conversation: {\n              id\n            }\n          } = response;\n          const number = direction === 'Inbound' ? from : to[0];\n          phoneNumber = number.phoneNumber || number.extensionNumber;\n          return {\n            ...accumulator,\n            [phoneNumber]: id\n          };\n        }, {});\n        return formatResponses;\n      }\n      case types.removeResponse: {\n        const newState = { ...state };\n        delete newState[phoneNumber];\n        return newState;\n      }\n      default:\n        return state;\n    }\n  };\n}\n\n\nexport default function getReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    searchInput: getSearchInputReducer(types),\n    typeFilter: getTypeFilterReducer(types),\n    oldConversations: getOldConversationsReducer(types),\n    currentPage: getCurrentPageReducer(types),\n    fetchConversationsStatus: getFetchConversationsStatusReducer(types),\n    currentConversationId: getCurrentConversationIdReducer(types),\n    oldMessages: getOldMessagesReducer(types),\n    fetchMessagesStatus: getFetchMessagesStatusReducer(types),\n    messageTexts: getMessageTextsReducer(types),\n    conversationStatus: getConversationStatusReducer(types),\n    correspondentMatch: getCorrespondentMatch(types),\n    correspondentResponse: getCorrespondentResponse(types)\n  });\n}\n"]}