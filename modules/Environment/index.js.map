{"version":3,"sources":["modules/Environment/index.js"],"names":["Environment","deps","dep","client","globalStorage","defaultRecordingHost","sdkConfig","options","actionTypes","_client","_globalStorage","_sdkConfig","_reducer","_serverStorageKey","_recordingHostStoragekey","_enabledStorageKey","registerReducer","key","reducer","types","defaultServer","SDK","server","sandbox","store","subscribe","_onStateChange","_shouldInit","_initClientService","dispatch","type","initSuccess","ready","enabled","service","newConfig","recordingHost","environmentChanged","_changeEnvironment","setData","state","status","moduleStatuses","getItem","changeCounter","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import SDK from 'ringcentral';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport proxify from '../../lib/proxy/proxify';\nimport actionTypes from './actionTypes';\nimport getEnvironmentReducer, {\n  getServerReducer,\n  getRecordingHostReducer,\n  getEnabledReducer,\n} from './getEnvironmentReducer';\n\n/**\n * @class\n * @description Environment module manages which api server the app calls.\n */\n@Module({\n  deps: [\n    'Client',\n    'GlobalStorage',\n    { dep: 'EnvironmentOptions' }\n  ]\n})\nexport default class Environment extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {GlobalStorage} params.globalStorage - globalStorage module instance\n   * @param {String} params.defaultRecordingHost - default recording host uri\n   * @param {Object} params.sdkConfig - sdk config\n   */\n  constructor({\n    client,\n    globalStorage,\n    defaultRecordingHost,\n    sdkConfig,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    this._globalStorage = globalStorage;\n    this._sdkConfig = sdkConfig;\n    this._reducer = getEnvironmentReducer(this.actionTypes);\n    this._serverStorageKey = 'environmentServer';\n    this._recordingHostStoragekey = 'environmentRecordingHost';\n    this._enabledStorageKey = 'environmentEnabled';\n    this._globalStorage.registerReducer({\n      key: this._serverStorageKey,\n      reducer: getServerReducer({\n        types: this.actionTypes,\n        defaultServer: SDK.server.sandbox,\n      }),\n    });\n    this._globalStorage.registerReducer({\n      key: this._recordingHostStoragekey,\n      reducer: getRecordingHostReducer({\n        types: this.actionTypes,\n        defaultRecordingHost: defaultRecordingHost ||\n          'https://s3.ap-northeast-2.amazonaws.com/fetch-call-recording/test/index.html',\n      }),\n    });\n    this._globalStorage.registerReducer({\n      key: this._enabledStorageKey,\n      reducer: getEnabledReducer(this.actionTypes),\n    });\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initClientService();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    }\n  }\n  _shouldInit() {\n    return this._globalStorage.ready && !this.ready;\n  }\n  _initClientService() {\n    if (this.enabled) {\n      this._client.service = new SDK({\n        ...this._sdkConfig,\n        server: this.server,\n      });\n    }\n  }\n  _changeEnvironment(enabled, server) {\n    const newConfig = {\n      ...this._sdkConfig,\n    };\n    if (enabled) {\n      newConfig.server = server;\n    }\n    this._client.service = new SDK(newConfig);\n  }\n\n  @proxify\n  async setData({ server, recordingHost, enabled }) {\n    const environmentChanged =\n      this.enabled !== enabled ||\n      (enabled && this.server !== server);\n    if (environmentChanged) { // recordingHost changed no need to set to SDK\n      this._changeEnvironment(enabled, server);\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      server,\n      recordingHost,\n      enabled,\n      environmentChanged,\n    });\n  }\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get server() {\n    return this._globalStorage.getItem(this._serverStorageKey);\n  }\n\n  get recordingHost() {\n    return this._globalStorage.getItem(this._recordingHostStoragekey);\n  }\n\n  get enabled() {\n    return this._globalStorage.getItem(this._enabledStorageKey);\n  }\n\n  get changeCounter() {\n    return this.state.changeCounter;\n  }\n}\n"]}