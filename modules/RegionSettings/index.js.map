{"version":3,"sources":["modules/RegionSettings/index.js"],"names":["RegionSettings","deps","dep","optional","brand","storage","extensionInfo","dialingPlan","alert","tabManager","options","actionTypes","_brand","_storage","_alert","_dialingPlan","_extensionInfo","_tabManager","_countryCodeKey","_areaCodeKey","_reducer","registerReducer","key","reducer","_processedPlans","store","subscribe","ready","status","moduleStatuses","pending","dispatch","type","init","active","checkRegionSettings","availableCountries","initSuccess","resetSuccess","warning","allowDuplicates","message","regionSettingsMessages","dialingPlansChanged","ttl","countryCode","getItem","find","plan","isoCode","id","_alertSettingsChanged","country","setData","areaCode","danger","areaCodeInvalid","trim","info","saveSuccess","state","length","RcModule","getter","plans","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { createSelector } from 'reselect';\n\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport getRegionSettingsReducer, {\n  getCountryCodeReducer,\n  getAreaCodeReducer,\n} from './getRegionSettingsReducer';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport regionSettingsMessages from '../RegionSettings/regionSettingsMessages';\nimport actionTypes from './actionTypes';\nimport validateAreaCode from '../../lib/validateAreaCode';\nimport proxify from '../../lib/proxy/proxify';\nimport getter from '../../lib/getter';\n\n/**\n * @class\n * @description Region settings managing module\n */\n@Module({\n  deps: [\n    'Brand',\n    'Alert',\n    'DialingPlan',\n    'ExtensionInfo',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n  ],\n})\nexport default class RegionSettings extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Storage} params.storage - storage module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {DialingPlan} params.dialingPlan - dialingPlan module instance\n   * @param {Alert} params.alert - alert module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   */\n  constructor({\n    brand,\n    storage,\n    extensionInfo,\n    dialingPlan,\n    alert,\n    tabManager,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._brand = brand;\n    this._storage = storage;\n    this._alert = alert;\n    this._dialingPlan = dialingPlan;\n    this._extensionInfo = extensionInfo;\n    this._tabManager = tabManager;\n\n    this._countryCodeKey = 'regionSettingsCountryCode';\n    this._areaCodeKey = 'regionSettingsAreaCode';\n    this._reducer = getRegionSettingsReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._countryCodeKey,\n      reducer: getCountryCodeReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._areaCodeKey,\n      reducer: getAreaCodeReducer(this.actionTypes),\n    });\n\n    this._processedPlans = null;\n  }\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._storage.ready &&\n        this._dialingPlan.ready &&\n        this._extensionInfo.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        if (!this._tabManager || this._tabManager.active) {\n          await this.checkRegionSettings();\n        }\n        this._processedPlans = this.availableCountries;\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        !this._storage.ready &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._processedPlans !== this.availableCountries\n      ) {\n        this._processedPlans = this.availableCountries;\n        if (!this._tabManager || this._tabManager.active) {\n          await this.checkRegionSettings();\n        }\n      }\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  @getter\n  availableCountries = createSelector(\n    () => this._dialingPlan.plans,\n    () => this._extensionInfo.country,\n    (plans, country) => {\n      if (plans && plans.length > 0) {\n        return plans;\n      }\n      return (country && [country]) || [];\n    },\n  )\n\n  _alertSettingsChanged() {\n    this._alert.warning({\n      allowDuplicates: false,\n      message: regionSettingsMessages.dialingPlansChanged,\n      ttl: 0\n    });\n  }\n\n  @proxify\n  async checkRegionSettings() {\n    let countryCode = this._storage.getItem(this._countryCodeKey);\n    if (\n      countryCode &&\n      !this.availableCountries.find(plan => (\n        plan.isoCode === countryCode\n      ))\n    ) {\n      countryCode = null;\n      if (this._brand.id === '1210') {\n        this._alertSettingsChanged();\n      }\n    }\n    if (!countryCode) {\n      const country = this.availableCountries.find(plan => (\n        plan.isoCode === this._extensionInfo.country.isoCode\n      )) || this.availableCountries[0];\n      countryCode = country && country.isoCode;\n      this.store.dispatch({\n        type: this.actionTypes.setData,\n        countryCode,\n        areaCode: '',\n      });\n    }\n  }\n\n  @proxify\n  async setData({\n    areaCode,\n    countryCode,\n  }) {\n    if (!validateAreaCode(areaCode)) {\n      this._alert.danger({\n        message: regionSettingsMessages.areaCodeInvalid,\n      });\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      countryCode,\n      areaCode: areaCode && areaCode.trim(),\n    });\n    this._alert.info({\n      message: regionSettingsMessages.saveSuccess,\n    });\n  }\n\n  setCountryCode(countryCode) {\n    this.setData({\n      countryCode,\n    });\n  }\n\n  setAreaCode(areaCode) {\n    this.setData({\n      areaCode,\n    });\n  }\n\n  get showReginSetting() {\n    if (this.availableCountries.length > 1) {\n      return true;\n    }\n    if (this.availableCountries.length === 1 && (\n      this.availableCountries[0].isoCode === 'US' ||\n      this.availableCountries[0].isoCode === 'CA'\n    )) {\n      return true;\n    }\n    return false;\n  }\n\n  get countryCode() {\n    return this._storage.getItem(this._countryCodeKey) || 'US';\n  }\n\n  get areaCode() {\n    return this._storage.getItem(this._areaCodeKey) || '';\n  }\n}\n"]}