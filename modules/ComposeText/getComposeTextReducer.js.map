{"version":3,"sources":["modules/ComposeText/getComposeTextReducer.js"],"names":["getSenderNumber","getTypingToNumber","getToNumberEntityReducer","getToNumbers","getMessageText","getComposeTextReducer","types","state","type","number","updateSenderNumber","updateTypingToNumber","clean","cleanTypingToNumber","entityId","toNumberMatched","newState","slice","addToNumber","id","idx","findIndex","item","phoneNumber","oldNumber","find","push","removeToNumber","filter","text","updateMessageText","status","senderNumber","typingToNumber","toNumbers","messageText","toNumberEntity"],"mappings":"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","file":"getComposeTextReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nexport function getSenderNumber(types) {\n  return (state = '', { type, number }) => {\n    switch (type) {\n      case types.updateSenderNumber:\n        return number;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTypingToNumber(types) {\n  return (state = '', { type, number }) => {\n    switch (type) {\n      case types.updateTypingToNumber:\n        return number;\n      case types.clean:\n      case types.cleanTypingToNumber:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getToNumberEntityReducer(types) {\n  return (state = '', { type, entityId }) => {\n    switch (type) {\n      case types.toNumberMatched:\n        return entityId;\n      case types.clean:\n      case types.cleanTypingToNumber:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getToNumbers(types) {\n  return (state = [], { type, number }) => {\n    const newState = state.slice();\n    switch (type) {\n      case types.addToNumber:\n        // known entity id eg. from click2SMS\n        if (number.id) {\n          const idx = newState.findIndex(item => (\n            number.id === item.id || number.phoneNumber === item.phoneNumber\n          ));\n          if (idx > -1) {\n            // replace old one if found\n            newState[idx] = number;\n            return newState;\n          }\n        } else {\n          const oldNumber = newState.find(item => (\n            number.phoneNumber === item.phoneNumber\n          ));\n          if (oldNumber) {\n            return newState;\n          }\n        }\n        newState.push(number);\n        return newState;\n      case types.removeToNumber:\n        return state.filter(item => (\n          item.phoneNumber !== number.phoneNumber\n        ));\n      case types.clean:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getMessageText(types) {\n  return (state = '', { type, text }) => {\n    switch (type) {\n      case types.updateMessageText:\n        return text;\n      case types.clean:\n        return '';\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getComposeTextReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    senderNumber: getSenderNumber(types),\n    typingToNumber: getTypingToNumber(types),\n    toNumbers: getToNumbers(types),\n    messageText: getMessageText(types),\n    toNumberEntity: getToNumberEntityReducer(types),\n  });\n}\n"]}