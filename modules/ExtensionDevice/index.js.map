{"version":3,"sources":["modules/ExtensionDevice/index.js"],"names":["ExtensionDevice","deps","dep","optional","client","options","name","fetchFunction","account","extension","device","list","params","map","cleanOnReset","addSelector","data","devices","phoneLines","forEach","length","concat","_selectors","DataFetcher"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;IAOqBA,e,WAHpB,gBAAO;AACNC,QAAM,CAAC,QAAD,EAAW,EAAEC,KAAK,wBAAP,EAAiCC,UAAU,IAA3C,EAAX;AADA,CAAP,C;;;AAIC;;;;;AAKA,iCAGG;AAAA;;AAAA,QAFDC,MAEC,QAFDA,MAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM,iBAFP;AAGCF,oBAHD;AAICG;AAAA,6FAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmB,yBAAU;AAAA,2BAC1CH,OAAOI,OAAP,GAAiBC,SAAjB,GAA6BC,MAA7B,GAAsCC,IAAtC,CAA2CC,MAA3C,CAD0C;AAAA,mBAAV,CAAnB;;AAAA;AAAA,gCAEP;AAAA,sDACH,yBAAUF,MAAV,CADG;AAEND,iCAAW,yBAAUC,OAAOD,SAAjB;AAFL;AAAA,mBAFO;;AAAA,iEAEXI,GAFW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAJD;AAUCC,oBAAc;AAVf,OAWIT,OAXJ;;AAcD,UAAKU,WAAL,CACE,SADF,EAEE;AAAA,aAAM,MAAKC,IAAX;AAAA,KAFF,EAGE;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAHF;;AAMA,UAAKD,WAAL,CACE,YADF,EAEE;AAAA,aAAM,MAAKE,OAAX;AAAA,KAFF,EAGE,UAACA,OAAD,EAAa;AACX,UAAIC,aAAa,EAAjB;AACAD,cAAQE,OAAR,CAAgB,UAACT,MAAD,EAAY;AAC1B,YAAI,CAACA,OAAOQ,UAAR,IAAsBR,OAAOQ,UAAP,CAAkBE,MAAlB,KAA6B,CAAvD,EAA0D;AACxD;AACD;AACDF,qBAAaA,WAAWG,MAAX,CAAkBX,OAAOQ,UAAzB,CAAb;AACD,OALD;AAMA,aAAOA,UAAP;AACD,KAZH;AApBC;AAkCF;;;;wBAEa;AACZ,aAAO,KAAKI,UAAL,CAAgBL,OAAhB,EAAP;AACD;;;wBAEgB;AACf,aAAO,KAAKK,UAAL,CAAgBJ,UAAhB,EAAP;AACD;;;EAnD0CK,qB;kBAAxBvB,e","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport DataFetcher from '../../lib/DataFetcher';\nimport removeUri from '../../lib/removeUri';\n\n/**\n * @class\n * @description Extension device list module\n */\n@Module({\n  deps: ['Client', { dep: 'ExtensionDeviceOptions', optional: true }]\n})\nexport default class ExtensionDevice extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    ...options\n  }) {\n    super({\n      name: 'extensionDevice',\n      client,\n      fetchFunction: async () => (await fetchList(params => (\n        client.account().extension().device().list(params)\n      ))).map(device => ({\n        ...removeUri(device),\n        extension: removeUri(device.extension),\n      })),\n      cleanOnReset: true,\n      ...options,\n    });\n\n    this.addSelector(\n      'devices',\n      () => this.data,\n      data => data || [],\n    );\n\n    this.addSelector(\n      'phoneLines',\n      () => this.devices,\n      (devices) => {\n        let phoneLines = [];\n        devices.forEach((device) => {\n          if (!device.phoneLines || device.phoneLines.length === 0) {\n            return;\n          }\n          phoneLines = phoneLines.concat(device.phoneLines);\n        });\n        return phoneLines;\n      },\n    );\n  }\n\n  get devices() {\n    return this._selectors.devices();\n  }\n\n  get phoneLines() {\n    return this._selectors.phoneLines();\n  }\n}\n"]}