{"version":3,"sources":["modules/CallLog/index.js"],"names":["processData","getISODateFrom","getISODateTo","DEFAULT_TTL","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","LIST_RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","data","records","timestamp","Date","syncInfo","syncTime","getTime","syncToken","daySpan","d","toISOString","dateTo","forEach","call","startTime","presenceRegExp","CallLog","deps","dep","optional","auth","client","storage","extensionPhoneNumber","extensionInfo","subscription","rolesAndPermissions","tabManager","ttl","tokenExpiresIn","timeToRetry","polling","disableCache","isLimitList","listRecordCount","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","ownerId","_auth","_storage","_tabManager","active","sync","_onStateChange","loggedIn","ready","_subscription","_extensionPhoneNumber","_extensionInfo","_rolesAndPermissions","status","moduleStatuses","pending","store","dispatch","type","init","_daySpan","token","now","_tokenExpiresIn","clearToken","permissions","ReadCallLog","_init","initSuccess","reset","_clearTimeout","_promise","resetSuccess","_lastMessage","_client","_isLimitList","_listRecordCount","_callLogStorageKey","_ttl","_timeToRetry","_polling","_reducer","registerReducer","key","reducer","addSelector","calls","filter","result","callResults","stopped","busy","unknown","faxSendError","faxReceiptError","callFailed","faxReceipt","map","isOutBoundCompanyNumber","from","phoneNumber","mainCompanyNumbers","indexOf","isOutBoundFromSelfExtNumber","extensionNumber","action","callActions","ringOutWeb","ringOutPC","ringOutMobile","to","slice","console","log","_startPolling","subscribe","subscriptionFilters","detailedPresence","dateFrom","perPageParam","perPage","account","extension","callLog","list","params","iSync","callLogSync","syncType","syncTypes","Error","iSyncSuccess","iSyncError","error","fSync","recordCount","supplementRecords","length","_fetch","fSyncSuccess","fSyncError","shouldFSync","_iSync","_fSync","_retry","_sync","_queueSync","state","getItem","_selectors","ReadPresenceStatus","numbers","usageType","Pollable","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport fetchList from '../../lib/fetchList';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getDateFrom from '../../lib/getDateFrom';\nimport actionTypes from './actionTypes';\nimport getCallLogReducer, {\n  getDataReducer,\n  getTimestampReducer,\n  getTokenReducer,\n} from './getCallLogReducer';\nimport sleep from '../../lib/sleep';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport syncTypes from '../../enums/syncTypes';\nimport {\n  hasEndedCalls,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport callResults from '../../enums/callResults';\nimport callActions from '../../enums/callActions';\nimport proxify from '../../lib/proxy/proxify';\nimport { isOutbound } from '../../lib/callLogHelpers';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst LIST_RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 30 * 1000;\n\nexport function processData(data) {\n  return {\n    records: data.records,\n    timestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\n\nexport function getISODateFrom(daySpan) {\n  const d = getDateFrom(daySpan);\n  return d.toISOString();\n}\n\nexport function getISODateTo(records) {\n  let dateTo;\n  records.forEach((call) => {\n    if (!dateTo || call.startTime < dateTo) dateTo = call.startTime;\n  });\n  return dateTo && (new Date(dateTo)).toISOString();\n}\n// to not use $ at the end, presence with sipData has extra query parameters\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\n\n/**\n * @class\n * @description Call log managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Client',\n    'ExtensionPhoneNumber',\n    'ExtensionInfo',\n    'Subscription',\n    'RolesAndPermissions',\n    { dep: 'TabManager', optional: true },\n    { dep: 'Storage', optional: true },\n    { dep: 'CallLogOptions', optional: true }\n  ]\n})\nexport default class CallLog extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {ExtensionPhoneNumber} params.extensionPhoneNumber - extensionPhoneNumber module instance\n   * @param {ExtensionInfo} params.extensionPhoneNumber - extensionPhoneNumber module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Number} params.ttl - local cache timestamp\n   * @param {Number} params.tokenExpiresIn - time for token expire\n   * @param {Number} params.timeToRetry - waiting time to retry\n   * @param {Number} params.daySpan - day span of call log\n   * @param {Bool} params.polling - polling flag\n   * @param {Bool} params.disableCache - disable cache flag, default false\n   */\n  constructor({\n    auth,\n    client,\n    storage,\n    extensionPhoneNumber,\n    extensionInfo,\n    subscription,\n    rolesAndPermissions,\n    tabManager,\n    ttl = DEFAULT_TTL,\n    tokenExpiresIn = DEFAULT_TOKEN_EXPIRES_IN,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    polling = true,\n    disableCache = false,\n    isLimitList = false,\n    listRecordCount = LIST_RECORD_COUNT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._extensionPhoneNumber = extensionPhoneNumber;\n    this._extensionInfo = extensionInfo;\n    this._subscription = subscription;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._tabManager = tabManager;\n    this._isLimitList = isLimitList;\n    this._listRecordCount = listRecordCount;\n    this._callLogStorageKey = 'callLog';\n    this._ttl = ttl;\n    this._tokenExpiresIn = tokenExpiresIn;\n    this._timeToRetry = timeToRetry;\n    this._daySpan = daySpan;\n    this._polling = polling;\n    if (this._storage) {\n      this._reducer = getCallLogReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._callLogStorageKey,\n        reducer: combineReducers({\n          data: getDataReducer(this.actionTypes),\n          token: getTokenReducer(this.actionTypes),\n          timestamp: getTimestampReducer(this.actionTypes),\n        }),\n      });\n    } else {\n      this._reducer = getCallLogReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n        token: getTokenReducer(this.actionTypes),\n        timestamp: getTimestampReducer(this.actionTypes),\n      });\n    }\n\n    this.addSelector('calls',\n      () => this.data,\n      (data) => {\n        // TODO make sure removeDuplicateIntermediateCalls is necessary here\n        const calls = removeInboundRingOutLegs(removeDuplicateIntermediateCalls(data.filter(call => (\n          // [RCINT-3472] calls with result === 'stopped' seems to be useless\n          call.result !== callResults.stopped &&\n          // [RCINT-51111] calls with result === 'busy'\n          call.result !== callResults.busy &&\n          // [RCINT-6839]\n          // Call processing result is undefined\n          call.result !== callResults.unknown &&\n          // Outgoing fax sending has failed\n          call.result !== callResults.faxSendError &&\n          // Incoming fax has failed to be received\n          call.result !== callResults.faxReceiptError &&\n          // Outgoing fax has failed because of no answer\n          call.result !== callResults.callFailed &&\n          // Outgoing fax sending has been stopped\n          call.result !== callResults.stopped &&\n          // Error Internal error occurred when receiving fax\n          call.result !== callResults.faxReceipt\n        )))).map((call) => {\n          // [RCINT-7364] Call presence is incorrect when make ringout call from a DL number.\n          // When user use DL number set ringout and the outBound from number must not a oneself company/extension number\n          // Call log sync will response tow legs.\n          // But user use company plus extension number, call log sync will response only one leg.\n          // And the results about `to` and `from` in platform APIs call log sync response is opposite.\n          // This is a temporary solution.\n          const isOutBoundCompanyNumber = (\n            call.from &&\n            call.from.phoneNumber &&\n            this.mainCompanyNumbers.indexOf(call.from.phoneNumber) > -1\n          );\n          const isOutBoundFromSelfExtNumber = (\n            call.from &&\n            call.from.extensionNumber &&\n            call.from.extensionNumber === this._extensionInfo.data.extensionNumber\n          );\n          if (\n            isOutbound(call) &&\n            (\n              call.action === callActions.ringOutWeb ||\n              call.action === callActions.ringOutPC ||\n              call.action === callActions.ringOutMobile\n            ) &&\n            !isOutBoundCompanyNumber &&\n            !isOutBoundFromSelfExtNumber\n          ) {\n            return {\n              ...call,\n              from: call.to,\n              to: call.from,\n            };\n          }\n          return call;\n        });\n        if (this._isLimitList) {\n          return calls.slice(0, this._listRecordCount);\n        }\n        return calls;\n      },\n    );\n\n    this._promise = null;\n    this._lastMessage = null;\n  }\n  _subscriptionHandler = async (message) => {\n    if (\n      presenceRegExp.test(message.event) &&\n      message.body &&\n      message.body.activeCalls &&\n      hasEndedCalls(message.body.activeCalls)\n    ) {\n      const { ownerId } = this._auth;\n      await sleep(SYNC_DELAY);\n      if (\n        ownerId === this._auth.ownerId &&\n        (!this._storage || !this._tabManager || this._tabManager.active)\n      ) {\n        this.sync();\n      }\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      (!this._subscription || this._subscription.ready) &&\n      (!this._extensionPhoneNumber || this._extensionPhoneNumber.ready) &&\n      (!this._extensionInfo || this._extensionInfo.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.status === moduleStatuses.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n        daySpan: this._daySpan,\n      });\n      if (\n        this.token &&\n        (\n          !this.timestamp ||\n          Date.now() - this.timestamp > this._tokenExpiresIn\n        )\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.clearToken,\n        });\n      }\n      if (this._rolesAndPermissions.permissions.ReadCallLog) {\n        await this._init();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        (!!this._storage && !this._storage.ready) ||\n        (this._extensionPhoneNumber && !this._extensionPhoneNumber.ready) ||\n        (this._extensionInfo && !this._extensionInfo.ready) ||\n        (this._subscription && !this._subscription.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._rolesAndPermissions.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    }\n  }\n\n  async _init() {\n    if (!this._storage || !this._tabManager || this._tabManager.active) {\n      try {\n        await this.sync();\n      } catch (e) {\n        console.log(e);\n      }\n    } else if (this._polling) {\n      this._startPolling();\n    }\n    if (this._subscription) {\n      this._subscription.subscribe(subscriptionFilters.detailedPresence);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get data() {\n    if (this._storage) {\n      return this._storage.getItem(this._callLogStorageKey).data;\n    }\n    return this.state.data;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get token() {\n    if (this._storage) {\n      return this._storage.getItem(this._callLogStorageKey).token;\n    }\n    return this.state.token;\n  }\n\n  get timestamp() {\n    if (this._storage) {\n      return this._storage.getItem(this._callLogStorageKey).timestamp;\n    }\n    return this.state.timestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get canReadCallLog() {\n    return !!this._rolesAndPermissions.permissions.ReadCallLog;\n  }\n\n  get canReadPresence() {\n    return !!this._rolesAndPermissions.permissions.ReadPresenceStatus;\n  }\n\n  @proxify\n  async _fetch({ dateFrom, dateTo }) {\n    const perPageParam = this._isLimitList ? { perPage: this._listRecordCount } : {};\n    return fetchList(params => (\n      this._client.account().extension().callLog().list({\n        ...params,\n        dateFrom,\n        dateTo,\n        ...perPageParam\n      })\n    ));\n  }\n  @proxify\n  async _iSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.iSync,\n      });\n      const data = await this._client.account().extension().callLogSync().list({\n        syncType: syncTypes.iSync,\n        syncToken: this.token,\n      });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.iSyncSuccess,\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.iSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n  @proxify\n  async _fSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.fSync,\n      });\n\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data = await this._client.account().extension().callLogSync().list({\n        recordCount: RECORD_COUNT,\n        syncType: syncTypes.fSync,\n        dateFrom,\n      });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      let supplementRecords;\n      const {\n        records,\n        timestamp,\n        syncToken,\n      } = processData(data);\n      if (records.length >= RECORD_COUNT) {\n        // reach the max record count\n        supplementRecords = (await this._fetch({\n          dateFrom,\n          dateTo: getISODateTo(records),\n        }));\n      }\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.fSyncSuccess,\n        records,\n        supplementRecords,\n        timestamp,\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n  @proxify\n  async _sync(syncType) {\n    const ownerId = this._auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n  @proxify\n  async sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n      return this._promise;\n    } else if (!this._queueSync) {\n      this._queueSync = (async () => {\n        await this._promise;\n        this._promise = (async () => {\n          await sleep(300);\n          return this._sync(syncType);\n        })();\n        this._queueSync = null;\n        return this._promise;\n      })();\n      return this._queueSync;\n    }\n    return this._queueSync;\n  }\n  @proxify\n  fetchData() {\n    return this.sync();\n  }\n\n  get mainCompanyNumbers() {\n    return this._extensionPhoneNumber\n      .numbers\n      .filter(({ usageType }) => usageType === 'MainCompanyNumber')\n      .map(({ phoneNumber }) => phoneNumber);\n  }\n}\n"]}