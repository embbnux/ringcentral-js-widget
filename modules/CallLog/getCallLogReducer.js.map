{"version":3,"sources":["modules/CallLog/getCallLogReducer.js"],"names":["getDataReducer","getTokenReducer","getTimestampReducer","getCallLogReducer","processRecords","records","supplementRecords","ids","output","processCall","call","id","action","callActions","findMe","push","forEach","types","state","type","daySpan","init","cutOffTime","getTime","filter","startTime","fSyncSuccess","iSyncSuccess","indexMap","newState","length","sort","sortByStartTime","resetSuccess","syncToken","clearToken","timestamp","reducers","status"],"mappings":"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","file":"getCallLogReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport getDateFrom from '../../lib/getDateFrom';\nimport {\n  normalizeStartTime,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport removeUri from '../../lib/removeUri';\nimport callActions from '../../enums/callActions';\n\n\nfunction processRecords(records = [], supplementRecords = []) {\n  const ids = {};\n  const output = [];\n  function processCall(call) {\n    if (\n      !ids[call.id] &&\n      call.action !== callActions.findMe\n    ) {\n      output.push(normalizeStartTime(removeUri(call)));\n      ids[call.id] = true;\n    }\n  }\n  records.forEach(processCall);\n  supplementRecords.forEach(processCall);\n  return output;\n}\n\nexport function getDataReducer(types) {\n  return (state = [], {\n    type, records = [], supplementRecords = [], daySpan\n  }) => {\n    switch (type) {\n      case types.init: {\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        return state.filter(call => call.startTime > cutOffTime);\n      }\n      case types.fSyncSuccess:\n      case types.iSyncSuccess: {\n        const indexMap = {};\n        const newState = [];\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        // filter old calls\n        state.forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            indexMap[call.id] = newState.length;\n            newState.push(call);\n          }\n        });\n        processRecords(records, supplementRecords).forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            if (indexMap[call.id] > -1) {\n              // replace the current data with new data\n              newState[indexMap[call.id]] = call;\n            } else {\n              indexMap[call.id] = newState.length;\n              newState.push(call);\n            }\n          }\n        });\n        newState.sort(sortByStartTime);\n        return newState;\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTokenReducer(types) {\n  return (state = null, { type, syncToken }) => {\n    switch (type) {\n      case types.iSyncSuccess:\n      case types.fSyncSuccess:\n        return syncToken;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.fSyncSuccess:\n      case types.iSyncSuccess:\n        return timestamp;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallLogReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}