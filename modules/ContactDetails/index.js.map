{"version":3,"sources":["modules/ContactDetails/index.js"],"names":["sortOtherTypes","unSortTypes","MOBILE","BUSINESS","HOME","FAX","OTHER","goalOrderTypes","mobile","business","home","fax","other","sort","a","b","ContactDetails","deps","dep","optional","contacts","options","actionTypes","_contacts","_reducer","addSelector","condition","allContacts","find","currentContact","phoneNumbers","rawPhoneNumbers","phoneMaps","acc","phoneNumberElm","phoneType","push","filter","key","phoneTypes","extension","direct","sortedTypes","schema","Array","isArray","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","resetSuccess","ready","pending","id","updateCondition","resetCondition","contact","getProfileImage","getPresence","clickToSMS","clickToCall","_selectors","currentSortedContact","state","status","RcModule","background","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { filter, reduce } from 'ramda';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport actionTypes from './actionTypes';\nimport getContactDetailsReducer from './getContactDetailsReducer';\nimport proxify from '../../lib/proxy/proxify';\nimport background from '../../lib/background';\nimport phoneTypes from '../../enums/phoneTypes';\n\n\nconst sortOtherTypes = ({ unSortTypes = [] }) => {\n  const [MOBILE, BUSINESS, HOME, FAX, OTHER] = [0, 1, 2, 3, 4];\n  const goalOrderTypes = {\n    mobile: MOBILE, business: BUSINESS, home: HOME, fax: FAX, other: OTHER\n  };\n  unSortTypes.sort((a, b) => goalOrderTypes[a] - goalOrderTypes[b]);\n  return unSortTypes;\n};\n@Module({\n  deps: [\n    'Contacts',\n    { dep: 'ContactDetailsOptions', optional: true }\n  ]\n})\n\nexport default class ContactDetails extends RcModule {\n  constructor({ contacts, ...options }) {\n    super({ ...options, actionTypes });\n\n    this._contacts = contacts;\n    this._reducer = getContactDetailsReducer(this.actionTypes);\n\n    this.addSelector(\n      'currentContact',\n      () => this.condition,\n      () => this._contacts.allContacts,\n      (condition) => {\n        if (condition) { return this._contacts.find(condition); }\n        return null;\n      }\n    );\n\n    this.addSelector(\n      'currentSortedContact',\n      () => this.currentContact,\n      (currentContact) => {\n        if (!currentContact) return null;\n        const phoneNumbers = currentContact.rawPhoneNumbers || currentContact.phoneNumbers;\n        const phoneMaps = reduce((acc, phoneNumberElm) => {\n          acc[phoneNumberElm.phoneType] = acc[phoneNumberElm.phoneType] || [];\n          acc[phoneNumberElm.phoneType].push(phoneNumberElm);\n          return acc;\n        }, {}, phoneNumbers);\n\n        const unSortTypes = (Object.keys(phoneMaps).filter(\n          key => key !== phoneTypes.extension && key !== phoneTypes.direct\n        ));\n\n        const sortedTypes = sortOtherTypes({ unSortTypes });\n        // we need sequence that: ext followed by direct followed by others.\n        const schema = filter(\n          key => (!!phoneTypes[key] && Array.isArray(phoneMaps[key])),\n          [\n            phoneTypes.extension,\n            phoneTypes.direct,\n            ...sortedTypes\n          ],\n        );\n        return { ...currentContact, schema, phoneMaps };\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._contacts.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      !this._contacts.ready &&\n      this.ready\n    );\n  }\n\n  /**\n   * Find contact from all contacts by given conditions.\n   * Stores search conditions to reducers.\n   */\n  @background\n  find({ id, type }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateCondition,\n      condition: {\n        id,\n        type\n      }\n    });\n  }\n\n  @background\n  clear() {\n    this.store.dispatch({\n      type: this.actionTypes.resetCondition\n    });\n  }\n\n  @background\n  getProfileImage(contact) {\n    return this._contacts.getProfileImage(contact, false);\n  }\n\n  @background\n  getPresence(contact) {\n    return this._contacts.getPresence(contact, false);\n  }\n\n  // for track click to sms in contact detail\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS,\n    });\n  }\n\n  // for track click to call in contact detail\n  @proxify\n  onClickToCall() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n    });\n  }\n\n  get currentContact() {\n    return this._selectors.currentContact();\n  }\n\n  get contact() {\n    return this._selectors.currentSortedContact();\n  }\n\n  get condition() {\n    return this.state.condition;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n}\n"]}