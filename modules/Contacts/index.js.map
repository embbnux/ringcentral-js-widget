{"version":3,"sources":["modules/Contacts/index.js"],"names":["DefaultContactListPageSize","Contacts","deps","dep","optional","auth","contactSources","options","actionTypes","_auth","ensureExist","_reducer","_contactSources","_sourcesLastStatus","_sourcesUpdatedAt","Date","now","source","addSource","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","_resetModuleStatus","loggedIn","sourceModuleReady","pending","ready","resetSuccess","sourceFilter","searchFilter","updateFilter","sourceName","Error","has","getPresence","getProfileImage","matchPhoneNumber","set","updated","keys","get","lastStatus","sourceReady","data","contacts","phoneNumber","result","concat","phoneNumbers","forEach","id","contactId","toString","find","x","contact","useCache","sync","state","status","RcModule","proxify","getter","size","_checkSourceUpdated","names","AllContactSourceName","push","filteredContacts","allContacts"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport getter from '../../lib/getter';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\nimport {\n  uniqueContactItems,\n  sortContactItemsByName,\n  groupByFirstLetterOfName,\n  filterContacts,\n  AllContactSourceName,\n} from '../../lib/contactHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport actionTypes from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\n\nexport const DefaultContactListPageSize = 20;\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    { dep: 'ContactSources', optional: true },\n    { dep: 'ContactsOptions', optional: true }\n  ]\n})\nexport default class Contacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   */\n  constructor({\n    auth,\n    contactSources = [],\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this:: ensureExist(auth, 'auth');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._contactSources = new Map();\n    this._sourcesLastStatus = new Map();\n    this._sourcesUpdatedAt = Date.now();\n\n    for (const source of contactSources) {\n      this.addSource(source);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this.sourceModuleReady &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this.sourceModuleReady\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  updateFilter({\n    sourceFilter,\n    searchFilter,\n  }) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFilter,\n      sourceFilter,\n      searchFilter,\n    });\n  }\n\n  /**\n   * @function\n   * @param {Object} source - source module object\n   * @param {String} params.sourceName - source name\n   * @param {Bool} params.ready - source module ready status\n   * @param {Bool} params.sourceReady - source ready status\n   * @param {Array} params.contacts - source contacts data\n   * @param {Function} params.getPresence - get source presence function, optional\n   * @param {Function} params.getProfileImage - get source profile image function, optional\n   * @param {Function} params.sync - sync source data function, optional\n   * @param {Function} params.matchPhoneNumber - get match phoneNumber function, optional\n   */\n  addSource(source) {\n    if (!source.sourceName) {\n      throw new Error('Contacts: \"sourceName\" is required in Contacts source.');\n    }\n    if (this._contactSources.has(source.sourceName)) {\n      throw new Error(`Contacts: A contact source named \"${source.sourceName}\" already exists`);\n    }\n    if (source.getPresence && typeof source.getPresence !== 'function') {\n      throw new Error('Contacts: source\\' getPresence must be a function');\n    }\n    if (source.getProfileImage && typeof source.getProfileImage !== 'function') {\n      throw new Error('Contacts: source\\' getProfileImage must be a function');\n    }\n    if (source.matchPhoneNumber && typeof source.matchPhoneNumber !== 'function') {\n      throw new Error('Contacts: source\\' matchPhoneNumber must be a function');\n    }\n    this._contactSources.set(source.sourceName, source);\n    this._sourcesLastStatus.set(source.sourceName, {});\n    this._sourcesUpdatedAt = Date.now();\n  }\n\n  _checkSourceUpdated() {\n    let updated = false;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      const lastStatus = this._sourcesLastStatus.get(sourceName);\n      if (\n        lastStatus.ready !== source.sourceReady ||\n        lastStatus.data !== source.contacts\n      ) {\n        updated = true;\n        this._sourcesLastStatus.set(sourceName, {\n          ready: source.sourceReady,\n          data: source.contacts,\n        });\n      }\n    }\n    if (updated) {\n      this._sourcesUpdatedAt = Date.now();\n    }\n    return this._sourcesUpdatedAt;\n  }\n\n  matchPhoneNumber(phoneNumber) {\n    let result = [];\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.matchPhoneNumber === 'function') {\n        result = result.concat(source.matchPhoneNumber(phoneNumber));\n      }\n    }\n    return result;\n  }\n\n  matchContacts({ phoneNumbers }) {\n    const result = {};\n    phoneNumbers.forEach((phoneNumber) => {\n      result[phoneNumber] = this.matchPhoneNumber(phoneNumber);\n    });\n    return result;\n  }\n\n  find({ type, id }) {\n    const contactId = (id || '').toString();\n    const source = this._contactSources.get(type);\n    if (source) {\n      return source.contacts.find(x => x.id.toString() === contactId);\n    }\n    return null;\n  }\n\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getProfileImage) {\n      const result = await source.getProfileImage(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async getPresence(contact, useCache = true) {\n    const source = this._contactSources.get(contact && contact.type);\n    if (source && source.getPresence) {\n      const result = await source.getPresence(contact, useCache);\n      return result;\n    }\n    return null;\n  }\n\n  @proxify\n  async sync() {\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (typeof source.sync === 'function') {\n        await source.sync();\n      }\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get sourceModuleReady() {\n    let ready = true;\n    for (const sourceName of Array.from(this._contactSources.keys())) {\n      const source = this._contactSources.get(sourceName);\n      if (!source.ready) {\n        ready = false;\n      }\n    }\n    return ready;\n  }\n\n  get companyContacts() {\n    const source = this._contactSources.get('company');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get personalContacts() {\n    const source = this._contactSources.get('personal');\n    if (source) {\n      return source.contacts;\n    }\n    return [];\n  }\n\n  get searchFilter() {\n    return this.state.searchFilter;\n  }\n\n  get sourceFilter() {\n    return this.state.sourceFilter;\n  }\n\n  @getter\n  sourceNames = createSelector(\n    () => this._contactSources.size,\n    () => this._checkSourceUpdated(),\n    () => {\n      const names = [AllContactSourceName];\n      for (const sourceName of Array.from(this._contactSources.keys())) {\n        const source = this._contactSources.get(sourceName);\n        if (source.sourceReady) {\n          names.push(sourceName);\n        }\n      }\n      return names;\n    }\n  )\n\n  @getter\n  allContacts = createSelector(\n    () => this._checkSourceUpdated(),\n    () => {\n      let contacts = [];\n      for (const sourceName of Array.from(this._contactSources.keys())) {\n        const source = this._contactSources.get(sourceName);\n        if (source.sourceReady) {\n          contacts = contacts.concat(source.contacts);\n        }\n      }\n      return contacts;\n    }\n  )\n\n  @getter\n  contactGroups = createSelector(\n    () => this.filteredContacts,\n    filteredContacts => groupByFirstLetterOfName(\n      sortContactItemsByName(\n        uniqueContactItems(filteredContacts)\n      )\n    )\n  )\n\n  @getter\n  filteredContacts = createSelector(\n    () => this.searchFilter,\n    () => this.sourceFilter,\n    () => this._checkSourceUpdated(),\n    (searchFilter, sourceFilter) => {\n      let contacts;\n      if (\n        isBlank(searchFilter) &&\n        (sourceFilter === AllContactSourceName || isBlank(sourceFilter))\n      ) {\n        return this.allContacts;\n      }\n      if (sourceFilter !== AllContactSourceName && !isBlank(sourceFilter)) {\n        const source = this._contactSources.get(sourceFilter);\n        if (source && source.sourceReady) {\n          /* eslint { \"prefer-destructuring\": 0 } */\n          contacts = source.contacts;\n        } else {\n          contacts = [];\n        }\n      } else {\n        contacts = this.allContacts;\n      }\n      if (!isBlank(searchFilter)) {\n        contacts = filterContacts(contacts, searchFilter);\n      }\n      return contacts;\n    }\n  )\n}\n"]}