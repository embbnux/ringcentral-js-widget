{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","FETCH_THRESHOLD","DetailedPresence","deps","dep","optional","options","getReducer","getDetailedPresenceReducer","subscriptionFilter","subscriptionFilters","detailedPresence","actionTypes","lastNotDisturbDndStatusStorageKey","_subscriptionHandler","message","test","event","body","sequence","_lastSequence","store","dispatch","type","notification","lastDndStatus","dndStatus","timestamp","Date","now","activeCalls","totalActiveCalls","length","_fetchRemainingCalls","addSelector","state","calls","map","call","sessionId","data","filter","_fetch","fetch","ownerId","_auth","_client","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","telephonyStatus","sessionIdList","Presence","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Presence from '../Presence';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport throttle from '../../lib/throttle';\nimport {\n  isEnded,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport proxify from '../../lib/proxy/proxify';\n\nconst presenceRegExp = /.*\\/presence\\?detailedTelephonyState=true&sipData=true/;\nconst FETCH_THRESHOLD = 2000;\n\n/**\n * @class\n * @description Presence detail info managing module\n */\n@Module({\n  deps: [\n    { dep: 'DetailedPresenceOptions', optional: true }\n  ]\n})\nexport default class DetailedPresence extends Presence {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {ConnectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   */\n  constructor(options) {\n    super({\n      getReducer: getDetailedPresenceReducer,\n      subscriptionFilter: subscriptionFilters.detailedPresence,\n      actionTypes,\n      lastNotDisturbDndStatusStorageKey: 'lastNotDisturbDndStatusDetailPresence',\n      ...options\n    });\n\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(data)\n          .filter(call => !isEnded(call))\n      ),\n    );\n\n    this._fetchRemainingCalls = throttle(this:: this._fetch, FETCH_THRESHOLD);\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      if (message.body.sequence) {\n        if (message.body.sequence < this._lastSequence) {\n          return;\n        }\n        this._lastSequence = message.body.sequence;\n      }\n\n      const { body } = message;\n      this.store.dispatch({\n        ...body,\n        type: this.actionTypes.notification,\n        lastDndStatus: this.dndStatus,\n        timestamp: Date.now(),\n      });\n\n      /**\n       * as pointed out by Igor in https://jira.ringcentral.com/browse/PLA-33391,\n       * when the real calls count larger than the active calls returned by the pubnub,\n       * we need to pulling the calls manually.\n       */\n      const { activeCalls = [], totalActiveCalls = 0 } = body;\n      if (activeCalls.length !== totalActiveCalls) {\n        this._fetchRemainingCalls();\n      }\n    }\n  }\n\n  get data() {\n    return this.state.data;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const { ownerId } = this._auth;\n    try {\n      const body = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresence)).json();\n      if (this._auth.ownerId === ownerId) {\n        const { activeCalls = [], totalActiveCalls = 0 } = body;\n        this.store.dispatch({\n          ...body,\n          // api get doesn't response 'totalActiveCalls' currently\n          // because not like notification, here 'activeCalls' contains all the calls\n          totalActiveCalls: totalActiveCalls || activeCalls.length,\n          type: this.actionTypes.fetchSuccess,\n          lastDndStatus: this.dndStatus,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}