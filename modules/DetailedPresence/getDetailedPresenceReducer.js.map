{"version":3,"sources":["modules/DetailedPresence/getDetailedPresenceReducer.js"],"names":["getDataReducer","getTelephonyStatusReducer","getDetailedPresenceReducer","removeIntermediateCall","result","activeCall","item","sessionId","direction","push","types","state","type","timestamp","activeCalls","totalActiveCalls","fetchSuccess","notification","length","existingCall","find","call","normalizedCall","startTime","offset","Math","min","resetSuccess","telephonyStatus","reducers","data"],"mappings":";;;;;;;;;;QA0BgBA,c,GAAAA,c;QAyCAC,yB,GAAAA,yB;kBAcQC,0B;;AAjFxB;;AACA;;AACA;;AACA;;;;AACA;;;;AAMA,IAAMC,yBAAyB,mBAAO,UAACC,MAAD,EAASC,UAAT,EAAwB;AAC5D,MACE,CAAC,wCAAmBA,UAAnB,CAAD,IACA,CAAC,iBACC;AAAA,WACEC,KAAKC,SAAL,KAAmBF,WAAWE,SAA9B,IACAD,KAAKE,SAAL,KAAmBH,WAAWG,SAFhC;AAAA,GADD,EAKCJ,MALD,CAFH,EASE;AACAA,WAAOK,IAAP,CAAYJ,UAAZ;AACD;AACD,SAAOD,MAAP;AACD,CAd8B,CAA/B;;AAgBO,SAASJ,cAAT,CAAwBU,KAAxB,EAA+B;AACpC,SAAO,YAKD;AAAA,QALEC,KAKF,uEALU,EAKV;AAAA;AAAA,QAJJC,IAII,QAJJA,IAII;AAAA,QAHJC,SAGI,QAHJA,SAGI;AAAA,gCAFJC,WAEI;AAAA,QAFJA,WAEI,oCAFU,EAEV;AAAA,qCADJC,gBACI;AAAA,QADJA,gBACI,yCADe,CACf;;AACJ,YAAQH,IAAR;AACE,WAAKF,MAAMM,YAAX;AACA,WAAKN,MAAMO,YAAX;AAAyB;AACvB,cAAIH,YAAYI,MAAZ,KAAuBH,gBAA3B,EAA6C;AAC3C,mBAAOJ,KAAP;AACD;AACD,iBAAO,gBAAI,UAACN,UAAD,EAAgB;AACzB,gBAAMc,eAAeR,MAAMS,IAAN,CAAW;AAAA,qBAC9BC,KAAKd,SAAL,KAAmBF,WAAWE,SADA;AAAA,aAAX,CAArB;AAGA,gBAAI,CAACY,YAAL,EAAmB;AACjB,kBAAMG,iBAAiB,wCAAmB,qCAAgBjB,UAAhB,CAAnB,CAAvB;AACA,kBAAMkB,YAAYD,eAAeC,SAAf,IAA4BV,SAA9C;AACA,kBAAMW,SAASC,KAAKC,GAAL,CAASb,YAAYU,SAArB,EAAgC,CAAhC,CAAf;AACA,gDACKD,cADL;AAEEC,oCAFF;AAGEC;AAHF;AAKD;AACD,8CACKL,YADL,EAEK,wCAAmB,qCAAgBd,UAAhB,CAAnB,CAFL;AAID,WAlBM,EAkBJF,uBAAuB,EAAvB,EAA2BW,WAA3B,CAlBI,CAAP;AAmBD;AACD,WAAKJ,MAAMiB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOhB,KAAP;AA7BJ;AA+BD,GArCD;AAsCD;;AAEM,SAASV,yBAAT,CAAmCS,KAAnC,EAA0C;AAC/C,SAAO,YAAqD;AAAA,QAApDC,KAAoD,uEAA5C,IAA4C;AAAA;AAAA,QAApCC,IAAoC,SAApCA,IAAoC;AAAA,sCAA9BgB,eAA8B;AAAA,QAA9BA,eAA8B,yCAAZjB,KAAY;;AAC1D,YAAQC,IAAR;AACE,WAAKF,MAAMM,YAAX;AACA,WAAKN,MAAMO,YAAX;AACE,eAAOW,eAAP;AACF,WAAKlB,MAAMiB,YAAX;AACE,eAAO,IAAP;AACF;AACE,eAAOhB,KAAP;AAPJ;AASD,GAVD;AAWD;;AAEc,SAAST,0BAAT,CAAoCQ,KAApC,EAA0D;AAAA,MAAfmB,QAAe,uEAAJ,EAAI;;AACvE,SAAO,kCAAmBnB,KAAnB,6BACFmB,QADE;AAELC,UAAM9B,eAAeU,KAAf,CAFD;AAGLkB,qBAAiB3B,0BAA0BS,KAA1B;AAHZ,KAAP;AAKD","file":"getDetailedPresenceReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport { find, reduce, map } from 'ramda';\nimport getPresenceReducer from '../Presence/getPresenceReducer';\nimport {\n  normalizeFromTo,\n  normalizeStartTime,\n  isIntermediateCall,\n} from '../../lib/callLogHelpers';\n\nconst removeIntermediateCall = reduce((result, activeCall) => {\n  if (\n    !isIntermediateCall(activeCall) &&\n    !find(\n      item => (\n        item.sessionId === activeCall.sessionId &&\n        item.direction === activeCall.direction\n      ),\n      result\n    )\n  ) {\n    result.push(activeCall);\n  }\n  return result;\n});\n\nexport function getDataReducer(types) {\n  return (state = [], {\n    type,\n    timestamp,\n    activeCalls = [],\n    totalActiveCalls = 0,\n  }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification: {\n        if (activeCalls.length !== totalActiveCalls) {\n          return state;\n        }\n        return map((activeCall) => {\n          const existingCall = state.find(call => (\n            call.sessionId === activeCall.sessionId\n          ));\n          if (!existingCall) {\n            const normalizedCall = normalizeStartTime(normalizeFromTo(activeCall));\n            const startTime = normalizedCall.startTime || timestamp;\n            const offset = Math.min(timestamp - startTime, 0);\n            return {\n              ...normalizedCall,\n              startTime,\n              offset,\n            };\n          }\n          return {\n            ...existingCall,\n            ...normalizeStartTime(normalizeFromTo(activeCall)),\n          };\n        }, removeIntermediateCall([], activeCalls));\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTelephonyStatusReducer(types) {\n  return (state = null, { type, telephonyStatus = state }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification:\n        return telephonyStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDetailedPresenceReducer(types, reducers = {}) {\n  return getPresenceReducer(types, {\n    ...reducers,\n    data: getDataReducer(types),\n    telephonyStatus: getTelephonyStatusReducer(types),\n  });\n}\n"]}