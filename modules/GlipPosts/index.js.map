{"version":3,"sources":["modules/GlipPosts/index.js"],"names":["glipPostsRegExp","subscriptionFilter","DEFAULT_LOAD_TTL","GlipPosts","deps","dep","optional","client","auth","subscription","storage","rolesAndPermissions","loadTtl","options","actionTypes","_reducer","_client","ensureExist","_auth","_rolesAndPermissions","_subscription","_fetchPromises","_lastMessage","_loadTtl","_storage","_readTimeStorageKey","registerReducer","key","reducer","_newPostListeners","listen","push","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_hasPermission","initSuccess","_shouldReset","resetSuccess","_shouldSubscribe","_processSubscription","loggedIn","ready","pending","message","test","event","body","eventType","post","createSuccess","groupId","record","oldRecordId","id","isSendByMe","creatorId","ownerId","forEach","recordCount","lastPosts","postsMap","fetchTime","fetchTimeMap","Date","now","fetchPosts","pageToken","fetch","params","glip","groups","posts","list","response","fetchSuccess","records","lastPageToken","navigation","fetchError","promise","pageInfo","pageInfos","prevPageToken","text","postInputs","mentions","length","mention","matcherId","replace","fakeId","fakeRecord","sendStatus","status","creating","creationTime","create","updatePostInput","createError","fileName","rawFile","platform","service","name","headers","json","console","error","time","updateReadTime","textValue","state","glipPostsStore","moduleStatuses","getItem","fetchTimes","hasGlipPermission","RcModule"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport isBlank from '../../lib/isBlank';\n\nimport actionTypes from './actionTypes';\nimport getReducer, { getGlipPostsReadTimeReducer } from './getReducer';\nimport status from './status';\n\nconst glipPostsRegExp = /glip\\/posts$/;\nconst subscriptionFilter = '/glip/posts';\n\nconst DEFAULT_LOAD_TTL = 30 * 60 * 1000;\n\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    'Subscription',\n    'Storage',\n    'RolesAndPermissions',\n    { dep: 'GlipPostsOptions', optional: true }\n  ]\n})\nexport default class GlipPosts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermission module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   */\n  constructor({\n    client,\n    auth,\n    subscription,\n    storage,\n    rolesAndPermissions,\n    loadTtl = DEFAULT_LOAD_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getReducer(this.actionTypes);\n\n    this._client = this::ensureExist(client, 'client');\n    this._auth = this::ensureExist(auth, 'auth');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._subscription = this::ensureExist(subscription, 'subscription');\n    this._fetchPromises = {};\n    this._lastMessage = null;\n    this._loadTtl = loadTtl;\n\n    this._storage = storage;\n    this._readTimeStorageKey = 'glipPostReadTime';\n    this._storage.registerReducer({\n      key: this._readTimeStorageKey,\n      reducer: getGlipPostsReadTimeReducer(this.actionTypes),\n    });\n    this._newPostListeners = [];\n  }\n\n  addNewPostListener(listen) {\n    if (typeof listen === 'function') {\n      this._newPostListeners.push(listen);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (!this._hasPermission) return;\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._subscription.subscribe(subscriptionFilter);\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n      this._fetchPromises = {};\n    } else if (this._shouldSubscribe()) {\n      this._processSubscription();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      this._rolesAndPermissions.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this._rolesAndPermissions.ready ||\n        !this._subscription.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldSubscribe() {\n    return !!(\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    );\n  }\n\n  _processSubscription() {\n    const { message } = this._subscription;\n    this._lastMessage = message;\n    if (\n      message &&\n      glipPostsRegExp.test(message.event) &&\n      message.body\n    ) {\n      const {\n        eventType,\n        ...post\n      } = message.body;\n      if (eventType === 'PostRemoved') {\n        return;\n      }\n      this.store.dispatch({\n        type: this.actionTypes.createSuccess,\n        groupId: post.groupId,\n        record: post,\n        oldRecordId: post.id,\n        isSendByMe: (post.creatorId === this._auth.ownerId && eventType === 'PostAdded')\n      });\n      if (eventType === 'PostAdded' && post.creatorId !== this._auth.ownerId) {\n        this._newPostListeners.forEach((listen) => {\n          listen(post);\n        });\n      }\n    }\n  }\n\n  async loadPosts(groupId, recordCount = 20) {\n    const lastPosts = this.postsMap[groupId];\n    const fetchTime = this.fetchTimeMap[groupId];\n    if (\n      lastPosts && fetchTime && Date.now() - fetchTime < this._loadTtl\n    ) {\n      return;\n    }\n    await this.fetchPosts(groupId, recordCount);\n  }\n\n  async fetchPosts(groupId, recordCount = 20, pageToken) {\n    if (!groupId) {\n      return;\n    }\n    if (!this._fetchPromises[groupId]) {\n      this._fetchPromises[groupId] = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.fetch,\n          });\n          const params = { recordCount };\n          if (pageToken) {\n            params.pageToken = pageToken;\n          }\n          const response = await this._client.glip().groups(groupId).posts().list(params);\n          this.store.dispatch({\n            type: this.actionTypes.fetchSuccess,\n            groupId,\n            records: response.records,\n            lastPageToken: pageToken,\n            navigation: response.navigation,\n          });\n        } catch (e) {\n          this.store.dispatch({\n            type: this.actionTypes.fetchError,\n          });\n        }\n        this._fetchPromises[groupId] = null;\n      })();\n    }\n    const promise = this._fetchPromises[groupId];\n    await promise;\n  }\n\n  async loadNextPage(groupId, recordCount) {\n    const pageInfo = this.pageInfos[groupId];\n    const pageToken = pageInfo && pageInfo.prevPageToken;\n    if (!pageToken) {\n      return;\n    }\n    await this.fetchPosts(groupId, recordCount, pageToken);\n  }\n\n  async create({ groupId }) {\n    let text = this.postInputs[groupId] && this.postInputs[groupId].text;\n    const mentions = this.postInputs[groupId] && this.postInputs[groupId].mentions;\n    if (isBlank(text) || !groupId) {\n      return;\n    }\n    if (mentions && mentions.length > 0) {\n      mentions.forEach((mention) => {\n        if (!mention.matcherId) {\n          return;\n        }\n        text = text.replace(mention.mention, `![:Person](${mention.matcherId})`);\n      });\n    }\n    const fakeId = `${Date.now()}`;\n    const fakeRecord = {\n      id: fakeId,\n      groupId,\n      creatorId: this._auth.ownerId,\n      sendStatus: status.creating,\n      creationTime: `${new Date(Date.now())}`,\n      text,\n      type: 'TextMessage',\n    };\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.create,\n        groupId,\n        record: fakeRecord,\n      });\n      this.updatePostInput({ text: '', groupId, mentions: [] });\n      const record = await this._client.glip().groups(groupId).posts().post({\n        text,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.createSuccess,\n        groupId,\n        record,\n        oldRecordId: fakeId,\n      });\n    } catch (e) {\n      fakeRecord.sendStatus = status.createError;\n      this.store.dispatch({\n        type: this.actionTypes.createError,\n        record: fakeRecord,\n        groupId,\n        oldRecordId: fakeId,\n      });\n      this.updatePostInput({ text, groupId, mentions });\n    }\n  }\n\n  async sendFile({ fileName, groupId, rawFile }) {\n    try {\n      const platform = this._client.service.platform();\n      const body = rawFile;\n      const response = await platform.post(\n        '/glip/files',\n        body,\n        { groupId, name: fileName },\n        {\n          headers: {\n            'Content-Type': 'application/octet-stream',\n          }\n        }\n      );\n      return response.json();\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  }\n\n  updateReadTime(groupId, time) {\n    this.store.dispatch({\n      type: this.actionTypes.updateReadTime,\n      groupId,\n      time\n    });\n  }\n\n  updatePostInput({ text, groupId, mentions }) {\n    this.store.dispatch({\n      type: this.actionTypes.updatePostInput,\n      groupId,\n      mentions,\n      textValue: text,\n    });\n  }\n\n  get postsMap() {\n    return this.state.glipPostsStore;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get postInputs() {\n    return this.state.postInputs;\n  }\n\n  get readTimeMap() {\n    return this._storage.getItem(this._readTimeStorageKey);\n  }\n\n  get pageInfos() {\n    return this.state.pageInfos;\n  }\n\n  get fetchTimeMap() {\n    return this.state.fetchTimes;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasGlipPermission;\n  }\n}\n"]}