{"version":3,"sources":["modules/GlipPosts/getReducer.js"],"names":["getGlipPostsStatusReducer","getGlipPostsCreateStatusReducer","getGlipPostsStoreReducer","getGlipPostsInputsReducer","getGlipPostsReadTimeReducer","getGlipPostsPageInfoReducer","getGlipPostsFetchTimeReducer","getGlipPostsReducer","types","state","status","idle","type","fetch","fetching","fetchError","fetchSuccess","create","creating","createError","createSuccess","groupId","records","record","oldRecordId","isSendByMe","lastPageToken","newState","newPosts","oldPostIndex","preRecords","concat","findIndex","p","id","splice","creatorId","text","sendStatus","filter","resetSuccess","textValue","mentions","updatePostInput","time","Date","now","updateReadTime","navigation","reducers","fetchStatus","glipPostsStore","createStatus","postInputs","pageInfos","fetchTimes"],"mappings":"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","file":"getReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport status from './status';\n\nexport function getGlipPostsStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetch:\n        return status.fetching;\n      case types.fetchError:\n      case types.fetchSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsCreateStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.create:\n        return status.creating;\n      case types.createError:\n      case types.createSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsStoreReducer(types) {\n  return (state = {}, {\n    type, groupId, records, record, oldRecordId, isSendByMe, lastPageToken\n  }) => {\n    let newState;\n    let newPosts;\n    let oldPostIndex;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        if (!lastPageToken) {\n          newState[groupId] = records;\n        } else {\n          const preRecords = newState[groupId];\n          newState[groupId] = [].concat(preRecords).concat(records);\n        }\n        return newState;\n      case types.create:\n      case types.createSuccess:\n      case types.createError:\n        newState = {\n          ...state,\n        };\n        newPosts = (newState[groupId] && [...newState[groupId]]) || [];\n        if (oldRecordId) {\n          oldPostIndex = newPosts.findIndex(p => p.id === oldRecordId);\n        } else {\n          oldPostIndex = newPosts.findIndex(p => p.id === record.id);\n        }\n        if (oldPostIndex > -1) {\n          newPosts.splice(oldPostIndex, 1, record);\n          newState[groupId] = newPosts;\n        } else if (isSendByMe) {\n          oldPostIndex = newPosts.findIndex(p =>\n            p.creatorId === record.creatorId &&\n            p.text === record.text &&\n            p.sendStatus === status.creating\n          );\n          if (oldPostIndex === -1) {\n            newState[groupId] = [record].concat(newPosts.filter(p => p.id !== record.id));\n          }\n        } else {\n          newState[groupId] = [record].concat(newPosts.filter(p => p.id !== record.id));\n        }\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsInputsReducer(types) {\n  return (state = {}, {\n    type, groupId, textValue, mentions\n  }) => {\n    let newState;\n    switch (type) {\n      case types.updatePostInput:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = {\n          text: textValue,\n          mentions,\n        };\n        return newState;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsReadTimeReducer(types) {\n  return (state = {}, { type, groupId, time = Date.now() }) => {\n    let newState;\n    switch (type) {\n      case types.updateReadTime:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = time;\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsPageInfoReducer(types) {\n  return (state = {}, { type, groupId, navigation }) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = navigation;\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsFetchTimeReducer(types) {\n  return (state = {}, { type, groupId }) => {\n    let newState;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = Date.now();\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getGlipPostsReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    fetchStatus: getGlipPostsStatusReducer(types),\n    glipPostsStore: getGlipPostsStoreReducer(types),\n    createStatus: getGlipPostsCreateStatusReducer(types),\n    postInputs: getGlipPostsInputsReducer(types),\n    pageInfos: getGlipPostsPageInfoReducer(types),\n    fetchTimes: getGlipPostsFetchTimeReducer(types),\n  });\n}\n"]}