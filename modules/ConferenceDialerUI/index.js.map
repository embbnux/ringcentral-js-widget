{"version":3,"sources":["modules/ConferenceDialerUI/index.js"],"names":["ConferenceDialerUI","name","deps","conferenceCall","options","actionTypes","_conferenceCall","_reducer","sessionId","lastSessionId","clearRecipient","clearToNumberField","store","dispatch","type","setLastSessionId","fromSessionId","mergingPair","setMergeParty","state","DialerUI","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQqBA,kB,WANpB,gBAAO;AACNC,QAAM,oBADA;AAENC,QAAM,CACJ,gBADI;AAFA,CAAP,C;;;AAOC,oCAGG;AAAA,QAFDC,cAEC,QAFDA,cAEC;AAAA,QADEC,OACF;AAAA;;AAAA,yLAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,eAAL,GAAuBH,cAAvB;AACA,UAAKI,QAAL,GAAgB,0BAAW,MAAKF,WAAhB,CAAhB;AANC;AAOF;;;;;4GAGsBG,S;;;;;AACrB,oBAAI,KAAKC,aAAL,KAAuBD,SAA3B,EAAsC;AACpC,uBAAKE,cAAL;AACA,uBAAKC,kBAAL;AACD;AACD,qBAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKT,WAAL,CAAiBU,gBADL;AAElBP;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;kCAUYQ,a,EAAe;AAC3B,UACEA,iBACA,KAAKV,eAAL,CAAqBW,WADrB,IAEA,CAAC,KAAKX,eAAL,CAAqBW,WAArB,CAAiCD,aAHpC,EAIE;AACA;AACA,aAAKV,eAAL,CAAqBY,aAArB,CAAmC;AACjCF;AADiC,SAAnC;AAGD;AACF;;;wBAfmB;AAClB,aAAO,KAAKG,KAAL,CAAWV,aAAlB;AACD;;;EA3B6CW,kB,sEAa7CC,iB;kBAbkBrB,kB","file":"index.js","sourcesContent":["import { Module } from 'ringcentral-integration/lib/di';\nimport proxify from 'ringcentral-integration/lib/proxy/proxify';\nimport DialerUI from '../DialerUI';\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\n\n@Module({\n  name: 'ConferenceDialerUI',\n  deps: [\n    'ConferenceCall',\n  ],\n})\nexport default class ConferenceDialerUI extends DialerUI {\n  constructor({\n    conferenceCall,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._conferenceCall = conferenceCall;\n    this._reducer = getReducer(this.actionTypes);\n  }\n\n  @proxify\n  async setLastSessionId(sessionId) {\n    if (this.lastSessionId !== sessionId) {\n      this.clearRecipient();\n      this.clearToNumberField();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.setLastSessionId,\n      sessionId,\n    });\n  }\n\n  get lastSessionId() {\n    return this.state.lastSessionId;\n  }\n\n  _onBeforeCall(fromSessionId) {\n    if (\n      fromSessionId &&\n      this._conferenceCall.mergingPair &&\n      !this._conferenceCall.mergingPair.fromSessionId\n    ) {\n      // set mergingPair if has\n      this._conferenceCall.setMergeParty({\n        fromSessionId\n      });\n    }\n  }\n}\n"]}