{"version":3,"sources":["modules/AccountExtension/index.js"],"names":["extensionRegExp","DEFAULT_TTL","DEFAULT_CHECK_STATUS","DEFAULT_TYPE_LIST","extensionTypes","digitalUser","user","department","AccountExtension","deps","dep","optional","client","rolesAndPermissions","ttl","checkStatus","typeList","options","name","actionTypes","getDataReducer","getTimestampReducer","subscriptionFilters","accountExtension","subscriptionHandler","message","_subscriptionHandleFn","fetchFunction","params","fetchRet","_client","account","extension","list","_extensionFilter","ext","simplifyExtensionData","filter","map","readyCheckFn","_rolesAndPermissions","ready","_checkStatus","_typeList","ensureExist","test","event","body","extensions","item","_processExtension","extensionId","eventType","id","parseInt","_deleteExtension","_fetchExtensionData","extensionData","_addOrDeleteExtension","essential","alreadyExists","isAvailableExtension","extensionNumber","_addExtension","data","store","dispatch","type","add","timestamp","Date","now","delete","get","availableExtensions","permissions","ReadExtensions","DataFetcher","proxify","getter"],"mappings":"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","file":"index.js","sourcesContent":["import { find } from 'ramda';\nimport { createSelector } from 'reselect';\nimport { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport fetchList from '../../lib/fetchList';\nimport ensureExist from '../../lib/ensureExist';\nimport getter from '../../lib/getter';\n\nimport actionTypes from './actionTypes';\nimport {\n  getDataReducer,\n  getTimestampReducer,\n} from './getAccountExtensionReducer';\nimport {\n  isEnabled,\n  isFiltered,\n  simplifyExtensionData,\n  hasExtensionNumber,\n} from './accountExtensionHelper';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport proxify from '../../lib/proxy/proxify';\nimport extensionTypes from '../../enums/extensionTypes';\n\nconst extensionRegExp = /.*\\/extension$/;\nconst DEFAULT_TTL = 24 * 60 * 60 * 1000;\nconst DEFAULT_CHECK_STATUS = true;\n\n// Consider enable all extension types and filter through selector if\n// we'll allow users to configure this through settings\nconst DEFAULT_TYPE_LIST = [\n  extensionTypes.digitalUser,\n  extensionTypes.user,\n  extensionTypes.department,\n  // extensionTypes.limited,\n  // extensionTypes.announcement,\n  // extensionTypes.applicationExtension,\n  // extensionTypes.bot,\n  // extensionTypes.faxUser,\n  // extensionTypes.ivrMenu,\n  // extensionTypes.pagingOnly,\n  // extensionTypes.parkLocation,\n  // extensionTypes.sharedLinesGroup,\n];\n\n/**\n * @class\n * @description Accound extension list managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'AccountExtensionOptions', optional: true }\n  ]\n})\nexport default class AccountExtension extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Number} params.ttl - local cache timestamp, default 24 hours\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ttl = DEFAULT_TTL,\n    checkStatus = DEFAULT_CHECK_STATUS,\n    typeList = DEFAULT_TYPE_LIST,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'accountExtension',\n      client,\n      ttl,\n      actionTypes,\n      getDataReducer,\n      getTimestampReducer,\n      subscriptionFilters: [subscriptionFilters.accountExtension],\n      subscriptionHandler: async (message) => {\n        this._subscriptionHandleFn(message);\n      },\n      fetchFunction: async () => (await fetchList((params) => {\n        const fetchRet = this._client.account().extension().list(params);\n        return fetchRet;\n      })).filter(ext => this._extensionFilter(ext)).map(simplifyExtensionData),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n    });\n\n    this._checkStatus = checkStatus;\n    this._typeList = typeList;\n    this._rolesAndPermissions = this:: ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  _extensionFilter(ext) {\n    return (\n      hasExtensionNumber(ext) &&\n      (!this._checkStatus || isEnabled(ext)) &&\n      !isFiltered(ext, this._typeList)\n    );\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      extensionRegExp.test(message.event) &&\n      message.body &&\n      message.body.extensions\n    ) {\n      for (const item of message.body.extensions) {\n        await this._processExtension(item);\n      }\n    }\n  }\n  async _processExtension(item) {\n    const { extensionId, eventType } = item;\n    const id = parseInt(extensionId, 10);\n    if (eventType === 'Delete') {\n      this._deleteExtension(id);\n    } else if (eventType === 'Create' || eventType === 'Update') {\n      try {\n        const extensionData = await this._fetchExtensionData(id);\n        this._addOrDeleteExtension(extensionData, id);\n      } catch (error) {\n        /* falls through */\n      }\n    } else {\n      // console.warn('unexpect notification eventType:', eventType);\n    }\n  }\n\n  _addOrDeleteExtension(extensionData, extensionId) {\n    const essential = this._extensionFilter(extensionData);\n    const alreadyExists = this.isAvailableExtension(extensionData.extensionNumber);\n    if (essential && !alreadyExists) {\n      this._addExtension(extensionData);\n    } else if (!essential && alreadyExists) {\n      this._deleteExtension(extensionId);\n    }\n  }\n\n  _addExtension(data) {\n    this.store.dispatch({\n      type: this.actionTypes.add,\n      data: simplifyExtensionData(data),\n      timestamp: Date.now(),\n    });\n  }\n\n  _deleteExtension(id) {\n    this.store.dispatch({\n      type: this.actionTypes.delete,\n      id,\n      timestamp: Date.now(),\n    });\n  }\n\n  @proxify\n  async _fetchExtensionData(id) {\n    return this._client.account().extension(id).get();\n  }\n\n  @getter\n  availableExtensions = createSelector(\n    () => this.data,\n    data => data || [],\n  )\n\n  isAvailableExtension(extensionNumber) {\n    return !!find(item => item.ext === extensionNumber, this.availableExtensions);\n  }\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadExtensions;\n  }\n}\n"]}