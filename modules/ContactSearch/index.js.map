{"version":3,"sources":["modules/ContactSearch/index.js"],"names":["AllContactSourceName","DefaultMinimalSearchLength","ContactSearch","deps","dep","optional","auth","storage","storageKey","minimalSearchLength","ttl","options","actionTypes","debouncedSearch","search","_auth","_storage","_storageKey","_minimalSearchLength","_ttl","_searchSources","_searchSourcesFormat","_searchSourcesCheck","_searchIds","_reducer","registerReducer","key","reducer","cache","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_clearStateCache","loginStatus","loggedIn","ready","_readyCheck","dispatch","type","initSuccess","cleanUp","resetSuccess","reset","sourceName","searchFn","readyCheckFn","formatFn","Error","has","set","searchString","length","prepareSearch","_clearTimeout","_timeoutId","setTimeout","searching","state","undefined","searchOnSources","keys","_searchSource","clearTimeout","searchId","uuid","v4","entities","_searchFromCache","_loadSearching","get","_saveSearching","_onSearchError","result","list","sort","current","next","currentName","name","currentPhoneNumber","phoneNumber","nextName","nextPhoneNumber","isSort","indexOf","contactSearch","now","Date","timestamp","searchError","searchSuccess","save","getItem","status","searchStatus","_quickSort","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport loginStatus from '../../modules/Auth/loginStatus';\nimport proxify from '../../lib/proxy/proxify';\nimport debounce from '../../lib/debounce';\nimport actionTypes from './actionTypes';\nimport getContactSearchReducer from './getContactSearchReducer';\nimport getCacheReducer from './getCacheReducer';\n\nexport const AllContactSourceName = 'all';\nexport const DefaultMinimalSearchLength = 3;\n\n/**\n * @class\n * @description Contact search module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Storage',\n    { dep: 'ContactSearchOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n  ]\n})\nexport default class ContactSearch extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {String} params.storageKey - storage key for storage module default \"contactSearchCache\"\n   * @param {Number} params.minimalSearchLength - minimal search text length, default 3 characters\n   * @param {Number} params.ttl - timestamp of local cache, default 5 mins\n   */\n  constructor({\n    auth,\n    storage,\n    storageKey = 'contactSearchCache',\n    minimalSearchLength = DefaultMinimalSearchLength,\n    ttl = 5 * 60 * 1000, // 5 minutes\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._storage = storage;\n    this._storageKey = storageKey;\n    this._minimalSearchLength = minimalSearchLength;\n    this._ttl = ttl;\n    this._searchSources = new Map();\n    this._searchSourcesFormat = new Map();\n    this._searchSourcesCheck = new Map();\n    this._searchIds = {};\n    if (this._storage) {\n      this._reducer = getContactSearchReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getCacheReducer(this.actionTypes)\n      });\n    } else {\n      this._reducer = getContactSearchReducer(this.actionTypes, {\n        cache: getCacheReducer(this.actionTypes),\n      });\n    }\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n      this._clearStateCache();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loginStatus === loginStatus.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._readyCheck() &&\n      !this.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        this._auth.loginStatus !== loginStatus.loggedIn ||\n        (this._storage && !this._storage.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _clearStateCache() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  resetSearchStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n  }\n\n  addSearchSource({\n    sourceName, searchFn, readyCheckFn, formatFn\n  }) {\n    if (!sourceName) {\n      throw new Error('ContactSearch: \"sourceName\" is required.');\n    }\n    if (this._searchSources.has(sourceName)) {\n      throw new Error(`ContactSearch: A search source named \"${sourceName}\" already exists`);\n    }\n    if (this._searchSourcesCheck.has(sourceName)) {\n      throw new Error(`ContactSearch: A search source check named \"${sourceName}\" already exists`);\n    }\n    if (this._searchSourcesFormat.has(sourceName)) {\n      throw new Error(`ContactSearch: A search source format named \"${sourceName}\" already exists`);\n    }\n    if (typeof searchFn !== 'function') {\n      throw new Error('ContactSearch: searchFn must be a function');\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error('ContactSearch: readyCheckFn must be a function');\n    }\n    if (typeof formatFn !== 'function') {\n      throw new Error('ContactSearch: formatFn must be a function');\n    }\n    this._searchSources.set(sourceName, searchFn);\n    this._searchSourcesFormat.set(sourceName, formatFn);\n    this._searchSourcesCheck.set(sourceName, readyCheckFn);\n  }\n\n  debouncedSearch = debounce(this.search, 800, false)\n\n  @proxify\n  async search({ searchString }) {\n    if (!this.ready || !searchString || (searchString.length < this._minimalSearchLength)) {\n      this.store.dispatch({\n        type: this.actionTypes.prepareSearch,\n      });\n      return;\n    }\n    this._clearTimeout();\n    this._timeoutId = setTimeout(async () => {\n      const searching = { ...this.state.searching };\n      await this.search({ searchString: undefined });\n      await this.search(searching);\n    }, this._ttl);\n    const searchOnSources = Array.from(this._searchSources.keys());\n    for (const sourceName of searchOnSources) {\n      await this._searchSource({\n        searchOnSources,\n        sourceName,\n        searchString,\n      });\n    }\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  // TODO Need to refactor, remove cache, and update data in real time.\n  @proxify\n  async _searchSource({ searchOnSources, sourceName, searchString }) {\n    const searchId = uuid.v4();\n    this._searchIds[sourceName] = searchId;\n    this.store.dispatch({\n      type: this.actionTypes.search,\n    });\n    try {\n      let entities = null;\n      entities = this._searchFromCache({ sourceName, searchString });\n      if (entities) {\n        this._loadSearching({ searchOnSources, searchString, entities });\n        return;\n      }\n      entities = await this._searchSources.get(sourceName)({\n        searchString,\n      });\n      entities = this._searchSourcesFormat.get(sourceName)(entities);\n      this._saveSearching({ sourceName, searchString, entities });\n      if (this._searchIds[sourceName] === searchId) {\n        this._loadSearching({ searchOnSources, searchString, entities });\n      }\n    } catch (error) {\n      this._onSearchError();\n    }\n  }\n\n  _quickSort({ result = [], searchString = '' }) {\n    const list = [...result];\n    if (searchString === '') {\n      return list;\n    }\n    return list.sort((current, next) => {\n      const currentName = current.name || '';\n      const currentPhoneNumber = current.phoneNumber || '';\n      const nextName = next.name || '';\n      const nextPhoneNumber = next.phoneNumber || '';\n      const isSort = (\n        currentName.indexOf(searchString) < nextName.indexOf(searchString) ||\n        currentPhoneNumber.indexOf(searchString) < nextPhoneNumber.indexOf(searchString)\n      );\n      return isSort;\n    });\n  }\n\n  _searchFromCache({ sourceName, searchString }) {\n    const key = `${sourceName}-${searchString}`;\n    const searching = this.cache && this.cache.contactSearch && this.cache.contactSearch[key];\n    const now = Date.now();\n    if (searching && (now - searching.timestamp) < this._ttl) {\n      return searching.entities;\n    }\n    return null;\n  }\n\n  _readyCheck() {\n    for (const sourceName of this._searchSourcesCheck.keys()) {\n      if (!this._searchSourcesCheck.get(sourceName)()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _onSearchError() {\n    this.store.dispatch({\n      type: this.actionTypes.searchError,\n    });\n  }\n\n  _loadSearching({ searchOnSources, searchString, entities }) {\n    this.store.dispatch({\n      type: this.actionTypes.searchSuccess,\n      searchOnSources,\n      searchString,\n      entities,\n    });\n  }\n\n  _saveSearching({ sourceName, searchString, entities }) {\n    this.store.dispatch({\n      type: this.actionTypes.save,\n      sourceName,\n      searchString,\n      entities,\n      ttl: this._ttl,\n    });\n  }\n\n  get cache() {\n    return this._storage ?\n      this._storage.getItem(this._storageKey) :\n      this.state.cache;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get searchStatus() {\n    return this.state.searchStatus;\n  }\n\n  get searching() {\n    return this.state.searching;\n  }\n\n  get searchResult() {\n    return this.searching ? this.searching.result : [];\n  }\n\n  get sortedResult() {\n    return this._quickSort(this.searching);\n  }\n}\n"]}