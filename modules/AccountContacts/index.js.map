{"version":3,"sources":["modules/AccountContacts/index.js"],"names":["MaximumBatchGetPresence","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","AccountContacts","deps","dep","optional","client","accountExtension","accountPhoneNumber","ttl","avatarTtl","presenceTtl","avatarQueryInterval","options","actionTypes","_accountExtension","ensureExist","_accountPhoneNumber","_client","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","_reducer","store","subscribe","_onStateChange","_shouldInit","dispatch","type","initSuccess","_shouldReset","resetSuccess","ready","pending","contact","useCache","id","hasProfileImage","imageId","profileImages","Date","now","timestamp","image","imageUrl","account","extension","profileImage","get","response","URL","_response","blob","createObjectURL","fetchImageSuccess","console","error","resolve","presenceId","presences","presence","_getPresenceContexts","push","clearTimeout","enqueueTimeoutId","length","_processQueryPresences","setTimeout","phoneNumber","contacts","entityType","getPresenceContexts","map","x","_batchQueryPresences","responses","presenceMap","forEach","ctx","dndStatus","presenceStatus","telephonyStatus","userStatus","batchFetchPresenceSuccess","presenceSet","ids","join","platform","service","url","multipartResponse","json","item","state","status","RcModule","proxify","getter","availableExtensions","extensionToPhoneNumberMap","extensions","result","sourceName","firstName","lastName","emails","email","extensionNumber","ext","phoneNumbers","phoneType","phoneTypes","profileImageUrl","contactStatus","name","phones","phone","direct"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport { reduce } from 'ramda';\nimport phoneTypes from '../../enums/phoneTypes';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport ensureExist from '../../lib/ensureExist';\nimport { addPhoneToContact, getMatchContacts } from '../../lib/contactHelper';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport proxify from '../../lib/proxy/proxify';\nimport getter from '../../lib/getter';\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\n\nconst MaximumBatchGetPresence = 30;\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'AccountExtension',\n    'AccountPhoneNumber',\n    { dep: 'AccountContactsOptions', optional: true }\n  ]\n})\nexport default class AccountContacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {AccountExtension} params.accountExtension - accountExtension module instance\n   * @param {AccountPhoneNumber} params.accountPhoneNumber - accountPhoneNumber module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.needCheckStatus - If it's necessary to check extension's status\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    accountExtension,\n    accountPhoneNumber,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._accountExtension = this:: ensureExist(accountExtension, 'accountExtension');\n    this._accountPhoneNumber = this:: ensureExist(accountPhoneNumber, 'accountPhoneNumber');\n    this._client = this:: ensureExist(client, 'client');\n\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n\n    this._reducer = getReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._accountExtension.ready &&\n      this._accountPhoneNumber.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._accountExtension.ready ||\n        !this._accountPhoneNumber.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  // interface of contact source\n  @proxify\n  async getProfileImage(contact, useCache = true) {\n    if (!contact || !contact.id || contact.type !== 'company' || !contact.hasProfileImage) {\n      return null;\n    }\n\n    const imageId = contact.id;\n    if (\n      useCache &&\n      this.profileImages[imageId] &&\n      (Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl)\n    ) {\n      const image = this.profileImages[imageId].imageUrl;\n      return image;\n    }\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account()\n        .extension(contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response._response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return imageUrl;\n  }\n\n  // interface of contact source\n  @proxify\n  getPresence(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.id}`;\n      if (\n        useCache &&\n        this.presences[presenceId] &&\n        (Date.now() - this.presences[presenceId].timestamp < this._presenceTtl)\n      ) {\n        const { presence } = this.presences[presenceId];\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  // interface of contact source\n  matchPhoneNumber(phoneNumber) {\n    return getMatchContacts({\n      contacts: this.contacts,\n      phoneNumber,\n      entityType: 'rcContact',\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map(x => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    const presenceMap = {};\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const {\n        dndStatus, presenceStatus, telephonyStatus, userStatus\n      } = response;\n      const presenceId = ctx.contact.id;\n      presenceMap[presenceId] = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      ctx.resolve(presenceMap[presenceId]);\n    });\n    this.store.dispatch({\n      type: this.actionTypes.batchFetchPresenceSuccess,\n      presenceMap,\n      ttl: this._presenceTtl,\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      if (contacts.length === 1) {\n        const { id } = contacts[0];\n        const response = await this._client.account().extension(id).presence().get();\n        presenceSet[id] = response;\n      } else if (contacts.length > 1) {\n        const ids = contacts.map(x => x.id).join(',');\n        const multipartResponse = await batchGetApi({\n          platform: this._client.service.platform(),\n          url: `/account/~/extension/${ids}/presence?detailedTelephonyState=true&sipData=true`,\n        });\n        const responses = multipartResponse.map(x => x.json());\n        responses.forEach((item) => {\n          presenceSet[item.extension.id] = item;\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get presences() {\n    return this.state.presences;\n  }\n\n  // interface of contact source\n  get sourceName() {\n    return 'company';\n  }\n\n  // interface of contact source\n  @getter\n  contacts = createSelector(\n    () => this._accountExtension.availableExtensions,\n    () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n    () => this.profileImages,\n    () => this.presences,\n    (extensions, extensionToPhoneNumberMap, profileImages, presences) => reduce(\n      (result, extension) => {\n        const id = `${extension.id}`;\n        const contact = {\n          type: this.sourceName,\n          id,\n          firstName: extension.contact && extension.contact.firstName,\n          lastName: extension.contact && extension.contact.lastName,\n          emails: extension.contact ? [extension.contact.email] : [],\n          extensionNumber: extension.ext,\n          hasProfileImage: !!extension.hasProfileImage,\n          phoneNumbers: [{ phoneNumber: extension.ext, phoneType: phoneTypes.extension }],\n          profileImageUrl: profileImages[id] && profileImages[id].imageUrl,\n          presence: presences[id] && presences[id].presence,\n          contactStatus: extension.status,\n        };\n        contact.name = `${contact.firstName || ''} ${contact.lastName || ''}`;\n        if (isBlank(contact.extensionNumber)) {\n          return result;\n        }\n        const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n        if (phones && phones.length > 0) {\n          phones.forEach((phone) => {\n            addPhoneToContact(contact, phone.phoneNumber, phoneTypes.direct);\n          });\n        }\n        result.push(contact);\n        return result;\n      },\n      [],\n      extensions,\n    ),\n  )\n\n  get sourceReady() {\n    return this.ready;\n  }\n}\n"]}