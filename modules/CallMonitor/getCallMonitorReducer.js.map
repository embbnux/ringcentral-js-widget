{"version":3,"sources":["modules/CallMonitor/getCallMonitorReducer.js"],"names":["getCallMatchedReducer","getCallMonitorReducer","types","state","type","sessionId","toEntityId","setData","status"],"mappings":";;;;;;;;;;;;;;QAGgBA,qB,GAAAA,qB;kBAaQC,qB;;AAhBxB;;AACA;;;;;;AAEO,SAASD,qBAAT,CAA+BE,KAA/B,EAAsC;AAC3C,SAAO,YAAiD;AAAA,QAAhDC,KAAgD,uEAAxC,EAAwC;AAAA;AAAA,QAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,QAA5BC,SAA4B,QAA5BA,SAA4B;AAAA,QAAjBC,UAAiB,QAAjBA,UAAiB;;AACtD,QAAIF,SAASF,MAAMK,OAAnB,EAA4B;AAC1B,wCACKJ,KADL,oCAEGE,SAFH,EAEeC,UAFf;AAID;AACD,WAAOH,KAAP;AACD,GARD;AASD;;AAED;AACe,SAASF,qBAAT,CAA+BC,KAA/B,EAAsC;AACnD,SAAO,4BAAgB;AACrBM,YAAQ,sCAAuBN,KAAvB;AADa,GAAhB,CAAP;AAGD","file":"getCallMonitorReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nexport function getCallMatchedReducer(types) {\n  return (state = {}, { type, sessionId, toEntityId }) => {\n    if (type === types.setData) {\n      return {\n        ...state,\n        [sessionId]: toEntityId,\n      };\n    }\n    return state;\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallMonitorReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}