{"version":3,"sources":["modules/BlockedNumber/index.js"],"names":["BlockedNumber","deps","dep","optional","client","rolesAndPermissions","options","name","fetchFunction","_client","account","extension","blockedNumber","list","params","readyCheckFn","_rolesAndPermissions","ready","cleanOnReset","ensureExist","permissions","ReadBlockedNumbers","DataFetcher","getter","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAWqBA,a,WAPpB,gBAAO;AACNC,QAAM,CACJ,QADI,EAEJ,qBAFI,EAGJ,EAAEC,KAAK,sBAAP,EAA+BC,UAAU,IAAzC,EAHI;AADA,CAAP,C;;;AAQC;;;;;AAKA,+BAIG;AAAA;;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,mBAEC,QAFDA,mBAEC;AAAA,QADEC,OACF;AAAA;;AAAA,+KAEIA,OAFJ;AAGCC,YAAM,eAHP;AAICH,oBAJD;AAKCI;AAAA,6FAAe;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAY,yBAAU;AAAA,2BACnC,MAAKC,OAAL,CAAaC,OAAb,GAAuBC,SAAvB,GAAmCC,aAAnC,GAAmDC,IAAnD,CAAwDC,MAAxD,CADmC;AAAA,mBAAV,CAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA,SALD;AAQCC,oBAAc;AAAA,eAAM,MAAKC,oBAAL,CAA0BC,KAAhC;AAAA,OARf;AASCC,oBAAc;AATf;;AAAA;;AAYD,UAAKF,oBAAL,GAAkCG,qBAAN,aAAkBd,mBAAlB,EAAuC,qBAAvC,CAA5B;AAZC;AAaF;;;;wBAQoB;AACnB,aAAO,CAAC,CAAC,KAAKW,oBAAL,CAA0BI,WAA1B,CAAsCC,kBAA/C;AACD;;;EAjCwCC,qB,2EAyBxCC,gB;;;;;WACS,8BACR;AAAA,aAAM,OAAKC,IAAX;AAAA,KADQ,EAER;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAFQ,C;;;kBA1BSxB,a","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport fetchList from '../../lib/fetchList';\nimport getter from '../../lib/getter';\nimport ensureExist from '../../lib/ensureExist';\n\n/**\n * @class\n * @description Blocked number list managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'BlockedNumberOptions', optional: true }\n  ]\n})\nexport default class BlockedNumber extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'blockedNumber',\n      client,\n      fetchFunction: async () => fetchList(params => (\n        this._client.account().extension().blockedNumber().list(params)\n      )),\n      readyCheckFn: () => this._rolesAndPermissions.ready,\n      cleanOnReset: true,\n    });\n\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n  }\n\n  @getter\n  numbers = createSelector(\n    () => this.data,\n    data => data || [],\n  )\n\n  get _hasPermission() {\n    return !!this._rolesAndPermissions.permissions.ReadBlockedNumbers;\n  }\n}\n"]}