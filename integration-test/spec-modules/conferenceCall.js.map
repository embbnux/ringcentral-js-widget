{"version":3,"sources":["integration-test/spec-modules/conferenceCall.js"],"names":["mock","auth","client","conferenceCall","alert","account","describe","timeout","mockClient","clientHistoryRequest","ClientHistoryRequest","isLoginSuccess","it","expect","state","conferences","to","be","an","that","is","empty","conferenceCallStatus","equal","idle","after","logout","before","restore","mockForLogin","mockAuthzProfile","console","error","skip","numberParse","sessionData","_makeConference","rawRequest","getRawResponse","endPoints","session","conferenceCallErrors","forEach","messages","err","undefined","_reset","mockForbidden","method","path","makeConferenceFailed","not","bringInToConference","Math","random","direction","callDirection","outbound"],"mappings":"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","file":"conferenceCall.js","sourcesContent":["import {\n  ensureLogin,\n  containsErrorMessage\n} from '../utils/HelpUtil';\nimport {\n  waitInSeconds\n} from '../utils/WaitUtil';\nimport * as mock from '../mock';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport conferenceCallErrors from '../../modules/ConferenceCall/conferenceCallErrors';\nimport conferenceCallStatus from '../../modules/ConferenceCall/conferenceCallStatus';\nimport callingOptions from '../../modules/CallingSettings/callingOptions';\nimport callDirection from '../../enums/callDirections';\nimport sinon from 'sinon';\n\nexport default (auth, client, conferenceCall, alert, account) => {\n  describe('ConferenceCall:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    let isLoginSuccess;\n\n    describe('Should Init Successfully with Default Setting', () => {\n      it('Should Have Empty Records of Conferences By Default', () => {\n        expect(conferenceCall.state.conferences).to.be.an('object').that.is.empty;\n      });\n      it('Should Be Idle By Default', () => {\n        expect(conferenceCall.state.conferenceCallStatus).to.equal(conferenceCallStatus.idle);\n      });\n    });\n\n    describe('Should Update Conference Successfully', function () {\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      before(async function () {\n        mock.restore();\n        mock.mockForLogin({\n          mockAuthzProfile: false\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n        mock.conferenceCall();\n        mock.numberParse({}, 'US');\n      });\n\n      it('Should Update Records of Conferences When Request One', async () => {\n        let sessionData;\n        sessionData = await conferenceCall._makeConference();\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.conferenceCall);\n        expect(JSON.stringify(sessionData)).to.equal(JSON.stringify(rawRequest.session));\n        // FIXME: because we are unable to mock sip.js instance, so skip the session assertation below:        \n        // expect(conferenceCall.conferences).to.have.key(rawRequest.session.id);\n      });\n\n      it('Should Not Have Failure Alert', () => {\n        Object.values(conferenceCallErrors).forEach(err => {\n          expect(containsErrorMessage(\n            alert.state.messages,\n            err\n          )).to.equal(undefined);\n        });\n      });\n    });\n\n    describe('Should Failed to Update Conference', async () => {\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      before(async function () {\n        conferenceCall._reset();\n        mock.restore();\n        mock.mockForLogin({\n          mockAuthzProfile: false\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n        mock.mockForbidden({\n          method: 'POST',\n          path: ClientHistoryRequest.endPoints.conferenceCall\n        });\n        mock.numberParse({}, 'US');\n      });\n\n      it('Should Have No Records of Conference', async () => {\n        await conferenceCall._makeConference(false);\n        expect(conferenceCall.conferences).to.be.an('object').that.is.empty;\n      });\n\n      it('Should Have A Failure Alert', () => {\n        expect(containsErrorMessage(\n          alert.state.messages,\n          conferenceCallErrors.makeConferenceFailed\n        )).to.not.equal(undefined);\n      });\n\n      it('Should Not Bring Session into Non-existent Conference', async () => {\n        try {\n          await conferenceCall.bringInToConference(Math.random(), {\n            direction: callDirection.outbound\n          });\n        } catch (e) {\n          // skip the error that were throwed intentinally\n        }\n        expect(containsErrorMessage(\n          alert.state.messages,\n          conferenceCallErrors.makeConferenceFailed\n        )).to.not.equal(undefined);\n      });\n    });\n  });\n};\n"]}