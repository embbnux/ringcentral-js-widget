{"version":3,"sources":["integration-test/spec-modules/callingSettings.js"],"names":["mock","authzProfileBody","require","auth","client","alert","account","callingSettings","extensionPhoneNumber","extensionInfo","describe","timeout","mockClient","isLoginSuccess","before","mockForLogin","console","error","skip","it","expect","callWith","to","equals","callingOptions","softphone","callingMode","callingModes","setData","myphone","ringout","otherphone","customphone","myLocation","ringoutPrompt","beforeEach","dismissAll","state","messages","length","isAlertClear","callingSettingsMessages","saveSuccessWithSoftphone","not","equal","undefined","saveSuccess","logout","loginStatus","notLoggedIn","restore","myPhoneNumbers","directNumbers","map","item","phoneNumber","mainCompanyNumber","extensionNumber","push","forEach","number","include","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id","callWithOptions","deep"],"mappings":"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","file":"callingSettings.js","sourcesContent":["import callingOptions from '../../modules/CallingSettings/callingOptions';\nimport callingModes from '../../modules/CallingSettings/callingModes';\nimport callingSettingsMessages from '../..//modules/CallingSettings/callingSettingsMessages';\nimport loginStatus from '../../modules/Auth/loginStatus';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual } from '../utils/WaitUtil';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, alert, account, callingSettings, extensionPhoneNumber, extensionInfo) => {\n  describe('Calling Settings', async function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n    let isLoginSuccess;\n\n    describe('When has permission', async function () {\n      this.timeout(20000);\n\n      before(async function () {\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      it('Should Be Make Call with Softphone by Default', async function () {\n        expect(callingSettings.callWith).to.equals(callingOptions.softphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n      });\n\n      describe('Should Save Calling Mode', function () {\n        this.timeout(20000);\n        it('Should Save My RingCentral Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.myphone\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.myphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n        it('Should Save Other Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.otherphone\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.otherphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n        it('Should Save Custom Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.customphone\n          });\n          expect(callingSettings.callWith).to.equals(callingOptions.customphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n      });\n\n      describe('Should Save Options in RingOut Mode', function () {\n        this.timeout(20000);\n        it('Should Save From Number', async function () {\n           callingSettings.setData({\n            myLocation: '123'\n          });\n          expect(callingSettings.myLocation).to.equals('123');\n        });\n        it('Should Save RingoutPrompt', async function () {\n           callingSettings.setData({\n            ringoutPrompt: '123'\n          });\n          expect(callingSettings.ringoutPrompt).to.equals('123');\n        });\n      });\n\n      describe('Should Allow Alert', function () {\n        this.timeout(20000);\n        beforeEach(async function () {\n          const isAlertClear = await waitUntilEqual(() => {\n            alert.dismissAll();\n            return alert.state.messages.length;\n          }, 'Alert', 0, 5);\n          if (!isAlertClear) {\n            console.error('Alert is not cleared after dismissAll');\n            this.skip();\n          }\n        });\n        describe('Should Prompt Alerts when withPrompt Equals True', function () {\n          it('Should Prompt Alert of saveSuccessWithSoftphone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.softphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is Other Phone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.otherphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is My RingCentral Phone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.myphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n          });\n          it('Should Prompt Alert of saveSuccess when Calling Option is Custom Phone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.customphone\n            }, true);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n          });\n\n        });\n        describe('Should Not Prompt Alerts when withPrompt Equals False', function() {\n          it('Should Not Prompt Alert when Calling Option is Softphone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.softphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is My RingCentral Phone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.myphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is Other Phone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.otherphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n          it('Should Not Prompt Alert when Calling Option is Custom Phone', async function () {\n            callingSettings.setData({\n              callWith: callingOptions.customphone\n            }, false);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n            expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n          });\n        });\n      });\n      describe('Should Remember after Logout', function () {\n        this.timeout(20000);\n        it('Should Remember Calling Settings after Re-login', async function () {\n          this.timeout(20000);\n          callingSettings.setData({\n            callWith: callingOptions.customphone,\n            myLocation: '456',\n            ringoutPrompt: '456'\n          });\n          auth.logout();\n          await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.notLoggedIn, 3);\n          mock.restore();\n          mock.mockForLogin();\n          await ensureLogin(auth, account);\n          expect(callingSettings.ringoutPrompt).to.equals('456');\n          expect(callingSettings.myLocation).to.equals('456');\n          expect(callingSettings.callWith).to.equals(callingOptions.customphone);\n          expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n        });\n      });\n      describe('Should Have Required Phone Numbers', function () {\n        this.timeout(20000);\n        it('Should Have My Phone Numbers', async function () {\n          const myPhoneNumbers = extensionPhoneNumber.directNumbers.map(item => item.phoneNumber);\n          const { mainCompanyNumber } = extensionPhoneNumber;\n          const { extensionNumber } = extensionInfo;\n          if (mainCompanyNumber && extensionNumber) {\n            myPhoneNumbers.push(`${mainCompanyNumber.phoneNumber}*${extensionNumber}`);\n          }\n          expect(callingSettings.myPhoneNumbers.length).to.equal(myPhoneNumbers.length);\n          callingSettings.myPhoneNumbers.forEach((number) => {\n            expect(myPhoneNumbers).to.include(number);\n          });\n        });\n        //TODO: Add test cases for Other Phone Numbers\n      });\n    });\n\n    it('Should only include softphone when ReadUserPhoneNumbers is false', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadUserPhoneNumbers')\n      });\n      await ensureLogin(auth, account);\n      expect(callingSettings.callWithOptions).to.deep.equals([callingOptions.softphone]);\n      expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n    });\n\n    it('Should only include softphone when ReadUserForwardingFlipNumbers is false', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadUserForwardingFlipNumbers')\n      });\n      await ensureLogin(auth, account);\n      expect(callingSettings.callWithOptions).to.deep.equals([\n        callingOptions.softphone,\n        callingOptions.myphone,\n        callingOptions.customphone\n      ]);\n    });\n  });\n};\n"]}