{"version":3,"sources":["integration-test/spec-modules/rateLimiter.js"],"names":["auth","alert","account","client","rateLimiter","describe","timeout","conditionalDescribe","isLoginSuccess","skip","console","error","beforeEach","dismissAll","state","messages","length","isAlertClear","it","_requestErrorHandler","Error","expect","errorMessages","rateLimitReached","to","not","equal","undefined"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;kBAEe,UAACA,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,WAA/B,EAA+C;AAC5DC,WAAS,aAAT,2EAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,iBAAKC,OAAL,CAAa,KAAb;AACIC,+BAFkB,GAEIF,QAFJ;AAAA;AAAA,mBAGO,2BAAYL,IAAZ,EAAkBE,OAAlB,CAHP;;AAAA;AAGhBM,0BAHgB;;AAItB,gBAAI,CAACA,cAAL,EAAqB;AACnBD,oCAAsBF,SAASI,IAA/B;AACAC,sBAAQC,KAAR,CAAc,oDAAd,EAAoET,OAApE;AACD;AACDK,gCAAoB,oBAApB,EAA0C,YAAW;AACnD,mBAAKD,OAAL,CAAa,KAAb;AACAM,kGAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACkB,8BAAe,YAAM;AAC9CX,gCAAMY,UAAN;AACA,iCAAOZ,MAAMa,KAAN,CAAYC,QAAZ,CAAqBC,MAA5B;AACD,yBAH0B,EAGxB,OAHwB,EAGf,CAHe,EAGZ,CAHY,CADlB;;AAAA;AACHC,oCADG;;AAKT,4BAAI,CAACA,YAAL,EAAmB;AACjBP,kCAAQC,KAAR,CAAc,uCAAd;AACA,+BAAKF,IAAL;AACD;;AARQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAX;AAUAJ,uBAAS,8CAAT,EAAyD,YAAW;AAClEa,mBAAG,oCAAH,2EAAyC;AAAA;AAAA;AAAA;AAAA;AACvCd,sCAAYe,oBAAZ,CAAiC,IAAIC,KAAJ,CAAU,uBAAV,CAAjC;AACAC,iCAAO,oCAAqBpB,MAAMa,KAAN,CAAYC,QAAjC,EAA2CO,wBAAcC,gBAAzD,CAAP,EAAmFC,EAAnF,CAAsFC,GAAtF,CAA0FC,KAA1F,CAAgGC,SAAhG;;AAFuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAzC;AAID,eALD;AAMD,aAlBD;;AARsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;AA4BD,C","file":"rateLimiter.js","sourcesContent":["import errorMessages from '../..//modules/RateLimiter/errorMessages';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual } from '../utils/WaitUtil';\n\nexport default (auth, alert, account, client, rateLimiter) => {\n  describe('RateLimiter', async function () {\n    this.timeout(20000);\n    let conditionalDescribe = describe;\n    const isLoginSuccess = await ensureLogin(auth, account);\n    if (!isLoginSuccess) {\n      conditionalDescribe = describe.skip;\n      console.error('Skip test case as failed to login with credential ', account);\n    }\n    conditionalDescribe('Should Allow Alert', function() {\n      this.timeout(20000);\n      beforeEach(async function () {\n        const isAlertClear = await waitUntilEqual(() => {\n          alert.dismissAll();\n          return alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n      describe('Should Prompt Alerts when rateLimiter occurs', function() {\n        it('Should Prompt Alert of rateLimiter', async function () {\n          rateLimiter._requestErrorHandler(new Error('Request rate exceeded'));\n          expect(containsErrorMessage(alert.state.messages, errorMessages.rateLimitReached)).to.not.equal(undefined);\n        });\n      });\n    });\n  });\n};\n\n"]}