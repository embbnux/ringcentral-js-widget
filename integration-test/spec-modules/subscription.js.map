{"version":3,"sources":["integration-test/spec-modules/subscription.js"],"names":["mock","auth","client","subscription","account","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","beforeEach","localStorage","clear","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","subscriptionStatus","equal","subscribed","_subscription","not","mockForbidden","method","url","mockSubscription","notSubscribed","cachedSubscription"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;IAAYA,I;;AACZ;;;;AACA;;;;;;;;kBAEe,UAACC,IAAD,EAAOC,MAAP,EAAeC,YAAf,EAA6BC,OAA7B,EAAyC;AACtDC,WAAS,eAAT,EAA0B,YAAY;AAAA;;AACpC,SAAKC,OAAL,CAAa,KAAb;AACAN,SAAKO,UAAL,CAAgBL,MAAhB;;AAEA,QAAIM,uBAAJ;AACA,QAAMC,uBAAuB,IAAIC,8BAAJ,CAAyB,mBAAzB,EAAoCR,MAApC,CAA7B;AACAS,wFAAW;AAAA;AAAA;AAAA;AAAA;AACTC,2BAAaC,KAAb;;AADS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;AAGAC,uFAAU;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJb,KAAKc,QADD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEAd,KAAKe,MAAL,EAFA;;AAAA;AAAA;AAAA,qBAIF,6BAAc,CAAd,CAJE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;AAMAC,OAAG,yCAAH,2EAA8C;AAAA;AAAA;AAAA;AAAA;AAC5CjB,mBAAKkB,OAAL;AACAlB,mBAAKmB,YAAL;AAF4C;AAAA,qBAGrB,2BAAYlB,IAAZ,EAAkBG,OAAlB,CAHqB;;AAAA;AAG5CI,4BAH4C;;AAI5C,kBAAI,CAACA,cAAL,EAAqB;AACnBY,wBAAQC,KAAR,CAAc,oDAAd,EAAoEjB,OAApE;AACA,sBAAKkB,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AAR4C;AAAA,qBAStC,6BAAc,CAAd,CATsC;;AAAA;AAU5CC,qBAAOrB,aAAasB,kBAApB,EAAwCC,KAAxC,CAA8CD,6BAAmBE,UAAjE;AACAH,qBAAOrB,aAAayB,aAApB,EAAmCC,GAAnC,CAAuCH,KAAvC,CAA6C,IAA7C;;AAX4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C;AAaAT,OAAG,8DAAH,2EAAmE;AAAA;AAAA;AAAA;AAAA;AACjEjB,mBAAKkB,OAAL;AACAlB,mBAAK8B,aAAL,CAAmB,EAAEC,QAAQ,MAAV,EAAiBC,KAAK,iDAAtB,EAAnB;AACAhC,mBAAKmB,YAAL,CAAkB,EAAEc,kBAAkB,KAApB,EAAlB;AAHiE;AAAA,qBAI1C,2BAAYhC,IAAZ,EAAkBG,OAAlB,CAJ0C;;AAAA;AAIjEI,4BAJiE;;AAKjE,kBAAI,CAACA,cAAL,EAAqB;AACnBY,wBAAQC,KAAR,CAAc,oDAAd,EAAoEjB,OAApE;AACA,sBAAKkB,IAAL;AACD;;AARgE;AAAA,qBAU3D,6BAAc,CAAd,CAV2D;;AAAA;AAWjEE,qBAAOrB,aAAasB,kBAApB,EAAwCC,KAAxC,CAA8CD,6BAAmBS,aAAjE;AACAV,qBAAOrB,aAAagC,kBAApB,EAAwCT,KAAxC,CAA8C,IAA9C;;AAZiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnE;AAcD,GA1CD;AA2CD,C","file":"subscription.js","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\nimport subscriptionStatus from '../../modules/Subscription/subscriptionStatus';\nimport pubnub from 'pubnub';\n\nexport default (auth, client, subscription, account) => {\n  describe('Subscription:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    beforeEach(async () => {\n      localStorage.clear();\n    });\n    afterEach(async () => {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n    it('Should create subscription successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(3);\n      expect(subscription.subscriptionStatus).equal(subscriptionStatus.subscribed);\n      expect(subscription._subscription).not.equal(null);\n    });\n    it('Should reset cache subscription to null when subscribe error', async () => {\n      mock.restore();\n      mock.mockForbidden({ method: 'POST',url: 'begin:http://whatever/restapi/v1.0/subscription' });\n      mock.mockForLogin({ mockSubscription: false });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      \n      await waitInSeconds(3);\n      expect(subscription.subscriptionStatus).equal(subscriptionStatus.notSubscribed);\n      expect(subscription.cachedSubscription).equal(null);\n    });\n  });\n};\n"]}