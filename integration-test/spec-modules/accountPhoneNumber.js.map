{"version":3,"sources":["integration-test/spec-modules/accountPhoneNumber.js"],"names":["mock","authzProfileBody","require","auth","client","accountPhoneNumber","account","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","before","restore","mockForLogin","console","error","skip","after","logout","it","retries","expect","numbers","length","equal","extensionToPhoneNumberMap","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id"],"mappings":"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","file":"accountPhoneNumber.js","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, accountPhoneNumber, account) => {\n  describe('AccountPhoneNumber:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    describe('when there is ReadCompanyPhoneNumbers permission:', function () {\n      before(async function() {\n        mock.restore();\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      it('Should load numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(accountPhoneNumber.numbers.length).equal(2);\n      });\n\n      it('Should get extensionToPhoneNumberMap', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(Object.keys(accountPhoneNumber.extensionToPhoneNumberMap).length).equal(2);\n      });\n    });\n\n    describe(\"when there isn't ReadCompanyPhoneNumbers permission:\", function () {\n      before(async function() {\n        mock.restore();\n        mock.mockForLogin({ mockAuthzProfile: false });\n        mock.authzProfile({\n          permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadCompanyPhoneNumbers')\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      it('Should not load numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(accountPhoneNumber.numbers.length).equal(0);\n      });\n\n      it('Should not get extensionToPhoneNumberMap', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(Object.keys(accountPhoneNumber.extensionToPhoneNumberMap).length).equal(0);\n      });\n    });\n  });\n};\n"]}