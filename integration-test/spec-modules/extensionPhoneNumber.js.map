{"version":3,"sources":["integration-test/spec-modules/extensionPhoneNumber.js"],"names":["mock","authzProfileBody","require","auth","client","extensionPhoneNumber","account","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","before","restore","mockForLogin","console","error","skip","after","logout","it","retries","expect","numbers","length","equal","mainCompanyNumber","usageType","companyNumbers","directNumbers","callerIdNumbers","smsSenderNumbers","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id","undefined"],"mappings":"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","file":"extensionPhoneNumber.js","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, extensionPhoneNumber, account) => {\n  describe('ExtensionPhoneNumber:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    describe('When has ReadUserPhoneNumbers permission', function () {\n      before(async function () {\n        mock.restore();\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      it('Should load numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.numbers.length).equal(5);\n      });\n\n      it('Should load mainCompanyNumber', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.mainCompanyNumber.usageType).equal('MainCompanyNumber');\n      });\n\n      it('Should load companyNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.companyNumbers.length).equal(1);\n      });\n\n      it('Should load directNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.directNumbers.length).equal(3);\n      });\n\n      it('Should load callerIdNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.callerIdNumbers.length).equal(5);\n      });\n\n      it('Should load smsSenderNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.smsSenderNumbers.length).equal(5);\n      });\n    });\n\n    describe(\"When doesn't have ReadUserPhoneNumbers permission\", function () {\n      before(async function () {\n        mock.restore();\n        mock.mockForLogin({ mockAuthzProfile: false });\n        mock.authzProfile({\n          permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadUserPhoneNumbers')\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      it('Should not load numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.numbers.length).equal(0);\n      });\n\n      it('Should not load mainCompanyNumber', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.mainCompanyNumber).equal(undefined);\n      });\n\n      it('Should not load companyNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.companyNumbers.length).equal(0);\n      });\n\n      it('Should not load directNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.directNumbers.length).equal(0);\n      });\n\n      it('Should not load callerIdNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.callerIdNumbers.length).equal(0);\n      });\n\n      it('Should not load smsSenderNumbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(extensionPhoneNumber.smsSenderNumbers.length).equal(0);\n      });\n    });\n  });\n};\n"]}