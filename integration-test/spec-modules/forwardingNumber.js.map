{"version":3,"sources":["integration-test/spec-modules/forwardingNumber.js"],"names":["mock","authzProfileBody","require","auth","client","forwardingNumber","account","describe","timeout","mockClient","isLoginSuccess","before","restore","mockForLogin","console","error","skip","after","logout","it","retries","expect","numbers","length","equal","flipNumbers","forwardingNumbers","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id","mockForwardingNumber","mockForbidden","url"],"mappings":"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","file":"forwardingNumber.js","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, forwardingNumber, account) => {\n  describe('ForwardingNumber:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    // const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    describe('When has ReadUserForwardingFlipNumbers permission', function () {\n      before(async function () {\n        mock.restore();\n        mock.mockForLogin();\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      it('Should load numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(forwardingNumber.numbers.length).equal(2);\n      });\n\n      it('Should get flip numbers correctly', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(forwardingNumber.flipNumbers.length).equal(2);\n      });\n\n      it('Should get forwarding numbers correctly', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(forwardingNumber.forwardingNumbers.length).equal(1);\n      });\n    });\n\n    describe(\"When doesn't have ReadUserForwardingFlipNumbers permission\", function () {\n      before(async function () {\n        mock.restore();\n        mock.mockForLogin({ mockAuthzProfile: false });\n        mock.authzProfile({\n          permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadUserForwardingFlipNumbers')\n        });\n        isLoginSuccess = await ensureLogin(auth, account);\n        if (!isLoginSuccess) {\n          console.error('Skip test case as failed to login with credential ', account);\n          this.skip();\n        }\n      });\n\n      after(async function () {\n        await auth.logout();\n        await waitInSeconds(1);\n      });\n\n      it('Should not load numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(forwardingNumber.numbers.length).equal(0);\n      });\n\n      it('Should not load flip numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(forwardingNumber.flipNumbers.length).equal(0);\n      });\n\n      it('Should not load forwarding numbers', async () => {\n        this.retries(2);\n        await waitInSeconds(1);\n        expect(forwardingNumber.forwardingNumbers.length).equal(0);\n      });\n    });\n\n    it('Should show insufficientPrivilege when get 403', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockForwardingNumber: false });\n      mock.mockForbidden({ url: 'begin:http://whatever/restapi/v1.0/account/~/extension/~/forwarding-number' });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      await waitInSeconds(1);\n      expect(forwardingNumber.numbers.length).equal(0);\n      await auth.logout();\n      await waitInSeconds(1);\n    });\n  });\n};\n"]}