{"version":3,"sources":["integration-test/spec-modules/rolesAndPermissions.js"],"names":["mock","authzProfileBody","require","auth","client","rolesAndPermissions","account","alert","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","afterEach","loggedIn","logout","it","restore","mockForLogin","console","error","skip","retries","expect","permissions","ReadUserInfo","equal","mockAuthzProfile","authzProfile","filter","p","permission","id","ReadExtensions","undefined","mockForbidden","path","login","state","messages","permissionsMessages","insufficientPrivilege","to","not"],"mappings":"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","file":"rolesAndPermissions.js","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nimport permissionsMessages from '../../modules/RolesAndPermissions/permissionsMessages';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, rolesAndPermissions, account, alert) => {\n  describe('RolesAndPermissions:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      if (auth.loggedIn) {\n        await auth.logout();\n      }\n      await waitInSeconds(1);\n    });\n\n    it('Should load permissions successfully', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(rolesAndPermissions.permissions.ReadUserInfo).equal(true);\n    });\n\n    it('Should not include ReadExtensions permission', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadExtensions')\n      });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(rolesAndPermissions.permissions.ReadExtensions).equal(undefined);\n    });\n\n    it('Should show insufficientPrivilege when get 403', async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.mockForbidden({ path: '/restapi/v1.0/account/~/extension/~/authz-profile' });\n      await auth.login({\n        ...account,\n      });\n      await waitInSeconds(3);\n      expect(auth.loggedIn).equal(false);\n      expect(containsErrorMessage(\n        alert.state.messages, permissionsMessages.insufficientPrivilege\n      )).to.not.equal(undefined);\n    });\n  });\n};\n"]}