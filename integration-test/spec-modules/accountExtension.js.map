{"version":3,"sources":["integration-test/spec-modules/accountExtension.js"],"names":["mock","authzProfileBody","require","auth","client","accountExtension","account","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","afterEach","logout","it","restore","mockForLogin","console","error","skip","retries","expect","availableExtensions","length","equal","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;IAAYA,I;;;;;;AAEZ,IAAMC,mBAAmBC,QAAQ,2BAAR,CAAzB;;kBAEe,UAACC,IAAD,EAAOC,MAAP,EAAeC,gBAAf,EAAiCC,OAAjC,EAA6C;AAC1DC,WAAS,mBAAT,EAA8B,YAAY;AAAA;;AACxC,SAAKC,OAAL,CAAa,KAAb;AACAR,SAAKS,UAAL,CAAgBL,MAAhB;;AAEA,QAAIM,uBAAJ;AACA,QAAMC,uBAAuB,IAAIC,8BAAJ,CAAyB,mBAAzB,EAAoCR,MAApC,CAA7B;;AAEAS,uFAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACFV,KAAKW,MAAL,EADE;;AAAA;AAAA;AAAA,qBAEF,6BAAc,CAAd,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAKAC,OAAG,yEAAH,2EAA8E;AAAA;AAAA;AAAA;AAAA;AAC5Ef,mBAAKgB,OAAL;AACAhB,mBAAKiB,YAAL;AAF4E;AAAA,qBAGrD,2BAAYd,IAAZ,EAAkBG,OAAlB,CAHqD;;AAAA;AAG5EI,4BAH4E;;AAI5E,kBAAI,CAACA,cAAL,EAAqB;AACnBQ,wBAAQC,KAAR,CAAc,oDAAd,EAAoEb,OAApE;AACA,sBAAKc,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AAR4E;AAAA,qBAStE,6BAAc,CAAd,CATsE;;AAAA;AAU5EC,qBAAOjB,iBAAiBkB,mBAAjB,CAAqCC,MAA5C,EAAoDC,KAApD,CAA0D,CAA1D;;AAV4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9E;;AAaAV,OAAG,oEAAH,2EAAyE;AAAA;AAAA;AAAA;AAAA;AACvEf,mBAAKgB,OAAL;AACAhB,mBAAKiB,YAAL,CAAkB,EAAES,kBAAkB,KAApB,EAAlB;AACA1B,mBAAK2B,YAAL,CAAkB;AAChBC,6BAAa3B,iBAAiB2B,WAAjB,CAA6BC,MAA7B,CAAoC;AAAA,yBAAKC,EAAEC,UAAF,CAAaC,EAAb,KAAoB,gBAAzB;AAAA,iBAApC;AADG,eAAlB;AAHuE;AAAA,qBAMhD,2BAAY7B,IAAZ,EAAkBG,OAAlB,CANgD;;AAAA;AAMvEI,4BANuE;;AAOvE,kBAAI,CAACA,cAAL,EAAqB;AACnBQ,wBAAQC,KAAR,CAAc,oDAAd,EAAoEb,OAApE;AACA,sBAAKc,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AAXuE;AAAA,qBAYjE,6BAAc,CAAd,CAZiE;;AAAA;AAavEC,qBAAOjB,iBAAiBkB,mBAAjB,CAAqCC,MAA5C,EAAoDC,KAApD,CAA0D,CAA1D;;AAbuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzE;AAeD,GAxCD;AAyCD,C","file":"accountExtension.js","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, accountExtension, account) => {\n  describe('AccountExtension:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      await auth.logout();\n      await waitInSeconds(1);\n    });\n\n    it('Should load availableExtensions when there is ReadExtensions permission', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(accountExtension.availableExtensions.length).equal(2);\n    });\n\n    it(\"Should not load numbers when there isn't ReadExtensions permission\", async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadExtensions')\n      });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(accountExtension.availableExtensions.length).equal(0);\n    });\n  });\n};\n"]}