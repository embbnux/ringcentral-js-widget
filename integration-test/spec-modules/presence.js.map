{"version":3,"sources":["integration-test/spec-modules/presence.js"],"names":["mock","authzProfileBody","require","auth","client","presence","account","describe","timeout","mockClient","isLoginSuccess","clientHistoryRequest","ClientHistoryRequest","afterEach","logout","it","restore","mockForLogin","console","error","skip","retries","expect","presenceStatus","equal","mockAuthzProfile","authzProfile","permissions","filter","p","permission","id"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;IAAYA,I;;;;;;AAEZ,IAAMC,mBAAmBC,QAAQ,2BAAR,CAAzB;;kBAEe,UAACC,IAAD,EAAOC,MAAP,EAAeC,QAAf,EAAyBC,OAAzB,EAAqC;AAClDC,WAAS,WAAT,EAAsB,YAAY;AAAA;;AAChC,SAAKC,OAAL,CAAa,KAAb;AACAR,SAAKS,UAAL,CAAgBL,MAAhB;;AAEA,QAAIM,uBAAJ;AACA,QAAMC,uBAAuB,IAAIC,8BAAJ,CAAyB,mBAAzB,EAAoCR,MAApC,CAA7B;;AAEAS,uFAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACFV,KAAKW,MAAL,EADE;;AAAA;AAAA;AAAA,qBAEF,6BAAc,CAAd,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAKAC,OAAG,wEAAH,2EAA6E;AAAA;AAAA;AAAA;AAAA;AAC3Ef,mBAAKgB,OAAL;AACAhB,mBAAKiB,YAAL;AAF2E;AAAA,qBAGpD,2BAAYd,IAAZ,EAAkBG,OAAlB,CAHoD;;AAAA;AAG3EI,4BAH2E;;AAI3E,kBAAI,CAACA,cAAL,EAAqB;AACnBQ,wBAAQC,KAAR,CAAc,oDAAd,EAAoEb,OAApE;AACA,sBAAKc,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AAR2E;AAAA,qBASrE,6BAAc,CAAd,CATqE;;AAAA;AAU3EC,qBAAOjB,SAASkB,cAAhB,EAAgCC,KAAhC,CAAsC,WAAtC;;AAV2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7E;;AAaAT,OAAG,+EAAH,2EAAoF;AAAA;AAAA;AAAA;AAAA;AAClFf,mBAAKgB,OAAL;AACAhB,mBAAKiB,YAAL,CAAkB,EAAEQ,kBAAkB,KAApB,EAAlB;AACAzB,mBAAK0B,YAAL,CAAkB;AAChBC,6BAAa1B,iBAAiB0B,WAAjB,CAA6BC,MAA7B,CAAoC;AAAA,yBAAKC,EAAEC,UAAF,CAAaC,EAAb,KAAoB,oBAAzB;AAAA,iBAApC;AADG,eAAlB;AAHkF;AAAA,qBAM3D,2BAAY5B,IAAZ,EAAkBG,OAAlB,CAN2D;;AAAA;AAMlFI,4BANkF;;AAOlF,kBAAI,CAACA,cAAL,EAAqB;AACnBQ,wBAAQC,KAAR,CAAc,oDAAd,EAAoEb,OAApE;AACA,sBAAKc,IAAL;AACD;AACD,oBAAKC,OAAL,CAAa,CAAb;AAXkF;AAAA,qBAY5E,6BAAc,CAAd,CAZ4E;;AAAA;AAalFC,qBAAOjB,SAASkB,cAAhB,EAAgCC,KAAhC,CAAsC,IAAtC;;AAbkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApF;AAeD,GAxCD;AAyCD,C","file":"presence.js","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\nimport * as mock from '../mock';\n\nconst authzProfileBody = require('../mock/data/authzProfile');\n\nexport default (auth, client, presence, account) => {\n  describe('Presence:', function () {\n    this.timeout(20000);\n    mock.mockClient(client);\n\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n\n    afterEach(async function () {\n      await auth.logout();\n      await waitInSeconds(1);\n    });\n\n    it('Should load presenceStatus when there is ReadPresenceStatus permission', async () => {\n      mock.restore();\n      mock.mockForLogin();\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(presence.presenceStatus).equal('Available');\n    });\n\n    it(\"Should not load presenceStatus when there isn't ReadPresenceStatus permission\", async () => {\n      mock.restore();\n      mock.mockForLogin({ mockAuthzProfile: false });\n      mock.authzProfile({\n        permissions: authzProfileBody.permissions.filter(p => p.permission.id !== 'ReadPresenceStatus')\n      });\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n      this.retries(2);\n      await waitInSeconds(1);\n      expect(presence.presenceStatus).equal(null);\n    });\n  });\n};\n"]}