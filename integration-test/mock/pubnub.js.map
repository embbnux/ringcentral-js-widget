{"version":3,"sources":["integration-test/mock/pubnub.js"],"names":["getLastPubnub","pubnubs","MockedPubNub","subscribeKey","_subscribeKey","_realPubnub","RealPubnub","encrypt","decrypt","_channels","_listeners","push","channels","listener","setTimeout","mockedConnected","listen","status","category","operation","msg","pubnubMsg","channel","subscription","undefined","actualChannel","subscribedChannel","timetoken","publisher","message","forEach","l","OPERATIONS","CATEGORIES","length","mockPubnub","id","require","resolve","cache","exports"],"mappings":";;;;;;;;;;;;;;;;;;;QA2DgBA,a,GAAAA,a;;AA3DhB;;;;;;AAEA,IAAMC,UAAU,EAAhB;;IAEaC,Y,WAAAA,Y;AACX,8BAA8B;AAAA,QAAhBC,YAAgB,QAAhBA,YAAgB;AAAA;;AAC5B,SAAKC,aAAL,GAAqBD,YAArB;AACA,SAAKE,WAAL,GAAmB,IAAIC,gBAAJ,CAAe,EAAEH,0BAAF,EAAf,CAAnB;AACA,SAAKI,OAAL,GAAe,KAAKF,WAAL,CAAiBE,OAAhC;AACA,SAAKC,OAAL,GAAe,KAAKH,WAAL,CAAiBG,OAAhC;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACAT,YAAQU,IAAR,CAAa,IAAb;AACD;;;;qCAEuB;AAAA,UAAZC,QAAY,SAAZA,QAAY;;AACtB,WAAKH,SAAL,GAAiBG,QAAjB;AACD;;;gCAEWC,Q,EAAU;AAAA;;AACpB,WAAKH,UAAL,CAAgBC,IAAhB,CAAqBE,QAArB;AACAC,iBAAW;AAAA,eAAM,MAAKC,eAAL,EAAN;AAAA,OAAX,EAAyC,CAAzC;AACD;;;yCAEoB;AACnB,WAAKL,UAAL,GAAkB,EAAlB;AACD;;;8BAES;AACR,WAAKL,WAAL,GAAmB,IAAnB;AACD;;AAED;;;;sCACkB;AAAA;AAAA;AAAA;;AAAA;AAChB,wDAAqB,KAAKK,UAA1B,4GAAsC;AAAA,cAA3BM,MAA2B;;AACpCA,iBAAOC,MAAP,CAAc;AACZC,sBAAU,qBADE;AAEZC,uBAAW;AAFC,WAAd;AAID;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjB;;;gCAEWC,G,EAAK;AACf,UAAMC,YAAY;AAChBC,iBAAS,KAAKb,SAAL,CAAe,CAAf,CADO;AAEhBc,sBAAcC,SAFE;AAGhBC,uBAAe,IAHC;AAIhBC,2BAAmB,KAAKjB,SAAL,CAAe,CAAf,CAJH;AAKhBkB,mBAAW,mBALK;AAMhBC,mBAAWJ,SANK;AAOhBK,iBAAST;AAPO,OAAlB;AASA,WAAKV,UAAL,CAAgBoB,OAAhB,CAAwB;AAAA,eAAKC,EAAEF,OAAF,CAAUR,SAAV,CAAL;AAAA,OAAxB;AACD;;;;;AAGHnB,aAAa8B,UAAb,GAA0B1B,iBAAW0B,UAArC;AACA9B,aAAa+B,UAAb,GAA0B3B,iBAAW2B,UAArC;;AAEO,SAASjC,aAAT,GAAyB;AAC9B,SAAOC,QAAQA,QAAQiC,MAAR,GAAiB,CAAzB,CAAP;AACD;;AAED,SAASC,UAAT,GAAsB;AACpB,MAAMC,KAAKC,QAAQC,OAAR,CAAgB,QAAhB,CAAX;AACA,MAAID,QAAQE,KAAR,CAAcH,EAAd,CAAJ,EAAuB;AACrBC,YAAQE,KAAR,CAAcH,EAAd,EAAkBI,OAAlB,GAA4BtC,YAA5B;AACD;AACF;;AAEDiC","file":"pubnub.js","sourcesContent":["import RealPubnub from 'pubnub';\n\nconst pubnubs = [];\n\nexport class MockedPubNub {\n  constructor({ subscribeKey }) {\n    this._subscribeKey = subscribeKey;\n    this._realPubnub = new RealPubnub({ subscribeKey });\n    this.encrypt = this._realPubnub.encrypt;\n    this.decrypt = this._realPubnub.decrypt;\n    this._channels = [];\n    this._listeners = [];\n    pubnubs.push(this);\n  }\n\n  subscribe({ channels }) {\n    this._channels = channels;\n  }\n\n  addListener(listener) {\n    this._listeners.push(listener);\n    setTimeout(() => this.mockedConnected(), 0);\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  destroy() {\n    this._realPubnub = null;\n  }\n\n  // Methods to do mocking operations\n  mockedConnected() {\n    for (const listen of this._listeners) {\n      listen.status({\n        category: 'PNConnectedCategory',\n        operation: 'PNSubscribeOperation'\n      });\n    }\n  }\n\n  mockMessage(msg) {\n    const pubnubMsg = {\n      channel: this._channels[0],\n      subscription: undefined,\n      actualChannel: null,\n      subscribedChannel: this._channels[0],\n      timetoken: '14933652238078468',\n      publisher: undefined,\n      message: msg\n    };\n    this._listeners.forEach(l => l.message(pubnubMsg));\n  }\n}\n\nMockedPubNub.OPERATIONS = RealPubnub.OPERATIONS;\nMockedPubNub.CATEGORIES = RealPubnub.CATEGORIES;\n\nexport function getLastPubnub() {\n  return pubnubs[pubnubs.length - 1];\n}\n\nfunction mockPubnub() {\n  const id = require.resolve('pubnub');\n  if (require.cache[id]) {\n    require.cache[id].exports = MockedPubNub;\n  }\n}\n\nmockPubnub();\n"]}