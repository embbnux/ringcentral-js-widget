{"version":3,"sources":["integration-test/mock/index.js"],"names":["createSDK","mockApi","authentication","logout","tokenRefresh","presence","presenceUpdate","dialingPlan","extensionInfo","conferenceCallBringIn","removeFromConference","extensionList","accountInfo","apiInfo","messageSync","messageList","updateMessageStatus","authzProfile","blockedNumber","forwardingNumber","phoneNumber","accountPhoneNumber","subscription","numberParser","sms","addressBook","callLog","device","conferencing","numberParse","conferenceCall","updateConferenceCall","terminateConferenceCall","activeCalls","restore","reset","mockForbidden","mockClient","ringOut","ringOutUpdate","meeting","serviceInfo","recentActivity","mockForLogin","mockServer","options","opts","appKey","appSecret","server","Request","fetchMock","constructor","Response","Headers","fetch","bind","refreshDelayMs","redirectUri","cachePrefix","RingCentral","method","path","url","body","status","statusText","headers","isOnce","responseHeaders","isJson","mockUrl","mock","once","sendAsJson","times","access_token","token_type","expires_in","refresh_token","refresh_token_expires_in","scope","expireTime","Date","getTime","owner_id","endpoint_id","failure","message","error_description","description","id","mockResponse","uri","extension","extensionNumber","presenceStatus","telephonyStatus","userStatus","dndStatus","extensionId","presenceBody","dialingPlanBody","extensionBody","conferenceCallBringInBody","partyId","extensionListBody","accountBody","apiInfoBody","messageSyncBody","messageListBody","messageItemBody","authzProfileBody","blockedNumberBody","forwardingNumberBody","phoneNumberBody","accountPhoneNumberBody","subscriptionBody","numberParserBody","smsBody","addressBookBody","syncInfo","syncType","syncToken","syncTime","now","toISOString","callLogBody","records","startTime","deviceBody","conferencingBody","homeCountry","numberParseBody","conferenceCallBody","session","on","activeCallsBody","client","service","ringOutBody","meetingBody","serviceInfoBody","RegExp","mockAuthzProfile","mockExtensionInfo","mockForwardingNumber","mockMessageSync","mockConferencing","mockActiveCalls","mockUpdateConference","mockNumberParser","mockRecentActivity","params","dialingPlanData","extensionInfoData","accountInfoData","apiInfoData","authzProfileData","deviceData","extensionListData","accountPhoneNumberData","blockedNumberData","forwardingNumberData","messageListData","messageSyncData","phoneNumberData","subscriptionData","callLogData","addressBookData","conferencingData","activeCallsData","numberParseData","numberParseIsOnce","updateConferenceCallBody"],"mappings":"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","file":"index.js","sourcesContent":["import fetchMock from 'fetch-mock';\nimport RingCentral from 'ringcentral';\n\nimport dialingPlanBody from './data/dialingPlan';\nimport extensionBody from './data/extensionInfo';\nimport extensionListBody from './data/extension';\nimport accountBody from './data/accountInfo';\nimport subscriptionBody from './data/subscription';\nimport apiInfoBody from './data/apiInfo';\nimport messageSyncBody from './data/messageSync';\nimport authzProfileBody from './data/authzProfile';\nimport blockedNumberBody from './data/blockedNumber';\nimport forwardingNumberBody from './data/forwardingNumber';\nimport phoneNumberBody from './data/phoneNumber';\nimport accountPhoneNumberBody from './data/accountPhoneNumber';\nimport presenceBody from './data/presence.json';\nimport numberParserBody from './data/numberParser.json';\nimport smsBody from './data/sms.json';\nimport ringOutBody from './data/ringOut.json';\nimport messageItemBody from './data/messageItem.json';\nimport messageListBody from './data/messageList.json';\nimport addressBookBody from './data/addressBook.json';\nimport callLogBody from './data/callLog.json';\nimport deviceBody from './data/device.json';\nimport conferencingBody from './data/conferencing.json';\nimport activeCallsBody from './data/activeCalls.json';\nimport meetingBody from './data/meeting';\nimport serviceInfoBody from './data/serviceInfo';\nimport conferenceCallBody from './data/conferenceCall';\nimport numberParseBody from './data/numberParse';\nimport conferenceCallBringInBody from './data/conferenceCallBringIn';\nimport updateConferenceCallBody from './data/updateConference';\n\nconst mockServer = 'http://whatever';\nexport function createSDK(options = {}) {\n  const opts = {\n    ...options,\n    appKey: 'test key',\n    appSecret: 'test secret',\n    server: mockServer,\n    Request: fetchMock.constructor.Request,\n    Response: fetchMock.constructor.Response,\n    Headers: fetchMock.constructor.Headers,\n    fetch: fetchMock.fetchMock.bind(fetchMock),\n    refreshDelayMs: 1,\n    redirectUri: 'http://foo',\n    cachePrefix: 'sdkPrefix',\n  };\n  return new RingCentral(opts);\n}\n\nexport function mockApi({\n  method = 'GET',\n  path,\n  server = mockServer,\n  url,\n  body = {},\n  status = 200,\n  statusText = 'OK',\n  headers,\n  isOnce = true,\n}) {\n  let responseHeaders;\n  const isJson = typeof body !== 'string';\n  if (isJson && !headers) {\n    responseHeaders = {\n      'Content-Type': 'application/json'\n    };\n  } else {\n    responseHeaders = headers;\n  }\n  let mockUrl;\n  if (url) {\n    mockUrl = url;\n  } else {\n    mockUrl = `${server}${path}`;\n  }\n  const mock = isOnce ? fetchMock.once.bind(fetchMock) : fetchMock.mock.bind(fetchMock);\n  mock(mockUrl, {\n    body: isJson ? JSON.stringify(body) : body,\n    status,\n    statusText,\n    headers: responseHeaders,\n    sendAsJson: false\n  }, {\n    method,\n    times: isOnce ? 1 : 20,\n  });\n}\n\nexport function authentication() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/token',\n    body: {\n      access_token: 'ACCESS_TOKEN',\n      token_type: 'bearer',\n      expires_in: 3600,\n      refresh_token: 'REFRESH_TOKEN',\n      refresh_token_expires_in: 60480,\n      scope: 'SMS RCM Foo Boo',\n      expireTime: new Date().getTime() + 3600000,\n      owner_id: '23231231\"',\n      endpoint_id: '3213213131',\n    }\n  });\n}\n\nexport function logout() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/revoke',\n    isOnce: false,\n  });\n}\n\nexport function tokenRefresh(failure) {\n  if (!failure) {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        access_token: 'ACCESS_TOKEN_FROM_REFRESH',\n        token_type: 'bearer',\n        expires_in: 3600,\n        refresh_token: 'REFRESH_TOKEN_FROM_REFRESH',\n        refresh_token_expires_in: 60480,\n        scope: 'SMS RCM Foo Boo'\n      }\n    });\n  } else {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        message: 'Wrong token',\n        error_description: 'Wrong token',\n        description: 'Wrong token'\n      },\n      status: 400,\n    });\n  }\n}\n\nexport function presence(id, mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/${id}/presence`,\n    body: {\n      uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}/presence`,\n      extension: {\n        uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}`,\n        extensionNumber: '101',\n        id,\n      },\n      activeCalls: [],\n      presenceStatus: 'Available',\n      telephonyStatus: 'Ringing',\n      userStatus: 'Available',\n      dndStatus: 'TakeAllCalls',\n      extensionId: id,\n      ...mockResponse\n    }\n  });\n}\n\nexport function presenceUpdate(id, mockResponse = {}) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/extension/${id}/presence`,\n    method: 'PUT',\n    body: {\n      ...presenceBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function dialingPlan(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/dialing-plan?perPage=MAX&page=1',\n    body: {\n      ...dialingPlanBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function extensionInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~',\n    body: {\n      ...extensionBody,\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function conferenceCallBringIn(id, mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/bring-in`,\n    body: {\n      ...conferenceCallBringInBody,\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\nexport function removeFromConference(id, partyId) {\n  mockApi({\n    method: 'DELETE',\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}/parties/${partyId}`\n  });\n}\nexport function extensionList(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension?`,\n    body: {\n      ...extensionListBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~',\n    body: {\n      ...accountBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function apiInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0',\n    body: {\n      ...apiInfoBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function messageSync(mockResponse = {}, isOnce = true) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-sync`,\n    body: {\n      ...messageSyncBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function messageList(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-store?`,\n    body: {\n      ...messageListBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function updateMessageStatus(mockResponse = {}, isOnce = true) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-store/`,\n    method: 'PUT',\n    body: {\n      ...messageItemBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function authzProfile(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/authz-profile',\n    body: {\n      ...authzProfileBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function blockedNumber(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/blocked-number',\n    body: {\n      ...blockedNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function forwardingNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/forwarding-number`,\n    body: {\n      ...forwardingNumberBody,\n      ...mockResponse\n    }\n  });\n}\n\nexport function phoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/phone-number`,\n    body: {\n      ...phoneNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountPhoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/phone-number`,\n    body: {\n      ...accountPhoneNumberBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function subscription(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n  mockApi({\n    method: 'PUT',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n  mockApi({\n    method: 'DELETE',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function numberParser(mockResponse = {}, isOnce = true) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/number-parser/`,\n    body: {\n      ...numberParserBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function sms(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/account/~/extension/~/sms',\n    body: {\n      ...smsBody,\n      ...mockResponse,\n    }\n  });\n}\nexport function addressBook(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/address-book-sync`,\n    body: {\n      ...addressBookBody,\n      ...{\n        syncInfo: {\n          syncType: addressBookBody.syncInfo.syncType,\n          syncToken: addressBookBody.syncInfo.syncToken,\n          syncTime: ((new Date(Date.now()))).toISOString()\n        }\n      },\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\n\nexport function callLog(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/call-log-sync`,\n    body: {\n      ...callLogBody,\n      records: [\n        {\n          ...callLogBody.records[0],\n          startTime: ((new Date(Date.now()))).toISOString(),\n        },\n        {\n          ...callLogBody.records[1],\n          startTime: ((new Date(Date.now()))).toISOString(),\n        }\n      ],\n      ...{\n        syncInfo: {\n          syncType: callLogBody.syncInfo.syncType,\n          syncToken: callLogBody.syncInfo.syncToken,\n          syncTime: ((new Date(Date.now()))).toISOString()\n        }\n      },\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function device(mockResponse = {}, isOnce = true) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/device`,\n    body: {\n      ...deviceBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function conferencing(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/conferencing',\n    body: {\n      ...conferencingBody,\n      ...mockResponse,\n    }\n  });\n}\n\n// TODO: replace it with numberParser\nexport function numberParse(mockResponse = {}, homeCountry) {\n  mockApi({\n    method: 'POST',\n    path: `/restapi/v1.0/number-parser/parse?homeCountry=${homeCountry}`,\n    body: {\n      ...numberParseBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function conferenceCall(mockResponse = {}) {\n  conferenceCallBody.session.on = () => { };\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/account/~/telephony/conference',\n    body: {\n      ...conferenceCallBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function updateConferenceCall(id, mockResponse = {}, isOnce = false) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}`,\n    body: {\n      // ...conferenceCallBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\n\nexport function terminateConferenceCall(id, mockResponse = {}) {\n  mockApi({\n    method: 'DELETE',\n    path: `/restapi/v1.0/account/~/telephony/sessions/${id}`,\n    body: {\n      ...conferenceCallBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function activeCalls(mockResponse = {}) {\n  mockApi({\n    method: 'GET',\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/active-calls`,\n    body: {\n      ...activeCallsBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function restore() {\n  fetchMock.restore();\n}\n\nexport function reset() {\n  fetchMock.reset();\n}\n\nexport function mockForbidden({\n  method = 'GET',\n  path,\n  url,\n  body = ''\n}) {\n  mockApi({\n    method,\n    path,\n    body,\n    url,\n    status: 403,\n  });\n}\n\nexport function mockClient(client) {\n  client.service = createSDK({});\n}\n\nexport function ringOut(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    method: 'POST',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/ring-out`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function ringOutUpdate(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/ring-out/`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\nexport function meeting(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/meeting`,\n    body: {\n      ...meetingBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\nexport function serviceInfo(mockResponse = {}) {\n  mockApi({\n    method: 'GET',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/meeting/service-info`,\n    body: {\n      ...serviceInfoBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\nexport function recentActivity(mockResponse = {}, isOnce = false) {\n  mockApi({\n    method: 'GET',\n    url: new RegExp(`${mockServer}/restapi/v1.0/account/~/extension/~/call-log`),\n    body: {\n      ...callLogBody,\n      ...mockResponse,\n    },\n    isOnce\n  });\n}\nexport function mockForLogin({\n  mockAuthzProfile = true,\n  mockExtensionInfo = true,\n  mockForwardingNumber = true,\n  mockMessageSync = true,\n  mockConferencing = true,\n  mockActiveCalls = true,\n  mockUpdateConference = false,\n  mockNumberParser = true,\n  mockRecentActivity = true,\n  ...params\n} = {}) {\n  authentication();\n  logout();\n  tokenRefresh();\n  presence('~');\n  dialingPlan(params.dialingPlanData);\n  if (mockExtensionInfo) {\n    extensionInfo(params.extensionInfoData);\n  }\n  accountInfo(params.accountInfoData);\n  apiInfo(params.apiInfoData);\n  if (mockAuthzProfile) {\n    authzProfile(params.authzProfileData);\n  }\n  device(params.deviceData);\n  extensionList(params.extensionListData);\n  accountPhoneNumber(params.accountPhoneNumberData);\n  blockedNumber(params.blockedNumberData);\n  if (mockForwardingNumber) {\n    forwardingNumber(params.forwardingNumberData);\n  }\n  messageList(params.messageListData);\n  if (mockMessageSync) {\n    messageSync(params.messageSyncData);\n  }\n  phoneNumber(params.phoneNumberData);\n  subscription(params.subscriptionData);\n  callLog(params.callLogData);\n  addressBook(params.addressBookData);\n  if (mockConferencing) {\n    conferencing(params.conferencingData);\n  }\n  if (mockActiveCalls) {\n    activeCalls(params.activeCallsData);\n  }\n  if (mockNumberParser) {\n    numberParser(params.numberParseData, params.numberParseIsOnce);\n  }\n  if (mockUpdateConference) {\n    conferenceCall();\n    updateConferenceCall(updateConferenceCallBody.id, updateConferenceCallBody);\n  }\n  if (mockRecentActivity) {\n    recentActivity();\n  }\n}\n"]}