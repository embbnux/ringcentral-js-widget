{"version":3,"sources":["integration-test/utils/WaitUtil.js"],"names":["waitUntilNotNull","waitUntilEqual","waitUntilObjectSizeGreaterThan","waitInSeconds","isTimeOut","startTime","timeoutInSeconds","Date","now","source","checkItem","resolve","timer","setInterval","clearInterval","console","error","checkValue","undefined","e","expect","compareSize","log","length","seconds","setTimeout"],"mappings":";;;;;;;;;;QAIgBA,gB,GAAAA,gB;QAsBAC,c,GAAAA,c;QAsBAC,8B,GAAAA,8B;QAsBAC,a,GAAAA,a;;;;AAtEhB,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,gBAA9B,EAAgD;AAC9C,SAAOC,KAAKC,GAAL,KAAaH,SAAb,GAAyBC,mBAAmB,IAAnD;AACD;;AAEM,SAASN,gBAAT,CAA0BS,MAA1B,EAAkCC,SAAlC,EAA6CJ,gBAA7C,EAA+D;AACpE,MAAMD,YAAYE,KAAKC,GAAL,EAAlB;AACA,SAAO,sBAAY,UAACG,OAAD,EAAa;AAC9B,QAAMC,QAAQC,YAAY,YAAM;AAC9B,UAAIT,UAAUC,SAAV,EAAqBC,gBAArB,CAAJ,EAA4C;AAC1CQ,sBAAcF,KAAd;AACAD,gBAAQ,KAAR;AACAI,gBAAQC,KAAR,uBAAkCN,SAAlC;AACD;AACD,UAAI;AACF,YAAMO,aAAaR,QAAnB;AACA,YAAIQ,eAAe,IAAf,IAAuBA,eAAeC,SAA1C,EAAqD;AACnDJ,wBAAcF,KAAd;AACAD,kBAAQ,IAAR;AACD;AACF,OAND,CAME,OAAOQ,CAAP,EAAU;AACVJ,gBAAQC,KAAR,CAAcG,CAAd;AACD;AACF,KAfa,EAeX,GAfW,CAAd;AAgBD,GAjBM,CAAP;AAkBD;;AAEM,SAASlB,cAAT,CAAwBQ,MAAxB,EAAgCC,SAAhC,EAA2CU,MAA3C,EAAmDd,gBAAnD,EAAqE;AAC1E,MAAMD,YAAYE,KAAKC,GAAL,EAAlB;AACA,SAAO,sBAAY,UAACG,OAAD,EAAa;AAC9B,QAAMC,QAAQC,YAAY,YAAM;AAC9B,UAAIT,UAAUC,SAAV,EAAqBC,gBAArB,CAAJ,EAA4C;AAC1CQ,sBAAcF,KAAd;AACAD,gBAAQ,KAAR;AACAI,gBAAQC,KAAR,uBAAkCN,SAAlC,gBAAsDU,MAAtD;AACD;AACD,UAAI;AACF,YAAMH,aAAaR,QAAnB;AACA,YAAIQ,eAAeG,MAAnB,EAA2B;AACzBN,wBAAcF,KAAd;AACAD,kBAAQ,IAAR;AACD;AACF,OAND,CAME,OAAOQ,CAAP,EAAU;AACVJ,gBAAQC,KAAR,CAAcG,CAAd;AACD;AACF,KAfa,EAeX,GAfW,CAAd;AAgBD,GAjBM,CAAP;AAkBD;;AAEM,SAASjB,8BAAT,CAAwCO,MAAxC,EAAgDC,SAAhD,EAA2DW,WAA3D,EAAwEf,gBAAxE,EAA0F;AAC/F,MAAMD,YAAYE,KAAKC,GAAL,EAAlB;AACA,SAAO,sBAAY,UAACG,OAAD,EAAa;AAC9B,QAAMC,QAAQC,YAAY,YAAM;AAC9B,UAAIT,UAAUC,SAAV,EAAqBC,gBAArB,CAAJ,EAA4C;AAC1CQ,sBAAcF,KAAd;AACAD,gBAAQ,KAAR;AACAI,gBAAQO,GAAR,uBAAgCZ,SAAhC;AACD;AACD,UAAI;AACF,YAAMO,aAAaR,QAAnB;AACA,YAAIQ,eAAe,IAAf,IAAuBA,WAAWM,MAAX,GAAoBF,WAA/C,EAA4D;AAC1DP,wBAAcF,KAAd;AACAD,kBAAQ,IAAR;AACD;AACF,OAND,CAME,OAAOQ,CAAP,EAAU;AACVJ,gBAAQO,GAAR,CAAYH,CAAZ;AACD;AACF,KAfa,EAeX,GAfW,CAAd;AAgBD,GAjBM,CAAP;AAkBD;;AAEM,SAAShB,aAAT,CAAuBqB,OAAvB,EAAgC;AACrC,SAAO,sBAAY,UAACb,OAAD,EAAa;AAC9Bc,eAAW,YAAM;AACfd,cAAQ,IAAR;AACD,KAFD,EAEGa,UAAU,IAFb;AAGD,GAJM,CAAP;AAKD","file":"WaitUtil.js","sourcesContent":["function isTimeOut(startTime, timeoutInSeconds) {\n  return Date.now() - startTime > timeoutInSeconds * 1000;\n}\n\nexport function waitUntilNotNull(source, checkItem, timeoutInSeconds) {\n  const startTime = Date.now();\n  return new Promise((resolve) => {\n    const timer = setInterval(() => {\n      if (isTimeOut(startTime, timeoutInSeconds)) {\n        clearInterval(timer);\n        resolve(false);\n        console.error(`Timeout wait for ${checkItem}  to be not null`);\n      }\n      try {\n        const checkValue = source();\n        if (checkValue !== null && checkValue !== undefined) {\n          clearInterval(timer);\n          resolve(true);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 500);\n  });\n}\n\nexport function waitUntilEqual(source, checkItem, expect, timeoutInSeconds) {\n  const startTime = Date.now();\n  return new Promise((resolve) => {\n    const timer = setInterval(() => {\n      if (isTimeOut(startTime, timeoutInSeconds)) {\n        clearInterval(timer);\n        resolve(false);\n        console.error(`Timeout wait for ${checkItem}  to be ${expect}`);\n      }\n      try {\n        const checkValue = source();\n        if (checkValue === expect) {\n          clearInterval(timer);\n          resolve(true);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 500);\n  });\n}\n\nexport function waitUntilObjectSizeGreaterThan(source, checkItem, compareSize, timeoutInSeconds) {\n  const startTime = Date.now();\n  return new Promise((resolve) => {\n    const timer = setInterval(() => {\n      if (isTimeOut(startTime, timeoutInSeconds)) {\n        clearInterval(timer);\n        resolve(false);\n        console.log(`Timeout wait for ${checkItem} to be not null`);\n      }\n      try {\n        const checkValue = source();\n        if (checkValue !== null && checkValue.length > compareSize) {\n          clearInterval(timer);\n          resolve(true);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }, 500);\n  });\n}\n\nexport function waitInSeconds(seconds) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(null);\n    }, seconds * 1000);\n  });\n}\n\n"]}