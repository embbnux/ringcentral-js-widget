{"version":3,"sources":["integration-test/commons/Phone/index.js"],"names":["createPhone","BasePhone","providers","provide","useFactory","sdkConfig","RingCentralClient","SDK","deps","dep","useParam","useClass","Alert","Brand","Softphone","Locale","DateTimeFormat","TabManager","GlobalStorage","LocaleSettings","Environment","Auth","Ringout","ConnectivityMonitor","RateLimiter","Storage","AudioSettings","AccountExtension","AccountInfo","ExtensionDevice","ExtensionInfo","RolesAndPermissions","DialingPlan","ExtensionPhoneNumber","ForwardingNumber","RegionSettings","NumberValidate","CallingSettings","Call","Subscription","ActiveCalls","DetailedPresence","MessageSender","ComposeText","MessageStore","Conversations","Conference","CallLog","CallHistory","AccountPhoneNumber","AccountContacts","AddressBook","Contacts","QuickAccess","addressBook","accountContacts","ContactDetails","ContactMatcher","RecentMessages","RecentCalls","Meeting","Webphone","ContactSearch","CallMonitor","UserGuide","ActiveCallControl","useValue","disableAllowInactiveTabsWrite","spread","daySpan","conversationsLoadLength","conversationLoadLength","enableLoadOldMessages","showMMSAttachment","ConferenceCall","BlockedNumber","options","ringout","webphone","callingSettings","routerInteraction","callMonitor","contactSearch","contacts","contactMatcher","conferenceCall","phoneNumber","countryCode","regionSettings","areaCode","RcModule","prefix","version","apiConfig","brandConfig","Phone","cachePrefix","clearCacheOnRefreshError","appKey","appName","appVersion","webphoneLogLevel","create"],"mappings":"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AAA,QAIjBC,QAJiB,GAYfF,OAZe,CAIjBE,QAJiB;AAAA,QAKjBC,eALiB,GAYfH,OAZe,CAKjBG,eALiB;AAAA,QAMjBC,iBANiB,GAYfJ,OAZe,CAMjBI,iBANiB;AAAA,QAOjBC,WAPiB,GAYfL,OAZe,CAOjBK,WAPiB;AAAA,QAQjBC,aARiB,GAYfN,OAZe,CAQjBM,aARiB;AAAA,QASjBC,QATiB,GAYfP,OAZe,CASjBO,QATiB;AAAA,QAUjBC,cAViB,GAYfR,OAZe,CAUjBQ,cAViB;AAAA,QAWjBC,cAXiB,GAYfT,OAZe,CAWjBS,cAXiB;;AAcnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnMmB;AAoMpB;;;;qCAEgBC,W,EAAa;AAC5B,aAAO,+BAAgB;AACrBA,gCADqB;AAErBC,qBAAa,KAAKC,cAAL,CAAoBD,WAFZ;AAGrBE,kBAAU,KAAKD,cAAL,CAAoBC;AAHT,OAAhB,CAAP;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAEmB;AACjB;AACA,aAAO,IAAP;AACD;;;EA3QoCC,kB;kBAAlBzF,S;AA8Qd,SAASD,WAAT,QAKJ;AAAA;;AAAA,2BAJD2F,MAIC;AAAA,MAJDA,MAIC,gCAJQ,IAIR;AAAA,4BAHDC,OAGC;AAAA,MAHDA,OAGC,iCAHS,OAGT;AAAA,MAFDC,SAEC,SAFDA,SAEC;AAAA,MADDC,WACC,SADDA,WACC;AAAA,MAmDKC,KAnDL,YACF,uBAAc;AACb7F,eAAW,CACT;AACEC,eAAS,eADX;AAEE+D,gBAAU;AACRyB;AADQ,OAFZ;AAKEvB,cAAQ;AALV,KADS,EAQT;AACEjE,eAAS,WADX;AAEE+D,2CACK2B,SADL;AAEEG,qBAAa,QAFf;AAGEC,kCAA0B;AAH5B;AAFF,KARS,EAgBT;AACE9F,eAAS,oBADX;AAEE+D,gBAAU;AACR7D,8CACKwF,SADL;AAEEG,uBAAa,QAFf;AAGEC,oCAA0B;AAH5B;AADQ,OAFZ;AASE7B,cAAQ;AATV,KAhBS,EA2BT;AACEjE,eAAS,cADX;AAEEiE,cAAQ,IAFV;AAGEF,gBAAU4B;AAHZ,KA3BS,EAgCT;AACE3F,eAAS,iBADX;AAEEiE,cAAQ,IAFV;AAGEF,gBAAU;AACR;AACAgC,gBAAQ,kEAFA;AAGRC,iBAASL,YAAYK,OAHb;AAIRC,oBAAYR,OAJJ;AAKRS,0BAAkB;AALV;AAHZ,KAhCS,EA2CT;AACElG,eAAS,SADX;AAEEC,kBAAY;AAAA,eAAMwF,OAAN;AAAA;AAFd,KA3CS;AADE,GAAd,CADE;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAmDmB3F,SAnDnB;;AAoDH,SAAO8F,MAAMO,MAAN,EAAP;AACC","file":"index.js","sourcesContent":["import SDK from 'ringcentral';\nimport RingCentralClient from 'ringcentral-client';\n\nimport { ModuleFactory } from '../../../lib/di';\nimport RcModule from '../../../lib/RcModule';\n\nimport callingOptions from '../../../modules/CallingSettings/callingOptions';\nimport AccountContacts from '../../../modules/AccountContacts';\nimport AccountExtension from '../../../modules/AccountExtension';\nimport AccountInfo from '../../../modules/AccountInfo';\nimport AccountPhoneNumber from '../../../modules/AccountPhoneNumber';\nimport AddressBook from '../../../modules/AddressBook';\nimport Alert from '../../../modules/Alert';\nimport Auth from '../../../modules/Auth';\nimport Brand from '../../../modules/Brand';\nimport Call from '../../../modules/Call';\nimport CallingSettings from '../../../modules/CallingSettings';\nimport Contacts from '../../../modules/Contacts';\nimport ContactDetails from '../../../modules/ContactDetails';\nimport ConnectivityMonitor from '../../../modules/ConnectivityMonitor';\nimport DialingPlan from '../../../modules/DialingPlan';\nimport ExtensionDevice from '../../../modules/ExtensionDevice';\nimport Environment from '../../../modules/Environment';\nimport ExtensionInfo from '../../../modules/ExtensionInfo';\nimport ExtensionPhoneNumber from '../../../modules/ExtensionPhoneNumber';\nimport ForwardingNumber from '../../../modules/ForwardingNumber';\nimport GlobalStorage from '../../../modules/GlobalStorage';\nimport Locale from '../../../modules/Locale';\nimport RateLimiter from '../../../modules/RateLimiter';\nimport RegionSettings from '../../../modules/RegionSettings';\nimport Ringout from '../../../modules/Ringout';\nimport Webphone from '../../../modules/Webphone';\nimport RolesAndPermissions from '../../../modules/RolesAndPermissions';\nimport Softphone from '../../../modules/Softphone';\nimport Storage from '../../../modules/Storage';\nimport Subscription from '../../../modules/Subscription';\nimport TabManager from '../../../modules/TabManager';\nimport NumberValidate from '../../../modules/NumberValidate';\nimport MessageSender from '../../../modules/MessageSender';\nimport ComposeText from '../../../modules/ComposeText';\nimport MessageStore from '../../../modules/MessageStore';\nimport Conversations from '../../../modules/Conversations';\nimport ContactSearch from '../../../modules/ContactSearch';\nimport DateTimeFormat from '../../../modules/DateTimeFormat';\nimport Conference from '../../../modules/Conference';\nimport ConferenceCall from '../../../modules/ConferenceCall';\nimport QuickAccess from '../../../modules/QuickAccess';\nimport ActiveCallControl from '../../../modules/ActiveCallControl';\n\nimport ActiveCalls from '../../../modules/ActiveCalls';\nimport DetailedPresence from '../../../modules/DetailedPresence';\nimport CallLog from '../../../modules/CallLog';\nimport CallMonitor from '../../../modules/CallMonitor';\nimport CallHistory from '../../../modules/CallHistory';\nimport RecentMessages from '../../../modules/RecentMessages';\nimport RecentCalls from '../../../modules/RecentCalls';\nimport AudioSettings from '../../../modules/AudioSettings';\nimport Meeting from '../../../modules/Meeting';\nimport LocaleSettings from '../../../modules/LocaleSettings';\nimport ContactMatcher from '../../../modules/ContactMatcher';\nimport UserGuide from '../../../modules/UserGuide';\n\nimport normalizeNumber from '../../../lib/normalizeNumber';\nimport ringoutStatus from '../../../modules/Ringout/ringoutStatus';\nimport softphoneStatus from '../../../modules/Softphone/softphoneStatus';\nimport callingModes from '../../../modules/CallingSettings/callingModes';\nimport BlockedNumber from '../../../modules/BlockedNumber';\n\n@ModuleFactory({\n  providers: [\n    {\n      provide: 'Client',\n      useFactory: ({ sdkConfig }) => (\n        new RingCentralClient(new SDK(sdkConfig))\n      ),\n      deps: [\n        { dep: 'SdkConfig', useParam: true, },\n      ],\n    },\n    { provide: 'Alert', useClass: Alert },\n    { provide: 'Brand', useClass: Brand },\n    { provide: 'Softphone', useClass: Softphone },\n    { provide: 'Locale', useClass: Locale },\n    { provide: 'DateTimeFormat', useClass: DateTimeFormat },\n    { provide: 'TabManager', useClass: TabManager },\n    { provide: 'GlobalStorage', useClass: GlobalStorage },\n    { provide: 'LocaleSettings', useClass: LocaleSettings },\n    { provide: 'Environment', useClass: Environment },\n    { provide: 'Auth', useClass: Auth },\n    { provide: 'Ringout', useClass: Ringout },\n    { provide: 'ConnectivityMonitor', useClass: ConnectivityMonitor },\n    { provide: 'RateLimiter', useClass: RateLimiter },\n    { provide: 'Storage', useClass: Storage },\n    { provide: 'AudioSettings', useClass: AudioSettings },\n    { provide: 'AccountExtension', useClass: AccountExtension },\n    { provide: 'AccountInfo', useClass: AccountInfo },\n    { provide: 'ExtensionDevice', useClass: ExtensionDevice },\n    { provide: 'ExtensionInfo', useClass: ExtensionInfo },\n    { provide: 'RolesAndPermissions', useClass: RolesAndPermissions },\n    { provide: 'DialingPlan', useClass: DialingPlan },\n    { provide: 'ExtensionPhoneNumber', useClass: ExtensionPhoneNumber },\n    { provide: 'ForwardingNumber', useClass: ForwardingNumber },\n    { provide: 'RegionSettings', useClass: RegionSettings },\n    { provide: 'NumberValidate', useClass: NumberValidate },\n    { provide: 'CallingSettings', useClass: CallingSettings },\n    { provide: 'Call', useClass: Call },\n    { provide: 'Subscription', useClass: Subscription },\n    { provide: 'ActiveCalls', useClass: ActiveCalls },\n    { provide: 'DetailedPresence', useClass: DetailedPresence },\n    { provide: 'MessageSender', useClass: MessageSender },\n    { provide: 'ComposeText', useClass: ComposeText },\n    { provide: 'MessageStore', useClass: MessageStore },\n    { provide: 'Conversations', useClass: Conversations },\n    { provide: 'Conference', useClass: Conference },\n    { provide: 'CallLog', useClass: CallLog },\n    { provide: 'CallHistory', useClass: CallHistory },\n    { provide: 'AccountPhoneNumber', useClass: AccountPhoneNumber },\n    { provide: 'AccountContacts', useClass: AccountContacts },\n    { provide: 'AddressBook', useClass: AddressBook },\n    { provide: 'Contacts', useClass: Contacts },\n    { provide: 'QuickAccess', useClass: QuickAccess },\n    {\n      provide: 'ContactSources',\n      deps: ['AddressBook', 'AccountContacts'],\n      useFactory: ({ addressBook, accountContacts }) => ([\n        addressBook,\n        accountContacts,\n      ])\n    },\n    { provide: 'ContactDetails', useClass: ContactDetails },\n    { provide: 'ContactMatcher', useClass: ContactMatcher },\n    { provide: 'RecentMessages', useClass: RecentMessages },\n    { provide: 'RecentCalls', useClass: RecentCalls },\n    { provide: 'Meeting', useClass: Meeting },\n    { provide: 'Webphone', useClass: Webphone },\n    { provide: 'ContactSearch', useClass: ContactSearch },\n    { provide: 'CallMonitor', useClass: CallMonitor },\n    { provide: 'UserGuide', useClass: UserGuide },\n    { provide: 'ActiveCallControl', useClass: ActiveCallControl },\n    {\n      provide: 'StorageOptions',\n      useValue: {\n        // StorageProvider: LocalForageStorage, // IndexedDB\n        disableAllowInactiveTabsWrite: true,\n      },\n      spread: true\n    },\n    {\n      provide: 'MessageStoreOptions',\n      useValue: {\n        daySpan: 90,\n        conversationsLoadLength: 10,\n        conversationLoadLength: 15,\n      },\n      spread: true\n    },\n    {\n      provide: 'ConversationsOptions',\n      useValue: {\n        enableLoadOldMessages: true,\n        showMMSAttachment: true,\n      },\n      spread: true\n    },\n    { provide: 'ConferenceCall', useClass: ConferenceCall },\n    // {\n    // provide: 'ConferenceCallOptions',\n    // useValue: {\n    // pulling: false,\n    // },\n    // spread: true,\n    // },\n    { provide: 'BlockedNumber', useClass: BlockedNumber }\n  ]\n})\nexport default class BasePhone extends RcModule {\n  constructor(options) {\n    super(options);\n    const {\n      ringout,\n      webphone,\n      callingSettings,\n      routerInteraction,\n      callMonitor,\n      contactSearch,\n      contacts,\n      contactMatcher,\n      conferenceCall,\n    } = options;\n\n    //     contactSearch.addSearchSource({\n    //       sourceName: 'contacts',\n    //       searchFn({ searchString }) {\n    //         const items = contacts.allContacts;\n    //         if (!searchString) {\n    //           return items;\n    //         }\n    //         const searchText = searchString.toLowerCase();\n    //         const result = [];\n    //         items.forEach((item) => {\n    //           const name = item.name || `${item.firstName} ${item.lastName}`;\n    //           item.phoneNumbers.forEach((p) => {\n    //             if (\n    //               name.toLowerCase().indexOf(searchText) >= 0 ||\n    // p.phoneNumber.indexOf(searchText) >= 0\n    //             ) {\n    //               result.push({\n    //                 id: `${item.id}${p.phoneNumber}`,\n    //                 name,\n    //                 type: item.type,\n    //                 phoneNumber: p.phoneNumber,\n    //                 phoneType: p.phoneType.replace('Phone', ''),\n    //                 entityType: 'contact',\n    //               });\n    //             }\n    //           });\n    //         });\n    //         return result;\n    //       },\n    //       formatFn: entities => entities,\n    //       readyCheckFn: () => contacts.ready,\n    //     });\n    //     contactMatcher.addSearchProvider({\n    //       name: 'contacts',\n    //       searchFn: async ({ queries }) => contacts.matchContacts({ phoneNumbers: queries }),\n    //       readyCheckFn: () => contacts.ready,\n    //     });\n\n    //     // Webphone configuration\n    //     webphone.onCallEnd((session, currentSession, ringSession) => {\n    //       const callsOnholdReg = /^\\/conferenceCall\\/callsOnhold\\/(.+)\\/(.+)$/;\n    //       const execCallsOnhold = callsOnholdReg.exec(routerInteraction.currentPath);\n\n    //       if (execCallsOnhold) {\n    //         const fromSessionIdOfCallsOnhold = execCallsOnhold[2];\n    //         if (!currentSession || session.id === currentSession.id) {\n    //           routerInteraction.go(-2);\n    //           return;\n    //         }\n    //         if (session.id === fromSessionIdOfCallsOnhold) {\n    //           routerInteraction.replace('/calls/active');\n    //           return;\n    //         }\n    //       }\n\n    //       const withinCallCtrl = !![\n    //         '/calls/active',\n    //         '/conferenceCall/dialer/',\n    //         '/conferenceCall/callsOnhold',\n    //         '/conferenceCall/participants',\n    //       ].find(path => routerInteraction.currentPath.indexOf(path) === 0);\n\n    //       if (\n    //         withinCallCtrl\n    // && (!currentSession || session.id === currentSession.id)\n    // && !ringSession\n    //       ) {\n    //         if (!currentSession) {\n    //           routerInteraction.replace('/dialer');\n    //           return;\n    //         }\n    //         if (routerInteraction.currentPath.indexOf('/calls/active') === -1) {\n    //           routerInteraction.replace('/calls/active');\n    //           return;\n    //         }\n    //         if (conferenceCall.isMerging) {\n    //           // Do nothing, let the merge() to do the jump\n    //           return;\n    //         }\n    //         routerInteraction.goBack();\n    //         return;\n    //       }\n\n    //       if (\n    //         currentSession\n    // && currentSession.id !== session.id\n    // && routerInteraction.currentPath === `/calls/active/${session.id}`\n    //       ) {\n    //         routerInteraction.replace(`/calls/active/${currentSession.id}`);\n    //         return;\n    //       }\n\n    //       if (!currentSession && ringSession) {\n    //         routerInteraction.push('/calls');\n    //       }\n    //     });\n\n    //     webphone.onCallStart((session) => {\n    //       const path = `/calls/active/${session.id}`;\n    //       if (routerInteraction.currentPath !== path) {\n    //         if (routerInteraction.currentPath.indexOf('/calls/active') === 0) {\n    //           routerInteraction.replace(path);\n    //         } else {\n    //           routerInteraction.push(path);\n    //         }\n    //       }\n    //     });\n\n    //     webphone.onCallRing(() => {\n    //       if (webphone.ringSessions.length > 1) {\n    //         if (routerInteraction.currentPath !== '/calls') {\n    //           routerInteraction.push('/calls');\n    //         }\n    //         webphone.ringSessions.forEach((session) => {\n    //           if (!session.minimized) {\n    //             webphone.toggleMinimized(session.id);\n    //           }\n    //         });\n    //       }\n    //     });\n\n    //     webphone.onBeforeCallResume((session) => {\n    //       const sessionId = session && session.id;\n    //       const mergingPair = conferenceCall && conferenceCall.mergingPair;\n    //       if (mergingPair && sessionId !== mergingPair.toSessionId) {\n    //         // close merging pair to close the merge call.\n    //         conferenceCall.closeMergingPair();\n    //       }\n    //     });\n\n    //     webphone.onBeforeCallEnd((session) => {\n    //       const mergingPair = conferenceCall && conferenceCall.mergingPair;\n    //       if (\n    //         session\n    // && mergingPair\n    // && (Object.values(mergingPair).indexOf(session.id) !== -1)\n    //       ) {\n    //         // close merging pair to close the merge call.\n    //         conferenceCall.closeMergingPair();\n    //       }\n    //     });\n\n    //     conferenceCall.onMergeSuccess((conferenceData) => {\n    //       routerInteraction.push(`/calls/active/${conferenceData.sessionId}`);\n    //     });\n\n    //     // CallMonitor configuration\n    //     this._softphoneConnectTime = null;\n    //     this._softphoneConnectNumber = null;\n\n    //     callMonitor._onRinging = (call) => {\n    //       // auto nav rules\n    //       if (\n    //         callingSettings.callingMode !== callingModes.webphone // not webRTC mode\n    // && routerInteraction.currentPath === '/dialer'\n    // && (\n    // // for ringout\n    //   ringout.ringoutStatus === ringoutStatus.connecting\n    // // for softphone\n    // || (\n    //   this._softphoneConnectTime && call && call.to\n    // && (new Date() - this._softphoneConnectTime) < 1 * 60 * 1000 // in 1 minute\n    // && this._normalizeNumber(call.to.phoneNumber)\n    // === this._normalizeNumber(this._softphoneConnectNumber)\n    // )\n    // )\n    //       ) {\n    //         routerInteraction.push('/calls');\n    //         this._softphoneConnectTime = null;\n    //         this._softphoneConnectNumber = null;\n    //       }\n    //     };\n\n    //     const phone = this;\n    //     callMonitor._onCallEnded = () => {\n    //       if (\n    //         routerInteraction.currentPath === '/calls'\n    // && !hasActiveCalls(phone)\n    //       ) {\n    //         routerInteraction.replace('/dialer');\n    //       }\n    //     };\n  }\n\n  _normalizeNumber(phoneNumber) {\n    return normalizeNumber({\n      phoneNumber,\n      countryCode: this.regionSettings.countryCode,\n      areaCode: this.regionSettings.areaCode,\n    });\n  }\n\n  //   initialize() {\n  //     const { rolesAndPermissions } = this;\n  //     this.store.subscribe(() => {\n  //       if (this.auth.ready) {\n  //         if (\n  //           this.routerInteraction.currentPath !== '/'\n  // && !this.auth.loggedIn\n  //         ) {\n  //           this.routerInteraction.push('/');\n  //         } else if (\n  //           this.routerInteraction.currentPath === '/'\n  // && this.auth.loggedIn\n  // && rolesAndPermissions.ready\n  //         ) {\n  //           // Determine default tab\n  //           const showDialPad = rolesAndPermissions.callingEnabled;\n  //           const showCalls = (\n  //             rolesAndPermissions.callingEnabled\n  // && this.callingSettings.ready\n  // && this.callingSettings.callWith !== callingOptions.browser\n  //           );\n  //           const showHistory = rolesAndPermissions.permissions.ReadCallLog;\n  //           const showContact = rolesAndPermissions.callingEnabled;\n  //           const showComposeText = rolesAndPermissions.hasComposeTextPermission;\n  //           const showMessages = rolesAndPermissions.hasReadMessagesPermission;\n  //           const showConference = rolesAndPermissions.permissions.OrganizeConference;\n  //           const showMeeting = rolesAndPermissions.permissions.Meetings;\n  //           if (showDialPad) {\n  //             this.routerInteraction.push('/dialer');\n  //           } else if (showCalls) {\n  //             this.routerInteraction.push('/calls');\n  //           } else if (showHistory) {\n  //             this.routerInteraction.push('/history');\n  //           } else if (showMessages) {\n  //             this.routerInteraction.push('/messages');\n  //           } else if (showComposeText) {\n  //             this.routerInteraction.push('/composeText');\n  //           } else if (showContact) {\n  //             this.routerInteraction.push('/contacts');\n  //           } else if (showMeeting) {\n  //             this.routerInteraction.push('/meeting');\n  //           } else if (showConference) {\n  //             this.routerInteraction.push('/conference');\n  //           } else {\n  //             this.routerInteraction.push('/settings');\n  //           }\n  //         } else if (\n  //           this.routerInteraction.currentPath === '/dialer'\n  // && this.softphone.softphoneStatus === softphoneStatus.connecting\n  //         ) {\n  //           this._softphoneConnectTime = new Date();\n  //           this._softphoneConnectNumber = this.softphone.connectingPhoneNumber;\n  //         }\n  //       }\n  //     });\n  //   }\n\n  get _actionTypes() {\n    /* no action types */\n    return null;\n  }\n}\n\nexport function createPhone({\n  prefix = 'rc',\n  version = '0.1.0',\n  apiConfig,\n  brandConfig,\n}) {\n@ModuleFactory({\n  providers: [\n    {\n      provide: 'ModuleOptions',\n      useValue: {\n        prefix\n      },\n      spread: true\n    },\n    {\n      provide: 'SdkConfig',\n      useValue: {\n        ...apiConfig,\n        cachePrefix: 'sdk-rc',\n        clearCacheOnRefreshError: false,\n      },\n    },\n    {\n      provide: 'EnvironmentOptions',\n      useValue: {\n        sdkConfig: {\n          ...apiConfig,\n          cachePrefix: 'sdk-rc',\n          clearCacheOnRefreshError: false,\n        },\n      },\n      spread: true,\n    },\n    {\n      provide: 'BrandOptions',\n      spread: true,\n      useValue: brandConfig,\n    },\n    {\n      provide: 'WebphoneOptions',\n      spread: true,\n      useValue: {\n        // appKey: apiConfig.appKey,\n        appKey: 'eac8797af1b3502F2CEAAEECAC3Ed378AA7858A386656f28A008b0c638A754B1',\n        appName: brandConfig.appName,\n        appVersion: version,\n        webphoneLogLevel: 1,\n      },\n    },\n    {\n      provide: 'Version',\n      useFactory: () => version,\n    },\n  ]\n})\n  class Phone extends BasePhone { }\nreturn Phone.create();\n}\n"]}