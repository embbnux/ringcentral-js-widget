{"version":3,"sources":["lib/oAuthProxy/index.js"],"names":["loginWindow","window","location","href","query","prefix","hash","oAuthCallback","callbackUri","parent","postMessage","addEventListener","data","oAuthUri","trim","parsedUri","state","set","toString","key","e","newValue","localStorage","removeItem","proxyLoaded","error","close"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,cAAc,IAAlB;;aAOI,wBAAMC,OAAOC,QAAP,CAAgBC,IAAtB,EAA4B,IAA5B,C;0BAJFC,K;uCACEC,M;IAAAA,M,uCAAS,I;qCACTC,I;IAAAA,I,qCAAO,2B;;AAIX;;;;;;;;AAMAL,OAAOM,aAAP,GAAuB,UAACC,WAAD,EAAiB;AACtCP,SAAOQ,MAAP,CAAcC,WAAd,CAA0B;AACxBF;AADwB,GAA1B,EAEG,GAFH;AAGD,CAJD;;AAMAP,OAAOU,gBAAP,CAAwB,SAAxB,EAAmC,gBAAmB;AAAA,uBAAhBC,IAAgB;AAAA,MAAhBA,IAAgB,6BAAT,EAAS;AAAA,MAElDC,QAFkD,GAGhDD,IAHgD,CAElDC,QAFkD;;AAIpD,MAAIA,YAAYA,SAASC,IAAT,OAAoB,EAApC,EAAwC;AACtC,QAAMC,YAAY,wBAAMF,QAAN,EAAgB,IAAhB,CAAlB;AADsC,QAE9BT,KAF8B,GAEpBW,SAFoB,CAE9BX,KAF8B;;AAGtCA,UAAMY,KAAN,GAAiBZ,MAAMY,KAAvB,SAAgCX,MAAhC,SAA0CC,IAA1C;AACAS,cAAUE,GAAV,CAAc,OAAd,EAAuBb,KAAvB;AACAJ,kBAAc,yBAAUe,UAAUG,QAAV,EAAV,EAAmCb,MAAnC,aAAmD,GAAnD,EAAwD,GAAxD,CAAd;AACD;AACF,CAXD;;AAaA,IAAMc,MAASd,MAAT,SAAmBC,IAAnB,iBAAN;AACAL,OAAOU,gBAAP,CAAwB,SAAxB,EAAmC,UAACS,CAAD,EAAO;AACxC,MAAIA,EAAED,GAAF,KAAUA,GAAV,IAAiBC,EAAEC,QAAnB,IAA+BD,EAAEC,QAAF,KAAe,EAAlD,EAAsD;AACpD,QAAMb,cAAcY,EAAEC,QAAtB;AACAC,iBAAaC,UAAb,CAAwBJ,GAAxB;AACAlB,WAAOQ,MAAP,CAAcC,WAAd,CAA0B;AACxBF;AADwB,KAA1B,EAEG,GAFH;AAGD;AACF,CARD;;AAUA,IAAI;AACFP,SAAOQ,MAAP,CAAcC,WAAd,CAA0B;AACxBc,iBAAa;AADW,GAA1B,EAEG,GAFH;AAGD,CAJD,CAIE,OAAOC,KAAP,EAAc;AACd;AACD;;AAEDxB,OAAOU,gBAAP,CAAwB,cAAxB,EAAwC,YAAM;AAC5C,MAAIX,WAAJ,EAAiB;AACf,QAAI;AACFA,kBAAY0B,KAAZ;AACD,KAFD,CAEE,OAAOD,KAAP,EAAc;AACd;AACD;AACF;AACF,CARD","file":"index.js","sourcesContent":["import parse from 'url-parse';\nimport simpleHash from '../simpleHash';\nimport popWindow from '../popWindow';\n\nlet loginWindow = null;\n\nconst {\n  query: {\n    prefix = 'rc',\n    hash = simpleHash(),\n  },\n} = parse(window.location.href, true);\n\n/**\n * @function\n * @global\n * @description oAuthCallback allows redirect to call via window.opener.oAuthCallback if window.opener is not blocked.\n * @param {String} callbackUri\n */\nwindow.oAuthCallback = (callbackUri) => {\n  window.parent.postMessage({\n    callbackUri,\n  }, '*');\n};\n\nwindow.addEventListener('message', ({ data = {} }) => {\n  const {\n    oAuthUri,\n  } = data;\n  if (oAuthUri && oAuthUri.trim() !== '') {\n    const parsedUri = parse(oAuthUri, true);\n    const { query } = parsedUri;\n    query.state = `${query.state}-${prefix}-${hash}`;\n    parsedUri.set('query', query);\n    loginWindow = popWindow(parsedUri.toString(), `${prefix}-oauth`, 600, 600);\n  }\n});\n\nconst key = `${prefix}-${hash}-callbackUri`;\nwindow.addEventListener('storage', (e) => {\n  if (e.key === key && e.newValue && e.newValue !== '') {\n    const callbackUri = e.newValue;\n    localStorage.removeItem(key);\n    window.parent.postMessage({\n      callbackUri,\n    }, '*');\n  }\n});\n\ntry {\n  window.parent.postMessage({\n    proxyLoaded: true,\n  }, '*');\n} catch (error) {\n  /* ignore error */\n}\n\nwindow.addEventListener('beforeunload', () => {\n  if (loginWindow) {\n    try {\n      loginWindow.close();\n    } catch (error) {\n      /* ignore error */\n    }\n  }\n});\n"]}