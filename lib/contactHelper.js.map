{"version":3,"sources":["lib/contactHelper.js"],"names":["addPhoneToContact","uniqueContactItems","sortContactItemsByName","groupByFirstLetterOfName","filterContacts","getMatchContacts","AllContactSourceName","contact","phone","type","existedPhone","phoneNumbers","find","number","phoneNumber","phoneType","push","replace","input","map","result","item","itemId","id","NON_ALPHABET_RE","byName","a","b","name1","name","toLowerCase","name2","isNumber1","test","isNumber2","length","localeCompare","sort","POUND_SIGN","groups","group","forEach","letter","toLocaleUpperCase","caption","contacts","searchFilter","items","searchText","filter","firstName","lastName","indexOf","extensionNumber","x","entityType","found","matchedContact"],"mappings":"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","file":"contactHelper.js","sourcesContent":["import { reduce } from 'ramda';\nimport isBlank from './isBlank';\n\nexport const AllContactSourceName = 'all';\n\nexport function addPhoneToContact(contact, phone, type) {\n  if (isBlank(phone)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type.replace('Phone', ''),\n    });\n  }\n}\n\nexport function uniqueContactItems(input = []) {\n  const map = {};\n  return reduce(\n    (result, item) => {\n      const itemId = `${item.type}${item.id}`;\n      if (!map[itemId]) {\n        map[itemId] = true;\n        result.push(item);\n      }\n      return result;\n    },\n    [],\n    input,\n  );\n}\n\nconst NON_ALPHABET_RE = /[^a-z]/i;\nfunction byName(a, b) {\n  const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n  const isNumber1 = /^[0-9]/.test(name1);\n  const isNumber2 = /^[0-9]/.test(name2);\n  // Empty string should be put at the end\n  if (name1.length <= 0 || name2.length <= 0) {\n    return -name1.localeCompare(name2);\n  }\n  if (isNumber1 && isNumber2) {\n    return name1.localeCompare(name2);\n  }\n  if (isNumber1 || isNumber2) {\n    // put number name at last\n    return -name1.localeCompare(name2);\n  }\n  if (NON_ALPHABET_RE.test(name1[0]) && !NON_ALPHABET_RE.test(name2[0])) {\n    return 1;\n  }\n  if (!NON_ALPHABET_RE.test(name1[0]) && NON_ALPHABET_RE.test(name2[0])) {\n    return -1;\n  }\n  return name1.localeCompare(name2);\n}\nexport function sortContactItemsByName(input = []) {\n  return input.sort(byName);\n}\n\nconst POUND_SIGN = '#';\nexport function groupByFirstLetterOfName(input = []) {\n  const groups = [];\n  if (input && input.length) {\n    let group;\n    input.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      let letter = null;\n      if (name.length <= 0 || NON_ALPHABET_RE.test(name[0])) {\n        letter = POUND_SIGN;\n      } else {\n        letter = (name[0] || '').toLocaleUpperCase();\n      }\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\nexport function filterContacts(contacts, searchFilter) {\n  const items = contacts;\n  if (!searchFilter || isBlank(searchFilter)) {\n    return items;\n  }\n  const searchText = searchFilter.toLowerCase();\n  return items.filter((item) => {\n    const name = `${item.firstName} ${item.lastName} ${item.name}`;\n    if (\n      name.toLowerCase().indexOf(searchText) >= 0 ||\n      (item.extensionNumber && item.extensionNumber.indexOf(searchText) >= 0) ||\n      (item.phoneNumbers && item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0))\n    ) {\n      return true;\n    }\n    return false;\n  });\n}\n\nexport function getMatchContacts({ contacts, phoneNumber, entityType }) {\n  const result = [];\n  contacts.forEach((contact) => {\n    const found = contact.phoneNumbers && contact.phoneNumbers.find(\n      number => (number.phoneNumber === phoneNumber)\n    );\n    if (!found) {\n      return;\n    }\n    const matchedContact = {\n      ...contact,\n      phoneNumbers: [\n        ...contact.phoneNumbers\n      ],\n      entityType,\n    };\n    result.push(matchedContact);\n  });\n  return result;\n}\n"]}