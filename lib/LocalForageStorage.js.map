{"version":3,"sources":["lib/LocalForageStorage.js"],"names":["LocalforageStorage","storageKey","Error","_storageKey","_storageSyncKey","_ready","_id","uuid","v4","localStorage","window","localforage","config","name","_localforage","createInstance","_tabSyncHandler","event","key","substring","length","JSON","parse","newValue","setter","id","getItem","value","emit","addEventListener","MemoryStorage","syncKey","setItem","timestamp","Date","now","keys","ready","output","getLocalStorageKeys","promises","map","then","data","all","originalData","undefined","_updateStorageSyncData","error","console","removeItem","removeEventListener","prototype"],"mappings":"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","file":"LocalForageStorage.js","sourcesContent":["import uuid from 'uuid';\nimport emitter from 'event-emitter';\nimport localforage from 'localforage';\n\nimport MemoryStorage from './MemoryStorage';\n\nexport default class LocalforageStorage {\n  constructor({\n    storageKey,\n  }) {\n    if (!storageKey) {\n      throw Error('SynchronizedStorage must be created with a storage key');\n    }\n    this._storageKey = storageKey;\n    this._storageSyncKey = `${storageKey}-sync`;\n    this._ready = false;\n    this._id = uuid.v4();\n    if (typeof localStorage !== 'undefined' && typeof window !== 'undefined') {\n      localforage.config({ name: this._storageKey });\n      this._localforage = localforage.createInstance({\n        name: this._storageKey,\n      });\n      this._tabSyncHandler = async (event) => {\n        if (\n          event.key !== null &&\n          typeof event.key !== 'undefined' &&\n          event.key.substring(0, this._storageSyncKey.length) === this._storageSyncKey\n        ) {\n          try {\n            const { setter } = JSON.parse(event.newValue);\n            if (!setter || setter === this.id) {\n              return;\n            }\n            const key = event.key.substring(this._storageSyncKey.length + 1);\n            const value = await this.getItem(key);\n            this.emit('storage', {\n              key,\n              value,\n            });\n          } catch (e) {\n            /* ignore error */\n          }\n        }\n      };\n      window.addEventListener('storage', this._tabSyncHandler);\n    } else {\n      this._localforage = new MemoryStorage();\n    }\n  }\n\n  _updateStorageSyncData(key) {\n    if (typeof localStorage !== 'undefined') {\n      const syncKey = `${this._storageSyncKey}-${key}`;\n      localStorage.setItem(\n        syncKey,\n        JSON.stringify({\n          timestamp: Date.now(),\n          setter: this.id,\n        })\n      );\n    }\n  }\n\n  async getLocalStorageKeys() {\n    const keys = await this._localforage.keys();\n    return keys;\n  }\n\n  async getData() {\n    await this.ready();\n    const output = {};\n    const keys = await this.getLocalStorageKeys();\n    const promises = keys.map(key =>\n      this.getItem(key).then((data) => { output[key] = data; })\n    );\n    await Promise.all(promises);\n    return output;\n  }\n\n  async getItem(key) {\n    const originalData = await this._localforage.getItem(key);\n    try {\n      const { value } = originalData;\n      return value;\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  async setItem(key, value) {\n    await this._localforage.setItem(\n      key,\n      { value, setter: this.id },\n    );\n    try {\n      this._updateStorageSyncData(key);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async removeItem(key) {\n    await this._localforage.removeItem(key);\n  }\n\n  destroy() {\n    if (this._tabSyncHandler) {\n      window.removeEventListener('storage', this._tabSyncHandler);\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  async ready() {\n    if (this._ready) {\n      return;\n    }\n    if (typeof this._localforage.ready === 'function') {\n      await this._localforage.ready();\n    }\n    this._ready = true;\n  }\n}\n\nemitter(LocalforageStorage.prototype);\n"]}