{"version":3,"sources":["lib/LoggerBase/index.js"],"names":["defaultIdentityFunction","convertListToMap","item","id","loggingList","mapping","forEach","LoggerBase","deps","dep","optional","name","actionTypes","base","baseActionTypes","prefix","getReducer","getDefaultReducer","identityFunction","logFunction","readyCheckFunction","options","_name","ensureExist","_identityFunction","_logFunction","_readyCheckFunction","_reducer","_logPromises","addSelector","store","subscribe","_onStateChange","pending","ready","_shouldInit","dispatch","type","init","_onInit","initSuccess","_shouldReset","reset","_onReset","resetSuccess","Error","constructor","has","get","log","promise","set","delete","logSuccess","logError","error","_log","state","status","_selectors","loggingMap","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../RcModule';\nimport { Library } from '../di';\nimport { prefixEnum } from '../Enum';\nimport ensureExist from '../ensureExist';\n\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport baseActionTypes from './baseActionTypes';\nimport getDefaultReducer from './getDefaultReducer';\nimport proxify from '../proxy/proxify';\n\n/**\n * @function defaultIdentityFunction\n * @description Identity function returns a deterministic id value for each item.\n * @param {Object} item\n * @return {String}\n */\nexport function defaultIdentityFunction(item) {\n  return item.id;\n}\n\n/**\n * @function\n * @description Convert array of { name, id } objects into a map.\n * @param {[{ name: String, id: String }]} loggingList\n * @return {{ [ids]: { [names]: true } }}\n */\nexport function convertListToMap(loggingList) {\n  const mapping = {};\n  loggingList.forEach((id) => {\n    mapping[id] = true;\n  });\n  return mapping;\n}\n\n/**\n * @class\n * @description Base class implementation for loggers.\n */\n@Library({\n  deps: [{ dep: 'LoggerBaseOptions', optional: true }]\n})\nexport default class LoggerBase extends RcModule {\n  /**\n   * @constructor\n   * @param {String} params.name - name of the class\n   * @param {Object} params.actionTypes\n   * @param {Function} params.getReducer\n   * @param {Function} params.identityFunction - function that can derive an unique\n   *    id from items.\n   */\n  constructor({\n    name,\n    actionTypes = prefixEnum({ base: baseActionTypes, prefix: name }),\n    getReducer = getDefaultReducer,\n    identityFunction = defaultIdentityFunction,\n    logFunction,\n    readyCheckFunction,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._name = this::ensureExist(name, 'name');\n    this._identityFunction = this::ensureExist(identityFunction, 'identityFunction');\n    this._logFunction = this::ensureExist(logFunction, 'logFunction');\n    this._readyCheckFunction = this::ensureExist(readyCheckFunction, 'readyCheckFunction');\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._logPromises = new Map();\n\n    this.addSelector('loggingMap',\n      () => this.loggingList,\n      convertListToMap,\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      !this._readyCheckFunction();\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  @proxify\n  async _log({ item, ...options } = {}) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}._log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(`${this.constructor.name}._log: options.item is undefined.`);\n    }\n\n    const id = this._identityFunction(item);\n    // wait for the previous log action to finish\n    if (this._logPromises.has(id)) {\n      await this._logPromises.get(id);\n    }\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.log,\n        id,\n      });\n      const promise = this._logFunction({ item, ...options });\n      this._logPromises.set(id, promise);\n      await promise;\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logSuccess,\n        id,\n      });\n    } catch (error) {\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logError,\n        error,\n        id,\n      });\n      throw error;\n    }\n  }\n\n  @proxify\n  async log({ item, ...options }) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}.log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(`${this.constructor.name}.log: options.item is undefined.`);\n    }\n    await this._log({ item, ...options });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get loggingList() {\n    return this.state.loggingList;\n  }\n\n  get loggingMap() {\n    return this._selectors.loggingMap();\n  }\n}\n"]}