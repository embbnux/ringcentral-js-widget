{"version":3,"sources":["lib/Enum/index.js"],"names":["prefixEnum","hasOwnProperty","Object","prototype","Enum","values","prefix","definition","forEach","value","HashMap","prefixCache","enumMap","base","has","set","cache","get","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;QA2BgBA,U,GAAAA,U;;AA3BhB;;;;;;IAEQC,c,GAAmBC,OAAOC,S,CAA1BF,c;AACR;;;;;IAIqBG,I;;;AACnB;;;;;AAKA,kBAAsC;AAAA,QAA1BC,MAA0B,uEAAjB,EAAiB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AAAA;;AACpC,QAAMC,aAAa,EAAnB;AACAF,WAAOG,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBF,iBAAWE,KAAX,IAAoBH,WAAW,EAAX,GAAmBA,MAAnB,SAA6BG,KAA7B,GAAuCA,KAA3D;AACD,KAFD;AAFoC,6HAK9BF,UAL8B;AAMrC;;;EAZ+BG,iB;;kBAAbN,I;;AAcrB,IAAMO,cAAc,mBAApB;;AAEA;;;;AAIO,SAASX,UAAT,OAAyD;AAAA,MAAnCY,OAAmC,QAAnCA,OAAmC;AAAA,MAA1BN,MAA0B,QAA1BA,MAA0B;AAAA,uBAAlBO,IAAkB;AAAA,MAAlBA,IAAkB,6BAAXD,OAAW;;AAC9D,MAAI,CAACN,MAAD,IAAWA,WAAW,EAA1B,EAA8B,OAAOO,IAAP;;AAE9B,MAAI,CAACF,YAAYG,GAAZ,CAAgBR,MAAhB,CAAL,EAA8B;AAC5BK,gBAAYI,GAAZ,CAAgBT,MAAhB,EAAwB,mBAAxB;AACD;;AAED,MAAMU,QAAQL,YAAYM,GAAZ,CAAgBX,MAAhB,CAAd;;AAEA,MAAI,CAACU,MAAMF,GAAN,CAAUD,IAAV,CAAL,EAAsB;AACpB,QAAMN,aAAa,EAAnB;AACA,SAAK,IAAMW,IAAX,IAAmBL,IAAnB,EAAyB;AACvB;AACA,UAAUZ,cAAN,YAAqBiB,IAArB,CAAJ,EAAgC;AAC9BX,mBAAWW,IAAX,IAAsBZ,MAAtB,SAAgCO,KAAKK,IAAL,CAAhC;AACD;AACF;AACDF,UAAMD,GAAN,CAAUF,IAAV,EAAgB,IAAIH,iBAAJ,CAAYH,UAAZ,CAAhB;AACD;AACD,SAAOS,MAAMC,GAAN,CAAUJ,IAAV,CAAP;AACD","file":"index.js","sourcesContent":["import HashMap from '../HashMap';\n\nconst { hasOwnProperty } = Object.prototype;\n/**\n * @class\n * @description helper class for creating redux action definition maps\n */\nexport default class Enum extends HashMap {\n  /**\n   * @constructor\n   * @param {String[]} actions - list of action strings\n   * @extends HashMap\n   */\n  constructor(values = [], prefix = '') {\n    const definition = {};\n    values.forEach((value) => {\n      definition[value] = prefix !== '' ? `${prefix}-${value}` : value;\n    });\n    super(definition);\n  }\n}\nconst prefixCache = new Map();\n\n/**\n * @function\n * @description helper function to return a prefixed action definition maps\n */\nexport function prefixEnum({ enumMap, prefix, base = enumMap }) {\n  if (!prefix || prefix === '') return base;\n\n  if (!prefixCache.has(prefix)) {\n    prefixCache.set(prefix, new Map());\n  }\n\n  const cache = prefixCache.get(prefix);\n\n  if (!cache.has(base)) {\n    const definition = {};\n    for (const type in base) {\n      /* istanbul ignore else */\n      if (base::hasOwnProperty(type)) {\n        definition[type] = `${prefix}-${base[type]}`;\n      }\n    }\n    cache.set(base, new HashMap(definition));\n  }\n  return cache.get(base);\n}\n"]}