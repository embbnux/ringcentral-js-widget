{"version":3,"sources":["lib/HashMap/index.js"],"names":["defaultGetFunction","sDefinition","sValueMap","item","HashMap","definition","key","Object","prototype","hasOwnProperty","get","enumerable","set","map","value","has","getKey","getValue","forEach"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAGgBA,kB,GAAAA,kB;;;;AAHhB,IAAMC,cAAc,sBAAO,YAAP,CAApB;AACA,IAAMC,YAAY,sBAAO,UAAP,CAAlB;;AAEO,SAASF,kBAAT,CAA4BG,IAA5B,EAAkC;AACvC,SAAOA,IAAP;AACD;;AAED;;;;;IAIqBC,O;AACnB;;;;AAIA,mBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACtB,SAAKJ,WAAL,IAAoB,sBAAc,EAAd,EAAkBI,UAAlB,CAApB;AACA,SAAKH,SAAL,IAAkB,mBAAlB;;AAFsB,+BAIXI,GAJW;AAKpB;AACA,UAAgBC,OAAOC,SAAP,CAAiBC,cAA7B,kBAA4CH,GAA5C,CAAJ,EAAsD;AACpD,sCAAsB,KAAtB,EAA4BA,GAA5B,EAAiC;AAC/BI,aAD+B,iBACzB;AACJ,mBAAO,KAAKT,WAAL,EAAkBK,GAAlB,CAAP;AACD,WAH8B;;AAI/BK,sBAAY;AAJmB,SAAjC;AAMA,cAAKT,SAAL,EAAgBU,GAAhB,CAAoB,MAAKX,WAAL,EAAkBK,GAAlB,CAApB,EAA4CA,GAA5C;AACD;AAdmB;;AAItB,SAAK,IAAMA,GAAX,IAAkBD,UAAlB,EAA8B;AAAA,YAAnBC,GAAmB;AAW7B;AACD,0BAAc,IAAd;AACD;;;;2BACaO,G,EAAKC,K,EAAO;AACxB,aAAOD,IAAIX,SAAJ,EAAeQ,GAAf,CAAmBI,KAAnB,CAAP;AACD;;;6BACeD,G,EAAKC,K,EAAO;AAC1B,aAAOD,IAAIX,SAAJ,EAAea,GAAf,CAAmBD,KAAnB,CAAP;AACD;;;kCACmF;AAAA,UAAnEF,GAAmE,QAAnEA,GAAmE;AAAA,6BAA9DI,MAA8D;AAAA,UAA9DA,MAA8D,+BAArDhB,kBAAqD;AAAA,+BAAjCiB,QAAiC;AAAA,UAAjCA,QAAiC,iCAAtBjB,kBAAsB;;AAClF,UAAMK,aAAa,EAAnB;AACA,iDAAIO,GAAJ,GAASM,OAAT,CAAiB,UAACf,IAAD,EAAU;AACzB,YAAMG,MAAMU,OAAOb,IAAP,CAAZ;AACA,YAAMW,QAAQG,SAASd,IAAT,CAAd;AACA,YAAI,OAAOG,GAAP,KAAe,WAAf,IAA8BA,QAAQ,IAAtC,IAA8CA,QAAQ,EAA1D,EAA8D;AAC5DD,qBAAWC,GAAX,IAAkBQ,KAAlB;AACD;AACF,OAND;AAOA,aAAO,IAAIV,OAAJ,CAAYC,UAAZ,CAAP;AACD;;;;;kBAvCkBD,O","file":"index.js","sourcesContent":["const sDefinition = Symbol('definition');\nconst sValueMap = Symbol('valueMap');\n\nexport function defaultGetFunction(item) {\n  return item;\n}\n\n/**\n * @class HashMap\n * @description Simple hash map class\n */\nexport default class HashMap {\n  /**\n   * @constructor\n   * @param {Object} definition\n   */\n  constructor(definition) {\n    this[sDefinition] = Object.assign({}, definition);\n    this[sValueMap] = new Map();\n\n    for (const key in definition) {\n      /* istanbul ignore else */\n      if (definition::Object.prototype.hasOwnProperty(key)) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this[sDefinition][key];\n          },\n          enumerable: true,\n        });\n        this[sValueMap].set(this[sDefinition][key], key);\n      }\n    }\n    Object.freeze(this);\n  }\n  static getKey(map, value) {\n    return map[sValueMap].get(value);\n  }\n  static hasValue(map, value) {\n    return map[sValueMap].has(value);\n  }\n  static fromSet({ set, getKey = defaultGetFunction, getValue = defaultGetFunction }) {\n    const definition = {};\n    [...set].forEach((item) => {\n      const key = getKey(item);\n      const value = getValue(item);\n      if (typeof key !== 'undefined' && key !== null && key !== '') {\n        definition[key] = value;\n      }\n    });\n    return new HashMap(definition);\n  }\n}\n"]}