{"version":3,"sources":["lib/di/registry/provider_registry.js"],"names":["ProviderRegistry","_map","token","has","get","providers","set","resolved","clear"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;IAIqBA,gB;AACnB,8BAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,mBAAZ;AACD;;;;wBAEGC,K,EAAO;AACT,UAAI,CAAC,KAAKD,IAAL,CAAUE,GAAV,CAAcD,KAAd,CAAL,EAA2B;AACzB,cAAM,6CAA+BA,KAA/B,2BAAN;AACD;AACD,aAAO,KAAKD,IAAL,CAAUG,GAAV,CAAcF,KAAd,EAAqBG,SAA5B;AACD;;;wBAEGH,K,EAAOG,S,EAAW;AACpB,UAAI,KAAKJ,IAAL,CAAUE,GAAV,CAAcD,KAAd,CAAJ,EAA0B;AACxB,cAAM,4CAA8BA,KAA9B,YAAN;AACD;AACD,aAAO,KAAKD,IAAL,CAAUK,GAAV,CAAcJ,KAAd,EAAqB,EAAEG,oBAAF,EAAaE,UAAU,KAAvB,EAArB,CAAP;AACD;;;6BAEQL,K,EAAO;AACd,aAAO,CAAC,CAAC,KAAKD,IAAL,CAAUG,GAAV,CAAcF,KAAd,EAAqBK,QAA9B;AACD;;;4BAEOL,K,EAAOG,S,EAAW;AACxB,UAAI,CAAC,KAAKJ,IAAL,CAAUE,GAAV,CAAcD,KAAd,CAAL,EAA2B;AACzB,cAAM,2DAA6CA,KAA7C,+BAAN;AACD;AACD,WAAKD,IAAL,CAAUK,GAAV,CAAcJ,KAAd,EAAqB,EAAEG,oBAAF,EAAaE,UAAU,IAAvB,EAArB;AACD;;;wBAEGL,K,EAAO;AACT,aAAO,KAAKD,IAAL,CAAUE,GAAV,CAAcD,KAAd,CAAP;AACD;;;4BAEO;AACN,WAAKD,IAAL,CAAUO,KAAV;AACD;;;;;kBApCkBR,gB","file":"provider_registry.js","sourcesContent":["import { DIError } from '../utils/error';\n\n/**\n * ProviderRegistry is a centralized structure for storing provider metadata.\n * It's a map data structure mapping Token to Provider.\n */\nexport default class ProviderRegistry {\n  constructor() {\n    this._map = new Map();\n  }\n\n  get(token) {\n    if (!this._map.has(token)) {\n      throw DIError(`Can not find token [${token}] in ProviderRegistry`);\n    }\n    return this._map.get(token).providers;\n  }\n\n  set(token, providers) {\n    if (this._map.has(token)) {\n      throw DIError(`Can only register [${token}] once`);\n    }\n    return this._map.set(token, { providers, resolved: false });\n  }\n\n  resolved(token) {\n    return !!this._map.get(token).resolved;\n  }\n\n  resolve(token, providers) {\n    if (!this._map.has(token)) {\n      throw DIError(`Cannot resolve provider metadata [${token}]: providers is not found`);\n    }\n    this._map.set(token, { providers, resolved: true });\n  }\n\n  has(token) {\n    return this._map.has(token);\n  }\n\n  reset() {\n    this._map.clear();\n  }\n}\n"]}