{"version":3,"sources":["lib/di/utils/is_type.js"],"names":["isEmpty","isArray","isObject","isFunction","isValueProvider","isStaticClassProvider","isExistingProvider","isFactoryProvider","param","length","x","Array","Object","prototype","toString","call","slice","toLowerCase","USE_VALUE","provider","useClass","undefined","useExisting","useFactory"],"mappings":";;;;;QAAgBA,O,GAAAA,O;QAIAC,O,GAAAA,O;QAMAC,Q,GAAAA,Q;QAIAC,U,GAAAA,U;QAQAC,e,GAAAA,e;QAIAC,qB,GAAAA,qB;QAIAC,kB,GAAAA,kB;QAIAC,iB,GAAAA,iB;AAlCT,SAASP,OAAT,CAAiBQ,KAAjB,EAAwB;AAC7B,SAAO,CAACA,KAAD,IAAUA,MAAMC,MAAN,KAAiB,CAAlC;AACD;;AAEM,SAASR,OAAT,CAAiBS,CAAjB,EAAoB;AACzB,SAAOC,MAAMV,OAAN,GACHU,MAAMV,OAAN,CAAcS,CAAd,CADG,GAEHE,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,CAA/B,EAAkCM,KAAlC,CAAwC,CAAxC,EAA2C,CAAC,CAA5C,MAAmD,OAFvD;AAGD;;AAEM,SAASd,QAAT,CAAkBQ,CAAlB,EAAqB;AAC1B,SAAOE,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,CAA/B,EAAkCO,WAAlC,OAAoD,iBAA3D;AACD;;AAEM,SAASd,UAAT,CAAoBO,CAApB,EAAuB;AAC5B,SAAO,OAAOA,CAAP,KAAa,UAApB;AACD;;AAED;;;AAGA,IAAMQ,YAAY,UAAlB;AACO,SAASd,eAAT,CAAyBe,QAAzB,EAAmC;AACxC,SAAOD,aAAaC,QAApB;AACD;;AAEM,SAASd,qBAAT,CAA+Bc,QAA/B,EAAyC;AAC9C,SAAOA,SAASC,QAAT,KAAsBC,SAA7B;AACD;;AAEM,SAASf,kBAAT,CAA4Ba,QAA5B,EAAsC;AAC3C,SAAOA,SAASG,WAAT,KAAyBD,SAAhC;AACD;;AAEM,SAASd,iBAAT,CAA2BY,QAA3B,EAAqC;AAC1C,SAAOA,SAASI,UAAT,KAAwBF,SAA/B;AACD","file":"is_type.js","sourcesContent":["export function isEmpty(param) {\n  return !param || param.length === 0;\n}\n\nexport function isArray(x) {\n  return Array.isArray\n    ? Array.isArray(x)\n    : Object.prototype.toString.call(x).slice(8, -1) === 'Array';\n}\n\nexport function isObject(x) {\n  return Object.prototype.toString.call(x).toLowerCase() === '[object object]';\n}\n\nexport function isFunction(x) {\n  return typeof x === 'function';\n}\n\n/**\n * Provider type guard functions\n */\nconst USE_VALUE = 'useValue';\nexport function isValueProvider(provider) {\n  return USE_VALUE in provider;\n}\n\nexport function isStaticClassProvider(provider) {\n  return provider.useClass !== undefined;\n}\n\nexport function isExistingProvider(provider) {\n  return provider.useExisting !== undefined;\n}\n\nexport function isFactoryProvider(provider) {\n  return provider.useFactory !== undefined;\n}\n"]}