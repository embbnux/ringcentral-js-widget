{"version":3,"sources":["lib/getIntlDateTimeFormatter/index.js"],"names":["getFormatter","getIntlDateTimeFormatter","formatterCache","locale","options","key","Intl","DateTimeFormat","DEFAULT_DATE_TIME_OPTIONS","year","month","day","hour","minute","hour12","DEFAULT_DATE_OPTIONS","DEFAULT_TIME_OPTIONS","dateTimeOptions","dateOptions","timeOptions","utcTimestamp","type","format","Date","replace"],"mappings":";;;;;;;;;;;;;;;QAIgBA,Y,GAAAA,Y;kBA2BQC,wB;;AA/BxB;;;;;;AAEO,IAAMC,0CAAiB,EAAvB;;AAEA,SAASF,YAAT,CAAsBG,MAAtB,EAA8BC,OAA9B,EAAuC;AAC5C,MAAMC,MAAM,yBAAe,CAACF,MAAD,EAASC,OAAT,CAAf,CAAZ;AACA,MAAI,CAACF,eAAeG,GAAf,CAAL,EAA0B;AACxBH,mBAAeG,GAAf,IAAsB,IAAIC,KAAKC,cAAT,CAAwBJ,MAAxB,6BAAqCC,OAArC,EAAtB;AACD;AACD,SAAOF,eAAeG,GAAf,CAAP;AACD;;AAEM,IAAMG,gEAA4B;AACvCC,QAAM,SADiC;AAEvCC,SAAO,SAFgC;AAGvCC,OAAK,SAHkC;AAIvCC,QAAM,SAJiC;AAKvCC,UAAQ,SAL+B;AAMvCC,UAAQ;AAN+B,CAAlC;AAQA,IAAMC,sDAAuB;AAClCN,QAAM,SAD4B;AAElCC,SAAO,SAF2B;AAGlCC,OAAK;AAH6B,CAA7B;AAKA,IAAMK,sDAAuB;AAClCJ,QAAM,SAD4B;AAElCC,UAAQ,SAF0B;AAGlCC,UAAQ;AAH0B,CAA7B;;AAMQ,SAASb,wBAAT,GAIP;AAAA,iFAAJ,EAAI;AAAA,kCAHNgB,eAGM;AAAA,MAHNA,eAGM,wCAHYT,yBAGZ;AAAA,8BAFNU,WAEM;AAAA,MAFNA,WAEM,oCAFQH,oBAER;AAAA,8BADNI,WACM;AAAA,MADNA,WACM,oCADQH,oBACR;;AACN,SAAO,iBAID;AAAA,QAHJI,YAGI,SAHJA,YAGI;AAAA,QAFJjB,MAEI,SAFJA,MAEI;AAAA,2BADJkB,IACI;AAAA,QADJA,IACI,8BADG,uBAAQD,YAAR,IAAwB,MAAxB,GAAiC,MACpC;;AACJ,YAAQC,IAAR;AACE,WAAK,MAAL;AACE,eAAOrB,aAAaG,MAAb,EAAqBe,WAArB,EACJI,MADI,CACG,IAAIC,IAAJ,CAASH,YAAT,CADH,EAEJI,OAFI,CAEI,gBAFJ,EAEsB,EAFtB,CAAP,CAFJ,CAIsC;AACpC,WAAK,MAAL;AACE,eAAOxB,aAAaG,MAAb,EAAqBgB,WAArB,EAAkCG,MAAlC,CAAyC,IAAIC,IAAJ,CAASH,YAAT,CAAzC,CAAP;AACF;AACE,eAAOpB,aAAaG,MAAb,EAAqBc,eAArB,EAAsCK,MAAtC,CAA6C,IAAIC,IAAJ,CAASH,YAAT,CAA7C,CAAP;AARJ;AAUD,GAfD;AAgBD","file":"index.js","sourcesContent":["import isToday from '../isToday';\n\nexport const formatterCache = {};\n\nexport function getFormatter(locale, options) {\n  const key = JSON.stringify([locale, options]);\n  if (!formatterCache[key]) {\n    formatterCache[key] = new Intl.DateTimeFormat(locale, { ...options });\n  }\n  return formatterCache[key];\n}\n\nexport const DEFAULT_DATE_TIME_OPTIONS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: false,\n};\nexport const DEFAULT_DATE_OPTIONS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n};\nexport const DEFAULT_TIME_OPTIONS = {\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: false,\n};\n\nexport default function getIntlDateTimeFormatter({\n  dateTimeOptions = DEFAULT_DATE_TIME_OPTIONS,\n  dateOptions = DEFAULT_DATE_OPTIONS,\n  timeOptions = DEFAULT_TIME_OPTIONS,\n} = {}) {\n  return ({\n    utcTimestamp,\n    locale,\n    type = isToday(utcTimestamp) ? 'time' : 'date',\n  }) => {\n    switch (type) {\n      case 'date':\n        return getFormatter(locale, dateOptions)\n          .format(new Date(utcTimestamp))\n          .replace(/\\u200E|\\u200F/g, ''); // FIX: https://github.com/tc39/ecma402/issues/28\n      case 'time':\n        return getFormatter(locale, timeOptions).format(new Date(utcTimestamp));\n      default:\n        return getFormatter(locale, dateTimeOptions).format(new Date(utcTimestamp));\n    }\n  };\n}\n"]}