{"version":3,"sources":["lib/StorageBase/getStorageReducer.js"],"names":["getDataReducer","getStorageKeyReducer","getStorageReducer","calculateInitialState","reducers","initialState","key","undefined","types","state","action","type","initSuccess","data","sync","value","resetSuccess","newState","hasChange","storageKey","status"],"mappings":";;;;;;;;;;;;;;QAYgBA,c,GAAAA,c;QAkCAC,oB,GAAAA,oB;kBAeQC,iB;;AA7DxB;;AACA;;;;;;AAEA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAMC,eAAe,EAArB;AACA;AACA,OAAK,IAAMC,GAAX,IAAkBF,QAAlB,EAA4B;AAC1BC,iBAAaC,GAAb,IAAoBF,SAASE,GAAT,EAAcC,SAAd,EAAyB,EAAzB,CAApB;AACD;AACD,SAAOF,YAAP;AACD;;AAEM,SAASL,cAAT,OAA6C;AAAA,MAAnBQ,KAAmB,QAAnBA,KAAmB;AAAA,MAAZJ,QAAY,QAAZA,QAAY;;AAClD,SAAO,YAAqD;AAAA,QAApDK,KAAoD,uEAA5CN,sBAAsBC,QAAtB,CAA4C;AAAA,QAAXM,MAAW;;AAC1D,YAAQA,OAAOC,IAAf;AACE,WAAKH,MAAMI,WAAX;AACE,eAAOF,OAAOG,IAAd;AACF,WAAKL,MAAMM,IAAX;AACE,0CACKL,KADL,oCAEGC,OAAOJ,GAFV,EAEgBI,OAAOK,KAFvB;AAIF,WAAKP,MAAMQ,YAAX;AAAyB;AACvB,cAAMC,WAAW,EAAjB;AACA;AACA;AACA,eAAK,IAAMX,GAAX,IAAkBF,QAAlB,EAA4B;AAC1Ba,qBAASX,GAAT,IAAgBF,SAASE,GAAT,EAAcC,SAAd,EAAyBG,MAAzB,CAAhB;AACD;AACD,iBAAOO,QAAP;AACD;AACD;AAAS;AACP,cAAMA,YAAW,EAAjB;AACA,cAAIC,YAAY,KAAhB;AACA;AACA;AACA,eAAK,IAAMZ,IAAX,IAAkBF,QAAlB,EAA4B;AAC1Ba,sBAASX,IAAT,IAAgBF,SAASE,IAAT,EAAcG,MAAMH,IAAN,CAAd,EAA0BI,MAA1B,CAAhB;AACA,gBAAIO,UAASX,IAAT,MAAkBG,MAAMH,IAAN,CAAtB,EAAkCY,YAAY,IAAZ;AACnC;AACD,iBAAOA,YAAYD,SAAZ,GAAuBR,KAA9B;AACD;AA3BH;AA6BD,GA9BD;AA+BD;;AAEM,SAASR,oBAAT,CAA8BO,KAA9B,EAAqC;AAC1C,SAAO,YAAwC;AAAA,QAAvCC,KAAuC,uEAA/B,IAA+B;AAAA;AAAA,QAAvBE,IAAuB,SAAvBA,IAAuB;AAAA,QAAjBQ,UAAiB,SAAjBA,UAAiB;;AAC7C,YAAQR,IAAR;AACE,WAAKH,MAAMI,WAAX;AACE,eAAOO,UAAP;;AAEF,WAAKX,MAAMQ,YAAX;AACE,eAAO,IAAP;;AAEF;AACE,eAAOP,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEc,SAASP,iBAAT,QAAgD;AAAA,MAAnBM,KAAmB,SAAnBA,KAAmB;AAAA,MAAZJ,QAAY,SAAZA,QAAY;;AAC7D,SAAO,4BAAgB;AACrBgB,YAAQ,sCAAuBZ,KAAvB,CADa;AAErBK,UAAMb,eAAe,EAAEQ,YAAF,EAASJ,kBAAT,EAAf,CAFe;AAGrBe,gBAAYlB,qBAAqBO,KAArB;AAHS,GAAhB,CAAP;AAKD","file":"getStorageReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../getModuleStatusReducer';\n\nfunction calculateInitialState(reducers) {\n  const initialState = {};\n  /* eslint-disable guard-for-in */\n  for (const key in reducers) {\n    initialState[key] = reducers[key](undefined, {});\n  }\n  return initialState;\n}\n\nexport function getDataReducer({ types, reducers }) {\n  return (state = calculateInitialState(reducers), action) => {\n    switch (action.type) {\n      case types.initSuccess:\n        return action.data;\n      case types.sync:\n        return {\n          ...state,\n          [action.key]: action.value,\n        };\n      case types.resetSuccess: {\n        const newState = {};\n        // reset the data to initial states\n        /* eslint-disable guard-for-in */\n        for (const key in reducers) {\n          newState[key] = reducers[key](undefined, action);\n        }\n        return newState;\n      }\n      default: {\n        const newState = {};\n        let hasChange = false;\n        // compute new substates and check for changes\n        /* eslint-disable guard-for-in */\n        for (const key in reducers) {\n          newState[key] = reducers[key](state[key], action);\n          if (newState[key] !== state[key]) hasChange = true;\n        }\n        return hasChange ? newState : state;\n      }\n    }\n  };\n}\n\nexport function getStorageKeyReducer(types) {\n  return (state = null, { type, storageKey }) => {\n    switch (type) {\n      case types.initSuccess:\n        return storageKey;\n\n      case types.resetSuccess:\n        return null;\n\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getStorageReducer({ types, reducers }) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    data: getDataReducer({ types, reducers }),\n    storageKey: getStorageKeyReducer(types),\n  });\n}\n"]}