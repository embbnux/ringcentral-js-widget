{"version":3,"sources":["lib/ChromeTransport/ServerTransport.js"],"names":["ServerTransport","options","name","_ports","_requests","_activeTabs","_getActiveTabs","chrome","tabs","onActivated","addListener","runtime","onConnect","port","add","onMessage","type","requestId","payload","_events","request","set","emit","onDisconnect","delete","result","error","get","Error","message","postMessage","response","push","isOnActiveTabs","sender","tab","find","id","filter","forEach","query","active","console","log","TransportBase"],"mappings":"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","file":"ServerTransport.js","sourcesContent":["import TransportBase from '../TransportBase';\n\n/* global chrome */\n\nexport default class ServerTransport extends TransportBase {\n  constructor(options) {\n    super({\n      ...options,\n      name: 'ChromeTransport',\n    });\n    this._ports = new Set();\n    this._requests = new Map();\n\n    // Keep active tabs up to date\n    this._activeTabs = [];\n    this._getActiveTabs();\n    chrome.tabs.onActivated.addListener(() => {\n      this._getActiveTabs();\n    });\n    chrome.runtime.onConnect.addListener((port) => {\n      if (port.name === 'transport') {\n        this._ports.add(port);\n        port.onMessage.addListener(({ type, requestId, payload }) => {\n          if (type === this._events.request && requestId && payload) {\n            this._requests.set(requestId, port);\n            this.emit(this._events.request, {\n              requestId,\n              payload,\n            });\n          }\n        });\n        port.onDisconnect.addListener(() => {\n          this._ports.delete(port);\n        });\n      }\n    });\n  }\n  response({ requestId, result, error }) {\n    const port = this._requests.get(requestId);\n    if (port) {\n      this._requests.delete(requestId);\n      if (error instanceof Error) {\n        error = error.message;\n      }\n      port.postMessage({\n        type: this._events.response,\n        requestId,\n        result,\n        error,\n      });\n    }\n  }\n  push({ payload }) {\n    const message = { type: this._events.push, payload };\n    const isOnActiveTabs = (port) => {\n      // Ensure tabs are still accessible (may be closed)\n      // otherwise, give up pushing messages to that tab at this point\n      if (port.sender && port.sender.tab) {\n        return !!this._activeTabs.find(tab => tab && (tab.id === port.sender.tab.id));\n      }\n      return false;\n    };\n    // Since postMessage is really expensive,\n    // we only send messages to those ports on active tabs.\n    Array.from(this._ports)\n      .filter(port => isOnActiveTabs(port))\n      .forEach(port => port.postMessage(message));\n  }\n\n  _getActiveTabs() {\n    try {\n      chrome.tabs.query({ active: true }, (tabs) => {\n        this._activeTabs = tabs;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n"]}