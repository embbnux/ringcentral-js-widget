{"version":3,"sources":["lib/ChromeTransport/ClientTransport.js"],"names":["ClientTransport","options","name","_requests","_port","chrome","runtime","connect","onMessage","addListener","type","payload","requestId","result","error","_events","push","emit","response","has","get","reject","Error","resolve","uuid","v4","promise","set","postMessage","request","timeout","setTimeout","_timeout","then","clearTimeout","delete","catch","TransportBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;IAEqBA,e;;;AACnB,2BAAYC,OAAZ,EAAqB;AAAA;;AAAA,mLAEdA,OAFc;AAGjBC,YAAM;AAHW;;AAKnB,UAAKC,SAAL,GAAiB,mBAAjB;AACA,UAAKC,KAAL,GAAaC,OAAOC,OAAP,CAAeC,OAAf,CAAuB,EAAEL,MAAM,WAAR,EAAvB,CAAb;AACA,UAAKE,KAAL,CAAWI,SAAX,CAAqBC,WAArB,CAAiC,gBAM3B;AAAA,UALJC,IAKI,QALJA,IAKI;AAAA,UAJJC,OAII,QAJJA,OAII;AAAA,UAHJC,SAGI,QAHJA,SAGI;AAAA,UAFJC,MAEI,QAFJA,MAEI;AAAA,UADJC,KACI,QADJA,KACI;;AACJ,cAAQJ,IAAR;AACE,aAAK,MAAKK,OAAL,CAAaC,IAAlB;AACE,cAAIL,OAAJ,EAAa;AACX,kBAAKM,IAAL,CAAU,MAAKF,OAAL,CAAaC,IAAvB,EAA6BL,OAA7B;AACD;AACD;AACF,aAAK,MAAKI,OAAL,CAAaG,QAAlB;AACE,cAAIN,aAAa,MAAKT,SAAL,CAAegB,GAAf,CAAmBP,SAAnB,CAAjB,EAAgD;AAC9C,gBAAIE,KAAJ,EAAW;AACT,oBAAKX,SAAL,CAAeiB,GAAf,CAAmBR,SAAnB,EAA8BS,MAA9B,CAAqC,IAAIC,KAAJ,CAAUR,KAAV,CAArC;AACD,aAFD,MAEO;AACL,oBAAKX,SAAL,CAAeiB,GAAf,CAAmBR,SAAnB,EAA8BW,OAA9B,CAAsCV,MAAtC;AACD;AACF;AACD;AACF;AACE;AAhBJ;AAkBD,KAzBD;AAPmB;AAiCpB;;;;;;;;YACeF,O,SAAAA,O;;;;;;AACRC,yB,GAAYY,eAAKC,EAAL,E;AACdC,uB,GAAU,sBAAY,UAACH,OAAD,EAAUF,MAAV,EAAqB;AAC7C,yBAAKlB,SAAL,CAAewB,GAAf,CAAmBf,SAAnB,EAA8B;AAC5BW,oCAD4B;AAE5BF;AAF4B,mBAA9B;AAIA,yBAAKjB,KAAL,CAAWwB,WAAX,CAAuB;AACrBlB,0BAAM,OAAKK,OAAL,CAAac,OADE;AAErBjB,wCAFqB;AAGrBD;AAHqB,mBAAvB;AAKD,iBAVa,C;AAWVmB,uB,GAAUC,WAAW,YAAM;AAC7BD,4BAAU,IAAV;AACA,yBAAK3B,SAAL,CAAeiB,GAAf,CAAmBR,SAAnB,EAA8BS,MAA9B,CAAqC,IAAIC,KAAJ,CAAU,OAAKP,OAAL,CAAae,OAAvB,CAArC;AACD,iBAHa,EAGX,KAAKE,QAHM,C;;AAIdN,0BAAUA,QAAQO,IAAR,CAAa,UAACpB,MAAD,EAAY;AACjC,sBAAIiB,OAAJ,EAAaI,aAAaJ,OAAb;AACb,yBAAK3B,SAAL,CAAegC,MAAf,CAAsBvB,SAAtB;AACA,yBAAO,kBAAQW,OAAR,CAAgBV,MAAhB,CAAP;AACD,iBAJS,EAIPuB,KAJO,CAID,UAACtB,KAAD,EAAW;AAClB,sBAAIgB,OAAJ,EAAaI,aAAaJ,OAAb;AACb,yBAAK3B,SAAL,CAAegC,MAAf,CAAsBvB,SAAtB;AACA,yBAAO,kBAAQS,MAAR,CAAeP,KAAf,CAAP;AACD,iBARS,CAAV;iDASOY,O;;;;;;;;;;;;;;;;;;EA7DkCW,uB;;kBAAxBrC,e","file":"ClientTransport.js","sourcesContent":["import uuid from 'uuid';\nimport TransportBase from '../TransportBase';\n\n/* global chrome */\n\nexport default class ClientTransport extends TransportBase {\n  constructor(options) {\n    super({\n      ...options,\n      name: 'ChromeTransport',\n    });\n    this._requests = new Map();\n    this._port = chrome.runtime.connect({ name: 'transport' });\n    this._port.onMessage.addListener(({\n      type,\n      payload,\n      requestId,\n      result,\n      error,\n    }) => {\n      switch (type) {\n        case this._events.push:\n          if (payload) {\n            this.emit(this._events.push, payload);\n          }\n          break;\n        case this._events.response:\n          if (requestId && this._requests.has(requestId)) {\n            if (error) {\n              this._requests.get(requestId).reject(new Error(error));\n            } else {\n              this._requests.get(requestId).resolve(result);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  }\n  async request({ payload }) {\n    const requestId = uuid.v4();\n    let promise = new Promise((resolve, reject) => {\n      this._requests.set(requestId, {\n        resolve,\n        reject,\n      });\n      this._port.postMessage({\n        type: this._events.request,\n        requestId,\n        payload,\n      });\n    });\n    let timeout = setTimeout(() => {\n      timeout = null;\n      this._requests.get(requestId).reject(new Error(this._events.timeout));\n    }, this._timeout);\n    promise = promise.then((result) => {\n      if (timeout) clearTimeout(timeout);\n      this._requests.delete(requestId);\n      return Promise.resolve(result);\n    }).catch((error) => {\n      if (timeout) clearTimeout(timeout);\n      this._requests.delete(requestId);\n      return Promise.reject(error);\n    });\n    return promise;\n  }\n}\n"]}